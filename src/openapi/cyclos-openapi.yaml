openapi: '3.0.0'
info:
  title: 'Cyclos 4.13 API'
  description: >-
    The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the
    api can be downloaded in both [YAML](@url/cyclos-openapi.yaml) or
    [JSON](@url/cyclos-openapi.json) formats. These files can be used in tools
    that support the OpenAPI specification, such as the [Swagger
    Generator](https://generator.swagger.io/).


    In the API, whenever some data is referenced, for example, a group, or
    payment type, either id or internal name can be used. When an user is to be
    referenced, the special word 'self' (sans quotes) always refers to the
    currently authenticated user, and any identification method (login name,
    e-mail, mobile phone, account number or custom field) that can be used on
    keywords search (as configured in the products) can also be used to identify
    users. Some specific data types have other identification fields, like
    accounts can have a number and payments can have a transaction number. This
    all depends on the current configuration.


    Most of the operations that return data allow selecting which fields to
    include in the response. This is useful for reducing the data to be download
    over the network. If nothing is set, all object fields are returned.
    Unprefixed field names will be handled like a whitelist (only listed fields
    will be included), while names starting with a minus (-) or exclamation mark
    (!) will be handled as blacklist (listed fields will not be included). This
    works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the
    fields `a`, `b` (containing only the `b1` field) and `c` (containing all its
    fields except for `c1` or `c2`).


    For details of the deprecated elements (operations and model) please visit the
    [deprecation notes
    page](https://documentation.cyclos.org/4.13/api-deprecation.html)
    for this version.
  version: '4.13'
servers:
  - url: '@url'

tags:
  - name: Auth
    description: >-
      Operations regarding the user authentication, such as login / logout,
      activating / deactivating an access client and obtaining the current
      authenticated user information.
  - name: Sessions
    description: >-
      Operations for administrators managing sessions of other users.
  - name: Captcha
    description: >-
      Generate new captcha challenges, which are required for some operations
      performed as guest, in order to make it harder for bots to abuse the api.
  - name: Users
    description: >-
      User searching, registration and profile modification. Also provides
      access to the user map directory.
  - name: Operators
    description: >-
      Operations over operators, which are users created by other users to
      manage their data. The registration of operators is performed in this
      tag, but the view and edition of profile fields or full profile is
      performed in the `Users` tag, within `/users/{user}/...` paths. This
      is because operators are a special kind of users.
  - name: OperatorGroups
    description: >-
      Operations over operator groups, which users can create to define which
      permissions their operators will have.
  - name: UserStatus
    description: >-
      Viewing and setting the status of a user / operator. Examples of
      statuses are active, blocked, disabled, removed and purged.
  - name: Phones
    description: >-
      Management of user phones, which is done separatedly from the raw user
      profile fields.
  - name: Addresses
    description: >-
      Management of user addresses, which is done separatedly from the raw user
      profile fields.
  - name: ContactInfos
    description: >-
      Management of user's additional contact information, which can either
      represent contact information for specific employees (e.g. a salesman) or
      distinct subsidiary offices of the same company.
  - name: Images
    description: >-
      Provides access to images of all kinds, for getting metadata, content and
      management operations.
  - name: Files
    description: >-
      Provides access to raw files, maily used to interact with custom field
      values of type file.
  - name: Documents
    description: >-
      Provides access to documents, which can be shared or individual.
  - name: GroupMembership
    description: >-
      Viewing and setting the group of a user / operator.
  - name: ProductAssignment
    description: >-
      Viewing and managing the assigned products to a user.
  - name: Brokering
    description: >-
      Viewing and manage the brokers of a user.
  - name: Passwords
    description: >-
      Management of a user's passwords.
  - name: Contacts
    description: >-
      Management of a user contact list.
  - name: Agreements
    description: >-
      Provides access to agreements the authenticated user must accept in order
      to use the system.
  - name: Devices
    description: >-
      Operations regarding trusted devices.
  - name: DeviceConfirmations
    description: >-
      Allows confirmation of operations using trusted devices.
  - name: DevicePins
    description: >-
      A PIN is an easier way to login to the system instead of using the
      principal / password. When a PIN is defined, it will be associated to
      the current channel and to the user identification method / password
      type that was used when authenticating, thus inheriting its security
      restrictions. E.g. if the user identification method associated to the
      PIN is removed from the list of methods defined to access the channel,
      then the PIN will not work either. Enabling a PIN must be done through
      the corresponding channel configuration.
  - name: Accounts
    description: >-
      Provides access to account information, such as the status (balance,
      credit limit and so on) and account history (list of balance transfers
      between accounts).
  - name: BalanceLimits
    description: >-
      Provides access to the balance limits of user accounts, as well as
      setting them.
  - name: Transfers
    description: >-
      Provides access to balance transfers (also called transfers). A transfer
      represents the actual and definitive transfer of funds between two
      accounts.
  - name: Transactions
    description: >-
      Provides access to transactions. A transaction is an intent to transfer
      balance between accounts. A transaction will generate zero or more
      balance transfers between accounts. For example, a direct payment beween
      2 users can initially be pending administration authorization. Until it
      is authorized, no transfer will be generated. Once authorized, a transfer
      will be created. Another kind of transaction, a scheduled payment, will
      generate one transfer per processed installment. The kinds of transactions
      are:


      - __Direct payment__: A simple payment from / to a user or system
        account. Depending on the configuration, can require authorization
        to be processed.

      - __Scheduled payment__: A payment processed either on a single future
        date or in several installments. Depending on the configuration, can
        require authorization to be processed.

      - __Recurring payment__: A payment which is repeated for a fixed
      number
        of occurrences or until manually canceled. Depending on the
      configuration,
        can require authorization to be processed.

      - __Chargeback__: A chargeback triggers a transfer with the same
      origin
        and destination as an original transfer, but with negative amount,
        effectively returning the balance to the original account.

      - __Payment request__: A payment filled-in by the payee. Once the
      payer
        accepts the reqiest, either a direct or scheduled payment is created
        (which could, depending on the configuration, be pending authorization).

      - __External payment__: A payment to a user not yet registered on the
        system. The payment amount is reserved to either an e-mail address or
        mobile phone number. Once a user registers using either data, the
      payment
        will be performed.

      - __Import__: A transaction that was imported from file.

      - __Ticket__: A payment filled-in by the payee but without a defined
        payer. Once a user (the payer) approces the ticket and the ticket owner
        (receiver) processes it, a direct payment is created (which could,
        depending on the configuration, be pending authorization).

      - __Order__: Payment generated by finishing the shopping cart checkout
        or confirming a webshop order. Depending on the configuration, can
      require
        authorization to be processed.
  - name: EasyInvoices
    description: >-
      Provides access for performing direct payments from easy invoices.
  - name: Payments
    description: >-
      Provides access for performing payments or scheduled payments.
  - name: ScheduledPayments
    description: >-
      Provides actions specific to scheduled payments and installments.
      Performing a scheduled payment is done via `Payments`, while searching or
      viewing details, via `Transactions`.
  - name: Installments
    description: >-
      Provides search and actions over specific to scheduled payment
      installments and recurring payment occurrences. Both are generically
      treated as `Installments`.
  - name: RecurringPayments
    description: >-
      Provides actions specific to recurring payments and their occurrences.
      Performing a recurring payment is done via `Payments`, while searching or
      viewing details, via `Transactions`.
  - name: PendingPayments
    description: >-
      Provides actions for payments that are still pending authorization.
  - name: PaymentRequests
    description: >-
      Provide access to payment requests. A payment request is created by the
      payee with a defined payer. Once the payer (i.e the request's recipient)
      accepts the request, either a direct or scheduled payment is created
      (which could, depending on the configuration, be pending authorization).
  - name: POS
    description: >-
      Provides access for receiving payments or scheduled payments in
      Point-Of-Sale (POS) operations.
  - name: Clients
    description: >-
      Access clients provide a token for user authentication without decoupled
      from the login name and password.
  - name: Vouchers
    description: >-
      Vouchers are the way by which a user (possibly not registered in the
      system) can buy at places that accepts tickets. The shop / seller will
      then redeem the voucher.
  - name: Tickets
    description: >-
      Provide access to tickets. A ticket represents a payment with a
      destinatary but possibly without a defined payer. They allow to a user
      (e.g a shop) generate a ticket for himself and send it to another user to
      allow pay it.
  - name: Mobile
    description: >-
      Contains operations used by the Cyclos mobile application. Unlike others,
      these operations aren't meant to be generic, and this API can change
      without further notice.
  - name: Notifications
    description: >-
      Provides access to the notifications the authenticated user has received.
  - name: NotificationSettings
    description: >-
      Provides access to the notifications settings, where users can choose
      which kinds of notifications they want to receive, and via which mediums
      (internal / e-mail / sms).
  - name: Records
    description: >-
      Provides access to custom records
  - name: Tokens
    description: >-
      Provides access to tokens, which are commonly used as cards, but are
      more generic. Tokens are user identifications whose status can be
      managed.
  - name: Operations
    description: >-
      Provides access to custom operations
  - name: Marketplace
    description: >-
      Provides access to the marketplace, that is, searching or managing
      advertisements. The name `marketplace` is used on paths instead of
      `ads` or `advertisements` because one of the use cases of this API is
      to be used directly by pages from the browser, and ad-blocking browser
      extensions would normally deny such requests.
  - name: AdQuestions
    description: >-
      Provides access to advertisement questions.
  - name: ShoppingCarts
    description: >-
      Provides access to shopping carts. Users can add webshop advertisements
      to the shopping cart, and then check-out them, performing the payment.
      For each user, one shopping cart is created per currency and seller.
      A shopping cart is an early stage or an `Order`. once checked out, use
      the operations in the `Orders` tag to access it.
  - name: Orders
    description: >-
      An order contains a set of items from a seller, to a buyer in a certain
      currency. Orders can be created in 2 ways: either via a shopping cart
      checkout (by the buyer) or directly by the seller. Once created, the
      order must be approved by the other party until its payment is finally
      performed.
  - name: DeliveryMethods
    description: >-
      Provides access to webshop delivery methods, which must be selected for
      an order to be created. A delivery method can have either a fixed amount
      or be negotiated between the seller and the buyer.
  - name: WebshopSettings
    description: >-
      Provides access to general webshop settings for sellers.
  - name: AdInterests
    description: >-
      Provides access to advertisement interests, which are criteria registered
      by users to be notified when new matching advertisements are published.
  - name: NFC
    description: >-
      Contains operations regarding NFC tags
  - name: Push
    description: >-
      Provides a way for clients to subscribe for push notifications
  - name: UI
    description: >-
      Provides data used to create alternative user interfaces
  - name: Validation
    description: >-
      Provides access to complete pending actions waiting for validation.
  - name: Localization
    description: >-
      Provides access to different languages and localization settings.
  - name: Alerts
    description: >-
      Provides access to alerts generated in the system. Currently only
      user alerts are supported (system alerts are not).
  - name: References
    description: >-
      Provides access to (general) references, which are given from a user
      to another to show the satisfaction level.

security:
  - basic: []
  - session: []
  - accessClient: []

paths:
  /auth:
    get:
      operationId: getCurrentAuth
      summary: >-
        Returns data about the currently authenticated user
      description: >-
        Returns the logged user information.
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            An object containing the authenticated user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/data-for-login:
    get:
      operationId: getDataForLogin
      summary: >-
        Returns data containing the configuration for logging-in
      description: >-
        Contains data useful for login, such as the allowed user identification
        methods, the password type and data for the forgot password request.
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: deviceId
          in: query
          required: false
          description: >-
            Trusted device identification. If given and the device is active then
            a pending device confirmation will be created that will be validated
            after the user logs-in. If the validation passes then no confirmation
            password will be used only for that session.
          schema:
            type: string
        - name: pinId
          in: query
          required: false
          description: >-
            Device PIN identification. If given then the information about whether it is active or not will be given in
            the returned `dataForLogin`.
          schema:
            type: string
      responses:
        '200':
          description: >-
            Data for the login functionality
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForLogin'
        '204':
          description: >-
            If there is an authenticated user already
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/session:
    post:
      security:
        - basic: []
        - accessClient: []
      operationId: login
      summary: >-
        Logs-in the currently authenticated user
      description: >-
        Logs-in the currently authenticated user, returning the session token.
        This token can then be used on subsequent requests. After finishing the
        session, the user can then logout by sending an HTTP DELETE to /auth.
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: cookie
          in: query
          required: false
          description: >-
            If true then the server adds the `Session-Token` cookie to the
            response containing only the second half of the session token.
            The returned `sessionToken` field will contain the first half.
          schema:
            type: boolean
        - name: timeoutInSeconds
          in: query
          required: false
          description: >-
            The timeout in seconds for the created session. If this value is not
            given or it is greater than that for the channel then the timeout for
            the channel will be used.
          schema:
            type: integer
        - name: deviceConfirmationId
          in: query
          required: false
          description: >-
            The id of the confirmation (returned in the DataForLogin)
          schema:
            type: string
        - name: deviceId
          in: query
          required: false
          description: >-
            The id of the device used to confirm the session as trusted.
          schema:
            type: string
        - name: hmac
          in: query
          required: false
          description: >-
            The HMAC-SHA256 calculated for the QR-code of the confirmation using
            the secret key stored in the device.
          schema:
            type: string
      responses:
        '200':
          description: >-
            Information about the authenticated user. Is the same data returned on
            GET /auth
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: logout
      summary: >-
        Log-out the current session
      description: >-
        Invalidates the session used for authentication
      tags:
        - Auth
      parameters:
        - name: cookie
          in: query
          required: false
          description: >-
            If true then the server adds the `Session-Token` cookie to the
            response containing only the second half of the session token.
            The returned `sessionToken` field will contain the first half.
          schema:
            type: boolean
      security:
        - session: []
      responses:
        '200':
          description: >-
            The session was invalidated
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/session/replace/{sessionToken}:
    post:
      operationId: replaceSession
      summary: >-
        Replaces a session token previously obtained
      description: >-
        This operation is intended to be used by custom frontends which log-in
        users externally. In those cases, the full session token is obtained.
        This operation replaces that session token, assuming it could be
        compromised by being sent through other mediums (e-mail, etc) by a new
        session token. The given session token is validated and removed, and a
        new session is created.
        Also accepts the `cookie` parameter with the same meaning as the
        `login` / `logout` operations.


        This operation can only be invoked as guest.
      tags:
        - Auth
      parameters:
        - name: sessionToken
          in: path
          required: true
          schema:
            type: string
          description: >-
            The full session token obtained externally
        - name: cookie
          in: query
          required: false
          schema:
            type: boolean
          description: >-
            If true then the server adds the `Session-Token` cookie to the
            response containing only the second half of the session token.
            The returned `sessionToken` field will contain the first half.
      responses:
        '200':
          description: >-
            The new session token, either just half of it or full, according
            to the `cookie` parameter.
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/session/secondary-password:
    get:
      security:
        - session: []
      operationId: getSecondaryPasswordInput
      summary: >-
        Returns the data for a secondary access password input
      description: >-
        Returns the data for a secondary access password input. Only if there is a
        secondary access password configured for the channel.
      tags:
        - Auth
      responses:
        '200':
          description: >-
            Data for a secondary access password input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordInput'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - session: []
      operationId: validateSecondaryPassword
      summary: >-
        Validates the current pending session
      description: >-
        Validates a pending session using the secondary access password (if any)
        configured for the current channel.
      tags:
        - Auth
      parameters: []
      responses:
        '204':
          description: >-
            The session was validated correctly and the user has logged in
            successfully.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The secondary access password
        required: true
        content:
          text/plain:
            schema:
              type: string

  /auth/access-client:
    delete:
      operationId: disconnectCurrentClient
      summary: >-
        Disconnect the current access client
      description: >-
        Changes the status of the access client used for authentication,
        disconnecting it. To be reused, it has to be activated again.
      tags:
        - Auth
      security:
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '200':
          description: >-
            The access client was disconnected
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/otp:
    post:
      operationId: newOtp
      summary: >-
        Generates a new One-Time-Password (OTP) for the authenticated user
      description: >-
        Sends a new OTP for the authenticated user. Used when the confirmation
        password of a specific action is required and `PasswordInput.mode` is
        `otp`.
      tags:
        - Auth
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: otpChannel
          in: query
          required: false
          description: >-
            The channel name in which the OTP will be used to confirm the operation.
            Please do not confuse with the parameter used to specify the channel
            through the client is connecting with Cyclos.
            The configuration for the given channel will be used to validate the request.
            E.g. when confirming an easy invoice / ticket through a custom front using a channel other than
            `easyInvoice` / `ticket` then the channel `easyInvoice` / `ticket` must be set at the moment of
            requesting an OTP.
          schema:
            type: string
        - name: medium
          in: query
          required: true
          description: >-
            The medium the user wants to receive the OTP
          schema:
            $ref: '#/components/schemas/SendMediumEnum'
      responses:
        '200':
          description: >-
            The OTP is sent to the user, and the e-mail or list of normalized
            mobile phone numbers that received the OTP are returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            There was an error when generating the OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpError'

  /auth/forgotten-password/request:
    post:
      operationId: forgottenPasswordRequest
      summary: >-
        Requests a forgotten password, notifying the user with instructions to
        reset it
      description: >-
        Sends an e-mail (in the future SMS will be supported) with instructions on
        how to reset the password, in case it was forgotten. In order to work, the
        Cyclos configuration options, both to show the forgotten password link and
        to enable for users need to be set.
      tags:
        - Auth
      parameters: []
      responses:
        '204':
          description: >-
            The password e-mail is sent and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for requesting a forgotten password reset
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgottenPasswordRequest'

  /auth/forgotten-password/data-for-change:
    get:
      operationId: getDataForChangeForgottenPassword
      summary: >-
        Returns configuration data used to change a forgotten password after the
        initial request
      description: >-
        After the user has requested a forgotten password reset, using the `POST
        /auth/forgotten-password/request` path, the link on the received e-mail
        will contain a key which can be used to actually change the password. This
        key must be passed to this operation in order to request input on the new
        password, and maybe confirm the security question, depending on the Cyclos
        configuration.
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          in: query
          required: true
          description: >-
            The validation key which was sent by e-mail to the user
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for proceeding with the forgot password reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForChangeForgottenPassword'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgotten-password:
    post:
      operationId: changeForgottenPassword
      summary: >-
        Changes the a forgotten password after have completed the request
      description: >-
        Changes the password (if manual), or sends a new one by e-mail (if
        generated) after the forgotten password reset process is completed.
      tags:
        - Auth
      parameters: []
      responses:
        '204':
          description: >-
            The password is changed (if manual) or reset and sent by e-mail (if
            generated) and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            There was an error when changing the forgotten password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgottenPasswordError'
      requestBody:
        description: >-
          The parameters for changing the password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeForgottenPassword'
  /sessions/data-for-search:
    get:
      operationId: getSessionDataForSearch
      summary: >-
        Returns data for searching user sessions
      description: >-
        Returns data for searching connected users
      tags:
        - Sessions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for searching sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions:
    get:
      operationId: searchSessions
      summary: >-
        Search for sessions
      description: >-
        Returns the sessions matching a given criteria.
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: broker
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) of a broker. Used to filter the sessions of users brokered by the given broker."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Internal names of the sessions channels that can be returned."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: excludeCurrentSession
          in: query
          required: false
          description: "Whether to exclude or not the current session."
          schema:
            type: boolean
        - name: operatorsOf
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) of a user. The owner member of the operators sessions Used to filter the operator sessions of the given user."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: roles
          in: query
          required: false
          description: "The role of the logged user in the sessions."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RoleEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: user
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) of the sessions owner."
          schema:
            type: string
      tags:
        - Sessions
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The filtered sessions
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: loginUser
      summary: >-
        Logins a user, returning data from the new session
      description: >-
        Created a session for a given user. Must be executed as administrator with
        permissions. A channel can be specified (defaults to `main`) so the user
        can be logged in by some external actor (like an website) and then
        redirected to `<cyclos-root>?sessionToken=<session-token>`. It is also
        recommended to set in Cyclos the login and logout URLs in the
        configuration, so, when the user logs out, he will be redirected back to
        the previous website.
      tags:
        - Sessions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            An object containing the authenticated user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuth'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          Information about the user being logged in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'

  /{user}/sessions:
    delete:
      operationId: disconnectUserSessions
      summary: >-
        Disconnects all sessions of a user.
      description: >-
        Disconnects all sessions of the given user.
      tags:
        - Sessions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The number of disconnected sessions.
          content:
            plain/text:
              schema:
                type: string
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionToken}:
    delete:
      operationId: disconnectSession
      summary: >-
        Disconnects a session.
      description: >-
        Disconnects a session by its session token
      tags:
        - Sessions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
          - name: sessionToken
            required: true
            in: path
            schema:
              type: string
            description: >-
              The session token
      responses:
        '204':
          description: >-
            The session was disconnected
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /captcha:
    post:
      operationId: newCaptcha
      summary: >-
        Returns a new captcha challenge
      description: >-
        Only allowed when internal captchas are in use.
      tags:
        - Captcha
      parameters:
        - name: group
          required: false
          in: query
          description: >-
            On public / user registration, it is possible to specify a destination
            group, so the captcha background image will be taken from this new
            group's configured theme.
          schema:
            type: string
      responses:
        '201':
          headers:
            Location:
              description: >-
                URL for the image to get the captcha challenge
              schema:
                type: string
          description: >-
            A new captcha challenge has been created. The captcha id is returned
            on the body
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /captcha/{id}:
    get:
      operationId: getCaptchaContent
      summary: >-
        Returns a captcha image content
      description: >-
        Returns the image content of a captcha text. When neither `width` nor
        `height` are specified, returns the original size. The original ratio is
        always maintained. When only of one of  the dimensions is specified, it is
        used as maximum, and the other is calculated. When both are informed, the
        maximum size with the original ratio that fits both dimensions is used.
      tags:
        - Captcha
      parameters:
        - $ref: '#/components/parameters/id'
        - name: group
          required: false
          in: query
          description: >-
            On public / user registration, it is possible to specify a destination
            group, so the captcha background image will be taken from this new
            group's configured theme.
          schema:
            type: string
        - name: width
          in: query
          required: false
          description: >-
            The requested image width
          schema:
            type: integer
        - name: height
          in: query
          required: false
          description: >-
            The requested file height
          schema:
            type: integer
      responses:
        '200':
          description: >-
            The image content
          content:
            'image/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/data-for-search:
    get:
      operationId: getUserDataForSearch
      summary: >-
        Get configuration data for searching users
      description: >-
        Returns data with the current configuration regarding the user search
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: broker
          in: query
          required: false
          description: >-
            When set, will be data for searching assigned members of the given
            broker (id, identification method or `self`)
          schema:
            type: string
      responses:
        '200':
          description: >-
            The configuration data for user search
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      operationId: searchUsers
      summary: >-
        Search for users
      description: >-
        Returns a page of users that match a given criteria. The fields returned
        depend on the products, in the profile fields of other users setting. Only
        fields (both basic or custom) marked to be returned on user list are
        returned. If no fields are set to be returned, or if the
        `ignoreProfileFieldsInList` flag is true in the given query then the
        resulting objects will have the `display` and `shortDisplay` filled
        in.  However, those fields are not returned when another profile field is
        returned, preventing duplicated data to be returned.
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: activationPeriod
          in: query
          required: false
          description: "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: addressResult
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserAddressResultEnum'
        - name: brokers
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) for brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: contactsOwner
          in: query
          required: false
          description: "Indicates the (managed) user to exclude contacts when `excludecontacts` is set. Defaults to the logged user."
          schema:
            type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: excludeContacts
          in: query
          required: false
          description: "When set to `true` will not return any user that is already a contact of the user indicated on `contactsOwner` (the logged user if not set)."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Either id or internal names of groups / group sets"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: ignoreProfileFieldsInList
          in: query
          required: false
          description: "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`."
          schema:
            type: boolean
        - name: includeGroup
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users."
          schema:
            type: boolean
        - name: includeGroupSet
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users."
          schema:
            type: boolean
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: lastLoginPeriod
          in: query
          required: false
          description: "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: latitude
          in: query
          required: false
          description: "The reference latitude for distance searches"
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          required: false
          description: "The reference longitude for distance searches"
          schema:
            type: number
            format: double
        - name: mainBrokerOnly
          in: query
          required: false
          description: "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker."
          schema:
            type: boolean
        - name: maxDistance
          in: query
          required: false
          description: "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position."
          schema:
            type: number
            format: double
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: roles
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RoleEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserStatusEnum'
        - name: usersToExclude
          in: query
          required: false
          description: "Indicated the users to be excluded from the result"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: usersToInclude
          in: query
          required: false
          description: "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
      tags:
        - Users
      responses:
        '200':
          description: >-
            The users matching the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createUser
      summary: >-
        Registers a new user
      description: >-
        Can either be a public registration, requiring no authorization, or a user
        registration by an administrator or broker. The public registration
        normally requires a CAPTCHA challenge to prevent bots. On user
        registration the following data is also created:

        * Address;

        * Mobile phone;

        * Landline phone;

        * Images.


        After the registration those data are managed separately than the user
        profile data.
      parameters: []
      tags:
        - Users
      responses:
        '201':
          description: >-
            The result of the registration
          headers:
            Location:
              description: >-
                URL for viewing the registered user's profile
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The user to be registered
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNew'

  /users/export/{format}:
    parameters:
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportUsers
      summary: >-
        Exports the user search results to a file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /users/data-for-search`.
      parameters:
        - name: activationPeriod
          in: query
          required: false
          description: "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: addressResult
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserAddressResultEnum'
        - name: brokers
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) for brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: contactsOwner
          in: query
          required: false
          description: "Indicates the (managed) user to exclude contacts when `excludecontacts` is set. Defaults to the logged user."
          schema:
            type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: excludeContacts
          in: query
          required: false
          description: "When set to `true` will not return any user that is already a contact of the user indicated on `contactsOwner` (the logged user if not set)."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Either id or internal names of groups / group sets"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: ignoreProfileFieldsInList
          in: query
          required: false
          description: "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`."
          schema:
            type: boolean
        - name: includeGroup
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users."
          schema:
            type: boolean
        - name: includeGroupSet
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users."
          schema:
            type: boolean
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: lastLoginPeriod
          in: query
          required: false
          description: "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: latitude
          in: query
          required: false
          description: "The reference latitude for distance searches"
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          required: false
          description: "The reference longitude for distance searches"
          schema:
            type: number
            format: double
        - name: mainBrokerOnly
          in: query
          required: false
          description: "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker."
          schema:
            type: boolean
        - name: maxDistance
          in: query
          required: false
          description: "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position."
          schema:
            type: number
            format: double
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: roles
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RoleEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserStatusEnum'
        - name: usersToExclude
          in: query
          required: false
          description: "Indicated the users to be excluded from the result"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: usersToInclude
          in: query
          required: false
          description: "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
      tags:
        - Users
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/validate/{group}/{field}:
    get:
      operationId: validateUserRegistrationField
      summary: >-
        Validates the value of a single field for user registration
      description: >-
        Validates the value of a field which will be used for registering a user,
        returning either `204 No Content` if the field is valid or `200` with the
        error description if the field is invalid. Notice that the result is the
        validation error. If a `422` status code is returned it means that either
        the given `field` is invalid or the given `value` is empty.
      parameters:
        - name: group
          required: true
          in: path
          description: >-
            The internal name or id of the group in which the user is being
            registered
          schema:
            type: string
        - name: field
          required: true
          in: path
          description: >-
            One of: `name` (full name), `username` (login name), `email`,
            `mobilePhone`, `landLinePhone` or the internal name of a custom field.
          schema:
            type: string
        - name: value
          required: true
          in: query
          description: >-
            The value to be validated
          schema:
            type: string
        - name: asMember
          required: false
          in: query
          description: >-
            Flag required only when the authenticated user is a member and a
            broker, in that case we need to distingish between both. If true then
            the groups returned will be those allowed as member, otherwise will
            return the goups allowed as broker.
          schema:
            type: boolean
      tags:
        - Users
      responses:
        '200':
          description: >-
            The validation error if the field is invalid
          content:
            text/plain:
              schema:
                type: string
        '204':
          description: >-
            No content if the field is valid
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/groups-for-registration:
    get:
      operationId: getGroupsForUserRegistration
      summary: >-
        Returns the groups the authenticated user or guest can register on
      description: >-
        Returns the list of groups the authenticated user can use to perform a new
        user registration. If authenticated as guest, will return the groups
        currently set for public registration. When there is an authenticated
        administrator, broker or member, will be the configured groups for new
        users.
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: asMember
          required: false
          in: query
          description: >-
            Flag required only when the authenticated user is a member and a
            broker, in that case we need to distingish between both. If true then
            the groups returned will be those allowed as member, otherwise will
            return the goups allowed as broker.
          schema:
            type: boolean
      responses:
        '200':
          description: >-
            The list of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupForRegistration'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/validate/registration/{key}:
    post:
      deprecated: true
      x-remove-version: 4.14
      operationId: validateUserRegistration
      summary: >-
        Validates an user registration via a key sent by e-mail
      description: >-
        Use `POST /validate/registration/{key}`



        When a user is registered, and the configuration enables the validation,
        an e-mail is sent to user e-mail, with a link to verify it. In this case,
        only after verifying the e-mail the user is activated. This operation
        effectively verifies the e-mail and performs the user activation. However,
        depending on the settings, the initial user status might be blocked or
        inactive.
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          required: true
          in: path
          description: >-
            The validation key sent via e-mail
          schema:
            type: string
      tags:
        - Users
      responses:
        '200':
          description: >-
            Returns details about the verified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/validate/email-change/{key}:
    post:
      deprecated: true
      x-remove-version: 4.14
      operationId: validateEmailChange
      summary: >-
        Validates an e-mail via a validation key
      description: >-
        Use `POST /validate/email-change/{key}`



        When the user e-mail is changed, and the configuration enables the
        validation, an e-mail is sent to the new user e-mail, with a link to
        verify it. In this case, only after verifying the new e-mail it is
        effectively set as the new e-mail. This operation effectively verifies the
        new e-mail.
      parameters:
        - name: key
          required: true
          in: path
          description: >-
            The validation key sent via e-mail
          schema:
            type: string
      tags:
        - Users
      responses:
        '200':
          description: >-
            Returns the id of the user that had the e-mail verified
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/data-for-new:
    get:
      operationId: getUserDataForNew
      summary: >-
        Get configuration data for registering new users
      description: >-
        Almost every aspect of a user profile is configurable in Cyclos, such as
        enabled basic profile fields, custom profile fields, address fields, phone
        configuration and so on. As such, if a front-end needs to be robust to
        such a dynamic nature, it should get this information in order to create a
        correct registration form.
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: group
          required: true
          in: query
          description: >-
            The intial group for the new user
          schema:
            type: string
        - name: broker
          required: false
          in: query
          description: >-
            The broker for the new user. Only used if the authenticated user is
            an administrator.
          schema:
            type: string
        - name: asMember
          required: false
          in: query
          description: >-
            Flag required only when the authenticated user is a member and a
            broker, in that case we need to distingish between both. If true then
            the configuration data for registering new users as member will be
            returned, otherwise will return the configuration data for registering
            as broker.
          schema:
            type: boolean
      tags:
        - Users
      responses:
        '200':
          description: >-
            An object containing the data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user}:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: viewUser
      summary: >-
        View a user / operator details
      description: >-
        Returns the profile information of either a user or operator.
      parameters:
        - $ref: '#/components/parameters/fields'
      tags:
        - Users
      responses:
        '200':
          description: >-
            User / operator details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateUser
      summary: >-
        Save a user / operator profile fields
      description: >-
        Saves the user / operator profile felds. Only the basic fields (full
        name, login name, e-mail) and custom fields can be saved with this
        operation. Addresses, phones and images must be managed either via
        the full profile (`GET /users/{user}/data-for-edit-profile` /
        `PUT /users/{user}/profile`) or through their own paths.
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
      tags:
        - Users
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            If the save is correct, nothing is returned
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The user / operator to be saved
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEdit'
    delete:
      operationId: deletePendingUser
      summary: >-
        Permanently removes a pending user
      description: >-
        This operation physically removes user pending registration validation,
        that is, the user `status` is `pending`.
        If the user registration was ever validated, this operation will fail.
      tags:
        - Users
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The pending user was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user}/data-for-edit:
    get:
      operationId: getUserDataForEdit
      summary: >-
        Get configuration data to edit a user / operator profile
      description: >-
        Returns data to edit a user / operator profile fields.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      tags:
        - Users
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            User / operator profile fields details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user}/data-for-edit-profile:
    get:
      operationId: getDataForEditFullProfile
      summary: >-
        Returns data for editing the full profile of a user / operator
      description: >-
        The returned data contains all profile-related elements of a
        user or operator - profile fields, phones, addresses, images
        and additional contact information. Operators cannot have
        addresses, images or additional contact information, so these
        will not be sent.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      tags:
        - Users
      responses:
        '200':
          description: >-
            The data for editing the full profile of the user / operator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForEditFullProfile'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user}/profile:
    post:
      operationId: saveUserFullProfile
      summary: >-
        Saves the full profile at once
      description: >-
        Saves in a single, transactional operation, the full user / operator
        profile: edition of the profile fields and creating / modifying /
        removing phones, addresses, additional contacts and images. Operators
        can never have addresses, additional contacts or images, so they don't
        apply to operators.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/confirmationPassword'
      tags:
        - Users
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The generated identifiers for created entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullProfileEditResult'
        '500':
          description: >-
            If a nested error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedError'
      requestBody:
        description: >-
          The full profile data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullProfileEdit'

  /users/map/data-for-search:
    get:
      operationId: getDataForMapDirectory
      summary: >-
        Get configuration data for searching the user directory (map).
      description: >-
        Returns data with the current configuration regarding the user directory
        (map).
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The configuration data for user directory (map)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataForMap'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/map:
    get:
      operationId: searchMapDirectory
      summary: >-
        Search the user directory (map)
      description: >-
        Returns a page of users in the map directory that match a given criteria
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: activationPeriod
          in: query
          required: false
          description: "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: addressResult
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserAddressResultEnum'
        - name: brokers
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) for brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: contactsOwner
          in: query
          required: false
          description: "Indicates the (managed) user to exclude contacts when `excludecontacts` is set. Defaults to the logged user."
          schema:
            type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: excludeContacts
          in: query
          required: false
          description: "When set to `true` will not return any user that is already a contact of the user indicated on `contactsOwner` (the logged user if not set)."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Either id or internal names of groups / group sets"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: ignoreProfileFieldsInList
          in: query
          required: false
          description: "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`."
          schema:
            type: boolean
        - name: includeGroup
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users."
          schema:
            type: boolean
        - name: includeGroupSet
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users."
          schema:
            type: boolean
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: lastLoginPeriod
          in: query
          required: false
          description: "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: latitude
          in: query
          required: false
          description: "The reference latitude for distance searches"
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          required: false
          description: "The reference longitude for distance searches"
          schema:
            type: number
            format: double
        - name: mainBrokerOnly
          in: query
          required: false
          description: "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker."
          schema:
            type: boolean
        - name: maxDistance
          in: query
          required: false
          description: "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position."
          schema:
            type: number
            format: double
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: roles
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RoleEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserStatusEnum'
        - name: usersToExclude
          in: query
          required: false
          description: "Indicated the users to be excluded from the result"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: usersToInclude
          in: query
          required: false
          description: "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
      responses:
        '200':
          description: >-
            The users matching the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/operators/data-for-search:
    get:
      operationId: getUserOperatorsDataForSearch
      summary: >-
        Get configuration data for searching operators of the given user
      description: >-
        Returns data with the current configuration regarding the operators of the
        given user
      tags:
        - Operators
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The configuration data for operators search over a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOperatorsDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/operators:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: searchUserOperators
      summary: >-
        Search the operators of a given user
      description: >-
        Returns a page of operators that match a given criteria.
        To view an operator profile, use `GET /users/{operator}`.
      tags:
        - Operators
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: ignoreProfileFieldsInList
          in: query
          required: false
          description: "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`."
          schema:
            type: boolean
        - name: operatorGroups
          in: query
          required: false
          description: "An array of operator group ids"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserStatusEnum'
      responses:
        '200':
          description: >-
            The operators matching the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperatorResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: registerOperator
      summary: >-
        Registers a new operator
      description: >-
        Registers an operator, together with his password and phones.
      parameters: []
      tags:
        - Operators
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '201':
          description: >-
            The result of the registration
          headers:
            Location:
              description: >-
                URL for viewing the registered operator's profile
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The operator to be registered
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorNew'

  /operators/data-for-search:
    get:
      operationId: getGeneralOperatorsDataForSearch
      summary: >-
        Get configuration data for searching operators of any managed user
      description: >-
        Returns data with the current configuration regarding the search of
        operators of managed users. This is meant to be used by either
        administrators or brokers
      tags:
        - Operators
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The configuration data for operators search
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralOperatorsDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /operators:
    get:
      operationId: searchGeneralOperators
      summary: >-
        Search the visible operators (of any managed user)
      description: >-
        Returns a page of operators that match a given criteria.
        To view an operator profile, use `GET /users/{operator}`.
      tags:
        - Operators
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: userGroups
          in: query
          required: false
          description: >-
            Either id or internal names of user groups / group sets
          schema:
            type: array
            items:
              type: string
        - name: broker
          in: query
          required: false
          description: >-
            Either id or a principal (login name, e-mail, etc) of the user broker
          schema:
            type: string
        - name: creationPeriod
          description: >-
            The minimum / maximum user creation date. Only taken into account if
            searching as administrator or managing broker.
            Is expressed an array, with the lower bound as first element, and
            the upper bound as second element. When only one element, will have
            just the lower bound. To specify only the upper bound, prefix the value
            with a comma.
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              format: date-time
        - name: statuses
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserStatusEnum'
      responses:
        '200':
          description: >-
            The users matching the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperatorResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/operators/data-for-new:
    get:
      operationId: getOperatorDataForNew
      summary: >-
        Get configuration data for registering a new operator
      description: >-
        Contains all configuration needed for registering an operator, such
        as the enabled profile fields and the password(s).
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: group
          required: false
          in: query
          description: >-
            The operator group. If no group is set, will return the list of
            operator groups for this owner. If a group is pre-set, will
            return only that group.
          schema:
            type: string
      tags:
        - Operators
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            An object containing the data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/operator-groups/list-data:
    get:
      operationId: getUserOperatorGroupsListData
      summary: >-
        Returns data for operator groups listing of the given user
      description: >-
        Returns data containing the operator groups beloging to the given user,
        plus additional data related to them.
      tags:
        - OperatorGroups
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The data for listing operator groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOperatorGroupsListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/operator-groups:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: listOperatorGroupsByUser
      summary: >-
        Lists all operator groups for a given user
      description: >-
        Returns a list with the operator groups of the given user.
      tags:
        - OperatorGroups
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The list of visible user addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityReference'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createOperatorGroup
      summary: >-
        Creates a new operator group for the given user
      description: >-
        Creates a new operator group for the given user
      tags:
        - OperatorGroups
      responses:
        '201':
          description: >-
            Returns the identifier of the new group
          headers:
            Location:
              description: >-
                URL for viewing the operator group details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The operator group to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorGroupNew'

  /{user}/operator-groups/data-for-new:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getOperatorGroupDataForNew
      summary: >-
        Returns data for creating an operator group
      description: >-
        Returns configuration data for creating an operator group,
        such as which operations are available.
      tags:
        - OperatorGroups
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorGroupDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /operator-groups/{id}/data-for-edit:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: getOperatorGroupDataForEdit
      summary: >-
        Returns data for editing an operator group
      description: >-
        Returns configuration data for editing an operator group,
        such as which operations are available.
      tags:
        - OperatorGroups
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorGroupDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /operator-groups/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: viewOperatorGroup
      summary: >-
        Returns details of a specific operator group
      description: >-
        Returns information about an operator group, located by id
      tags:
        - OperatorGroups
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The operator group data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorGroupView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateOperatorGroup
      summary: >-
        Updates an existing operator group.
      description: >-
        Updates an existing operator group.
      tags:
        - OperatorGroups
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The operator group was updated
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The operator group to be edited
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorGroupEdit'
    delete:
      operationId: deleteOperatorGroup
      summary: >-
        Removes an operator group.
      description: >-
        Removes an operator group.
      tags:
        - OperatorGroups
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The operator group was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/addresses/list-data:
    get:
      operationId: getUserAddressesListData
      summary: >-
        Returns data for addresses listing of the given user
      description: >-
        Returns data containing the (visible) user addresses, plus additional data
        related to addresses.
      tags:
        - Addresses
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The data for listing addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddressesListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/addresses:
    get:
      operationId: listAddressesByUser
      summary: >-
        Lists all (visible) user addresses
      description: >-
        Returns a list with all addresses of the given user that the currently
        authenticated user can see.
      tags:
        - Addresses
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The list of visible user addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AddressResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createAddress
      summary: >-
        Creates a new address for the given user
      description: >-
        Creates a new address for the given user. If it is set to be the default
        one, the previous default (if any) will no longer be the default address
        for that user.
      tags:
        - Addresses
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '201':
          description: >-
            Returns the identifier of the new address
          headers:
            Location:
              description: >-
                URL for viewing the address details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The address to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressNew'

  /{user}/addresses/primary:
    get:
      operationId: getUserPrimaryAddress
      summary: >-
        Returns the primary address of a given user
      description: >-
        Returns the primary (default) address of the given user, in case it is
        visible
      tags:
        - Addresses
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The primary addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '204':
          description: >-
            No content when no address is primary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/addresses/data-for-new:
    get:
      operationId: getAddressDataForNew
      summary: >-
        Returns data to create a new address
      description: >-
        Returns configuration data for creating an address for the given user
      tags:
        - Addresses
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The data for creating an address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /addresses/{id}/data-for-edit:
    get:
      operationId: getAddressDataForEdit
      summary: >-
        Returns data to edit an existing address
      description: >-
        Returns configuration data for editing an address, plus the current
        AddressEdit object that can be altered and sent back
      tags:
        - Addresses
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The data for editing an address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /addresses/{id}:
    get:
      operationId: viewAddress
      summary: >-
        Returns details of a specific address
      description: >-
        Returns information about an address, located by id
      tags:
        - Addresses
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The address data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateAddress
      summary: >-
        Updates an existing address
      description: >-
        Updates an existing address
      tags:
        - Addresses
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The address was updated
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The address to be edited
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressEdit'
    delete:
      operationId: deleteAddress
      summary: >-
        Removes an address
      description: >-
        Removes an address
      tags:
        - Addresses
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The address was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /addresses/{id}/password-for-remove:
    get:
      operationId: getPasswordInputForRemoveAddress
      summary: >-
        Returns a confirmation `PasswordInput` for removing an address, if any
      description: >-
        If a confirmation password is required to remove an address, clients
        should invoke this operation prior to effectively removing the address,
        which will return the data regarding the confirmation password.
      tags:
        - Addresses
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The confirmation password input, or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordInput'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /addresses/countries:
    get:
      operationId: listCountries
      summary: >-
        Lists all known countries with the ISO code and display name
      description: >-
        The country code is the 2-letter, `ISO 3166-1 alpha-2` code, and the
        display name is returned in the authenticated user's language.
      tags:
        - Addresses
      responses:
        '200':
          description: >-
            The list of countries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/phones/list-data:
    get:
      operationId: getUserPhonesListData
      summary: >-
        Returns data for listing a user's phones
      description: >-
        Returns data containing the (visible) user phones, plus additional data
        related to phones.
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            An object containing the phones plus additional information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhonesListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/phones:
    get:
      operationId: listPhonesByUser
      summary: >-
        Lists all (visible) user phones
      description: >-
        Returns a list with all phones of the given user that the currently
        authenticated user can see.
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The list of visible user phones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhoneResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createPhone
      summary: >-
        Creates a new phone for the given user
      description: >-
        Creates a new phone for the given user
      tags:
        - Phones
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '201':
          description: >-
            Returns the identifier of the new phone
          headers:
            Location:
              description: >-
                URL for viewing the mobile phone details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The phone to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNew'

  /{user}/phones/data-for-new:
    get:
      operationId: getPhoneDataForNew
      summary: >-
        Returns data to create a new phone
      description: >-
        Returns configuration data for creating a phone for the given user
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: type
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PhoneKind'
      responses:
        '200':
          description: >-
            The data for creating a phone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /phones/{id}/data-for-edit:
    get:
      operationId: getPhoneDataForEdit
      summary: >-
        Returns data to edit an existing phone
      description: >-
        Returns configuration data for editing a phone, plus the current
        `PhoneEdit` object that can be altered and sent back
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The data for editing a phone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /phones/{id}:
    get:
      operationId: viewPhone
      summary: >-
        Returns details of a specific phone
      description: >-
        Returns information about a phone, located by id
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The phone data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deletePhone
      summary: >-
        Removes a phone
      description: >-
        Removes a phone
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The phone was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updatePhone
      summary: >-
        Updates an existing phone
      description: >-
        Updates an existing phone
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The phone was updated
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The phone to be edited
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneEdit'

  /phones/{id}/password-for-remove:
    get:
      operationId: getPasswordInputForRemovePhone
      summary: >-
        Returns a confirmation `PasswordInput` for removing a phone, if any
      description: >-
        If a confirmation password is required to remove a phone, clients should
        invoke this operation prior to effectively removing the phone, which will
        return the data regarding the confirmation password.
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The confirmation password input, or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordInput'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /phones/{id}/send-verification-code:
    post:
      operationId: sendPhoneVerificationCode
      summary: >-
        Sends the verification code for a user to verify the mobile phone
      description: >-
        Sends an SMS text with a verification code the user can use to verify his
        mobile phone. Only verified phones can be used for receiving SMS
        notifications or to operate in the SMS operations channel. Only the phone
        owner can verify phones with this method. Administrators / brokers can
        directly mark a phone number as verified.
      tags:
        - Phones
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The phone number which received the SMS
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            There was an error when sending the verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpError'

  /phones/{id}/verify:
    post:
      operationId: verifyPhone
      summary: >-
        Marks a phone as verified if the code matches
      description: >-
        Verifies a mobile phone by submitting the code received by SMS. Only
        verified phones can be enabled for receiving SMS notifications or to
        operate in the SMS operations channel. Only the phone owner can verify
        phones with this method. Administrators / brokers can directly mark a
        phone number as verified when saving the phone.
      tags:
        - Phones
      parameters:
        - $ref: '#/components/parameters/id'
        - name: code
          in: query
          required: true
          description: >-
            The verification code received by SMS
          schema:
            type: string
      responses:
        '200':
          description: >-
            The verification status
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CodeVerificationStatusEnum'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /phones/{id}/enable-for-sms:
    post:
      operationId: enablePhoneForSms
      summary: >-
        Marks a phone as enabled to receive SMS notifications and operate in the
        SMS channel
      description: >-
        Marks a phone as enabled to receive SMS notifications and operate in. Only
        allowed if is a verified mobile phone not already enabled for SMS. Only
        the phone owner can verify phones with this method. Administrators /
        brokers can directly mark a phone number as verified when saving it.
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The phone is enabled for SMS and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /phones/{id}/disable-for-sms:
    post:
      operationId: disablePhoneForSms
      summary: >-
        Marks a phone as disabled to receive SMS notifications and operate in the
        SMS channel
      description: >-
        Marks a phone as disabled to receive SMS notifications and operate in. If
        the confirmation password is enabled, it must be passed in. Only allowed
        if is a verified mobile phone not already enabled for SMS. Only the phone
        owner can verify phones with this method. Administrators / brokers can
        directly mark a phone number as verified when saving it.
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The phone is disabled for SMS and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /phones/{id}/password-for-disable-sms:
    get:
      operationId: getPasswordInputForDisablePhoneForSms
      summary: >-
        Returns a confirmation `PasswordInput` for disabling SMS of a phone, if
        any
      description: >-
        If a confirmation password is required to disable a phone from sending /
        receiving SMS, clients should invoke this operation prior to effectively
        disabling SMS, which will return the data regarding the confirmation
        password.
      tags:
        - Phones
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The confirmation password input, or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordInput'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/contact-infos/list-data:
    get:
      operationId: getUserContactInfosListData
      summary: >-
        Returns data for listing additional contact informations of the given
        user.
      description: >-
        Returns data containing the (visible) user additional contact
        informations, plus additional data related to them.
      tags:
        - ContactInfos
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The data for listing additional contact informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContactInfosListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/contact-infos:
    get:
      operationId: listContactInfosByUser
      summary: >-
        Lists all (visible) additional contact informations for the user
      description: >-
        Returns a list with all additional contact informations of the given user
        that the currently authenticated user can see.
      tags:
        - ContactInfos
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The list of visible additional contact information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactInfoResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createContactInfo
      summary: >-
        Creates a new additional contact information for the given user
      description: >-
        Creates a new additional contact information for the given user.
      tags:
        - ContactInfos
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '201':
          description: >-
            Returns the identifier of the new additional contact information
          headers:
            Location:
              description: >-
                URL for viewing the additional contact information details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The additional contact information to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInfoNew'

  /{user}/contact-infos/data-for-new:
    get:
      operationId: getContactInfoDataForNew
      summary: >-
        Returns data to create a new additional contact information
      description: >-
        Returns configuration data for creating an additional contact information
        for the given user
      tags:
        - ContactInfos
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The data for creating an additional contact information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfoDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contact-infos/{id}/data-for-edit:
    get:
      operationId: getContactInfoDataForEdit
      summary: >-
        Returns data to edit an existing additional contact information
      description: >-
        Returns configuration data for editing an additional contact information,
        plus the current ContactInfoEdit object that can be altered and posted
        back.
      tags:
        - ContactInfos
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The data for editing an contactInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfoDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contact-infos/{id}:
    get:
      operationId: viewContactInfo
      summary: >-
        Returns details of a specific additional contact information
      description: >-
        Returns information about an additional contact information by id
      tags:
        - ContactInfos
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The additional contact information data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfoView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateContactInfo
      summary: >-
        Updates an existing additional contact information
      description: >-
        Updates an existing additional contact information
      tags:
        - ContactInfos
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The additional contact information was updated
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The additional contact information to be edited
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInfoEdit'
    delete:
      operationId: deleteContactInfo
      summary: >-
        Removes an existing additional contact information
      description: >-
        Removes an existing additional contact information
      tags:
        - ContactInfos
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The additional contact information was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contact-infos/{id}/password-for-remove:
    get:
      operationId: getPasswordInputForRemoveContactInfo
      summary: >-
        Returns a confirmation `PasswordInput` for removing an additional contact
        information, if any.
      description: >-
        If a confirmation password is required to remove an additional contact
        infomation, clients should invoke this operation prior to effectively
        removing it, which will return the data regarding the confirmation
        password.
      tags:
        - ContactInfos
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The confirmation password input, or null
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordInput'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/status:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
    get:
      operationId: getUserStatus
      summary: >-
        Returns the current user status and the status history
      description: >-
        Returns data containing information regarding the user status
      tags:
        - UserStatus
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The user status data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatusData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: changeUserStatus
      summary: >-
        Sets the new user status
      description: >-
        Sets the new user status. Managers have permissions to which statuses
        are allowed. Some statuses are transient (
        `active`, `blocked` and
        `disabled`) while others are terminal
        (`removed` and `purged`).
        The `pending` status can never be managed by this
        operation, but by validating the user registration.
      tags:
        - UserStatus
      requestBody:
        description: >-
          The parameters for changing the status
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserStatusParams'
      responses:
        '204':
          description: >-
            If the update is finished, nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/group:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
    get:
      operationId: getGroupMembershipData
      summary: >-
        Returns the current user / operator group and the change history
      description: >-
        Returns data containing information regarding the user / operator
        group membership
      tags:
        - GroupMembership
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The user / operator group membership data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: changeGroupMembership
      summary: >-
        Changes the user / operator group
      description: >-
        Sets the new user / operator group. Depending on the new group, new
        permissions are granted / revoked to / from the user / operator.
      tags:
        - GroupMembership
      requestBody:
        description: >-
          The parameters for changing the group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeGroupMembershipParams'
      responses:
        '204':
          description: >-
            If the update is finished, nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/products:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
    get:
      operationId: getUserProductsData
      summary: >-
        Returns the user individual products and the change history
      description: >-
        Returns data containing information regarding the products assigned
        to the given user
      tags:
        - ProductAssignment
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The user individual products data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProductAssignmentData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/products/{product}:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
      - name: product
        in: path
        required: true
        schema:
          type: string
        description: Product internal name or identifier
    post:
      operationId: assignIndividualProduct
      summary: >-
        Assigns a product to an individual user.
      description: >-
        Assigns a product to an individual user.
      tags:
        - ProductAssignment
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The product is assigned and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: unassignIndividualProduct
      summary: >-
        Unassigns a product to an individual user.
      description: >-
        Unassigns a product to an individual user.
      tags:
        - ProductAssignment
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The product is unassigned and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/brokers:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
    get:
      operationId: getUserBrokersData
      summary: >-
        Returns the current broker(s), together with additional information
      description: >-
        Returns data containing information regarding the user broker(s)
      tags:
        - Brokering
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The user brokers list data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBrokersData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/brokers/data-for-add:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
    get:
      operationId: getBrokerDataForAdd
      summary: >-
        Returns configuration data to add another broker to a user.
      description: >-
        Returns configuration data to add another broker to a user.
      tags:
        - Brokering
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The user brokers list data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerDataForAdd'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/brokers/{broker}:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
      - name: broker
        in: path
        required: true
        description: The id or identifier of the broker
        schema:
          type: string
    get:
      operationId: viewBrokering
      summary: >-
        Returns details of the brokering relation for the given user and broker.
      description: >-
        Returns details of the brokering relation for the given user and broker.
      tags:
        - Brokering
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The brokering details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokeringView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: addBroker
      summary: >-
        Adds a brokering relation between the given user and broker.
      description: >-
        Adds a brokering relation between the given user and broker.
      tags:
        - Brokering
      parameters:
        - name: main
          in: query
          required: false
          description: >-
            Indicates whether this is the main broker. If this is the first
            broker of the user, it will be the main broker, regardless of this
            parameter.
          schema:
            type: boolean
      responses:
        '204':
          description: >-
            The brokering relationship is added and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: removeBroker
      summary: >-
        Removes a brokering relation between the given user and broker.
      description: >-
        Removes a brokering relation between the given user and broker.
      tags:
        - Brokering
      responses:
        '204':
          description: >-
            The brokering relationship is removed and nothing is returned.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/brokers/{broker}/set-main:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
      - name: broker
        in: path
        required: true
        description: The id or identifier of the broker
        schema:
          type: string
    post:
      operationId: setMainBroker
      summary: >-
        Sets a broker as the main broker of the user.
      description: >-
        Sets a broker as the main broker of the user.
      tags:
        - Brokering
      responses:
        '204':
          description: >-
            The broker is set as main and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /images/{idOrKey}:
    get:
      operationId: viewImage
      summary: >-
        Returns an image details by id or key
      description: >-
        Returns metadata about an image given its identifier or key
      tags:
        - Images
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: idOrKey
          in: path
          required: true
          description: >-
            The image id or file name
          x-dotInPath: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The image details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteImage
      summary: >-
        Removes an image by id or key
      description: >-
        Removes the image with the given internal id or key. Any image kind can be
        removed using this operation, but the authenticated user needs the
        appropriate permission to do so.
      tags:
        - Images
      parameters:
        - name: idOrKey
          in: path
          required: true
          description: >-
            The image id or file name
          x-dotInPath: true
          schema:
            type: string
      responses:
        '204':
          description: >-
            The image was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /images/content/{idOrKey}:
    get:
      operationId: getImageContent
      summary: >-
        Returns an image content by id or key
      description: >-
        Returns the content of an image, given the image identifier or key. When
        neither `width` nor `height` are specified, returns the original content.
        The original ratio is always maintained. When only of one of the
        dimensions is specified, it is used as maximum, and the other is
        calculated. When both are informed, the maximum size with the original
        ratio that fits both dimensions is used.
      tags:
        - Images
      parameters:
        - name: idOrKey
          in: path
          required: true
          description: >-
            The image id or file name
          x-dotInPath: true
          schema:
            type: string
        - name: width
          in: query
          required: false
          description: >-
            The requested image width
          schema:
            type: integer
        - name: height
          in: query
          required: false
          description: >-
            The requested file height
          schema:
            type: integer
      responses:
        '200':
          description: >-
            The image content
          content:
            'image/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/images/list-data:
    get:
      operationId: getUserImagesListData
      summary: >-
        Returns either `profile` or
        `custom` images for a given user, plus additional
        permissions and data
      description: >-
        Returns either `profile` or
        `custom` images for the given user. For
        `profile`, the user must be visible by the
        authenticated user. For `custom`, the authenticated
        user must either be the owner or a manager (administrator or broker).
        Custom images are used in rich text content, not images for custom fields.
        Additional data, such as the maximum images and whether the images can be
        managed by the authenticated user are also returned.
      tags:
        - Images
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: kind
          in: query
          required: false
          description: >-
            The kind of images to be returned. The default value is
            `profile`
          schema:
            $ref: '#/components/schemas/UserImageKind'
      responses:
        '200':
          description: >-
            The images and additional information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/images:
    get:
      operationId: listUserImages
      summary: >-
        Lists either `profile` or `custom`
        images for a given user.
      description: >-
        Returns either `profile` or
        `custom` images for the given user. For
        `profile`, the user must be visible by the
        authenticated user. Custom images are used in rich text content, not
        images for custom fields. For `custom`, the
        authenticated user must either be the owner or a manager (administrator or
        broker).
      tags:
        - Images
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: kind
          in: query
          required: false
          description: >-
            The kind of images to be returned. The default value is
            `profile`
          schema:
            $ref: '#/components/schemas/UserImageKind'
      responses:
        '200':
          description: >-
            The list of images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: uploadUserImage
      summary: >-
        Adds a new image for the given user. The image kind is
        either  `profile` or `custom`.
      description: >-
        Uploads a new image, either `profile` (by default) or
        `custom`, for the given user. Custom images are used
        in rich text content, not images for custom fields. For uploading images
        for custom field values, see the documentation for the operation at `POST
        /images/temp`.
      tags:
        - Images
      parameters:
        - $ref: '#/components/parameters/user'
        - name: kind
          in: query
          required: false
          description: >-
            The kind of images to be returned. The default value is
            `profile`
          schema:
            $ref: '#/components/schemas/UserImageKind'
        - name: name
          description: >-
            The name for the new image. If not informed will fall back to the
            original file name in the form data
          in: query
          required: false
          schema:
            type: string
      responses:
        '201':
          description: >-
            The image is saved, its id is returned in the body and the URL to get
            the content is returned in the `Location` header
          headers:
            Location:
              description: >-
                URL for obtaining the image content
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: >-
                    The image being uploaded

  /{user}/images/order:
    put:
      operationId: reorderProfileImages
      summary: >-
        Changes the order of a user's profile images
      description: >-
        The new order is defined by the list of ids, so that images appear in the
        same order as the ids.
      tags:
        - Images
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/user'
        - name: ids
          description: >-
            The array of ids (comma-separated) reflecting the desired order
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '204':
          description: >-
            The image order is changed and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /images/temp:
    get:
      operationId: listTempImages
      summary: >-
        Lists temporary images related to the currently authenticated user or
        guest
      description: >-
        Returns all uploaded temporary images by the current user, or guest key.
        If the current request is as guest and no guest key is given, the IP
        address is used to match images. Using a key is recommended, because
        clients that move between WiFi and mobile connection or if the client is
        in a network with multiple outbound IP addresses, images won't be
        correctly matched without a key.
      tags:
        - Images
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: target
          in: query
          description: >-
            Filter by target usage
          schema:
            $ref: '#/components/schemas/TempImageTargetEnum'
        - name: guestKey
          in: query
          required: false
          description: >-
            This parameter is only taken into account if the current request is
            running as guest. It is the key passed by the client when uploading
            images. If no key is given, images are matched by remote address.
          schema:
            type: string
        - name: user
          in: query
          required: false
          description: >-
            If the target is `userProfile` or
            `advertisement`, must be either the id or an
            identification method of the target user (or advertisement owner).
          schema:
            type: string
        - name: customField
          in: query
          required: false
          description: >-
            If the temp image will be used as the value of a custom field of type
            image then the corresponding custom field must be given (id or
            internal name). Otherwise this paremeter will be ignored.
          schema:
            type: string
        - name: customFieldKind
          in: query
          required: false
          description: >-
            If a custom field is given then its kind must be given too to allow
            find it.
          schema:
            $ref: '#/components/schemas/CustomFieldKind'
      responses:
        '200':
          description: >-
            The list of images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: uploadTempImage
      summary: >-
        Adds a new temporary image for the currently authenticated user or guest.
      description: >-
        Uploads a new temporary image. A temporary image should be given a target,
        which can be: - `userRegistration`: The
        image will be used as a profile image for a newly registered user; -
        `userProfile`: The image will be used as a
        profile image for an existing user; -
        `advertisement`: The image will be used for
        an advertisement of a specific user; -
        `customValue`: The image will be used for a
        value of a specific custom field. Temporary images won't be immediately
        associated to the next registered model, but its `id`, which is returned
        by this operation, must be explicitly passed in, either as the `images`
        field (for profile or advertisement images) or in the `customValues` field
        of the model that has custom values (multiple ids can be passed-in as
        pipe-separated). Images as guest can only be uploaded if on the
        destination group products the image profile field is allowed at
        registrations. Users may upload images if they can register new users or
        create advertisements.
      tags:
        - Images
      parameters:
        - name: name
          description: >-
            The name for the new image. If not informed will fall back to the
            original file name in the form data
          in: query
          required: false
          schema:
            type: string
        - name: target
          in: query
          description: >-
            The target usage for this temporary image
          schema:
            $ref: '#/components/schemas/TempImageTargetEnum'
        - name: guestKey
          in: query
          required: false
          description: >-
            This parameter is only taken into account if the current request is
            running as guest. It should be a reasonably unique key (for example,
            an UUID, device identifier or a reasonably large random string) which
            uniquely identifies the uploaded image as belonging to this "session".
            If no key is given, images uploaded as guest are matched by IP
            address. Using a key is recommended, because clients that move between
            WiFi and mobile connection or if the client is in a network with
            multiple outbound IP addresses, images won't be correctly matched
            without a key.
          schema:
            type: string
        - name: user
          in: query
          required: false
          description: >-
            If the target is `userProfile` or
            `advertisement`, must be either the id or an
            identification method of the target user (or advertisement owner).
          schema:
            type: string
        - name: customField
          in: query
          required: false
          description: >-
            If the temp image will be used as the value of a custom field of type
            image then the corresponding custom field must be given (id or
            internal name). Otherwise this paremeter will be ignored.
          schema:
            type: string
        - name: customFieldKind
          in: query
          required: false
          description: >-
            If a custom field is given then its kind must be given too to allow
            find it.
          schema:
            $ref: '#/components/schemas/CustomFieldKind'
      responses:
        '201':
          description: >-
            The image is saved, its id is returned in the body and the URL to get
            the content is returned in the `Location` header
          headers:
            Location:
              description: >-
                URL for obtaining the image content
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: >-
                    The image being uploaded

  /marketplace/{ad}/images/list-data:
    get:
      operationId: getAdImagesListData
      summary: >-
        Returns the images of an advertisement, plus additional permissions and
        data.
      description: >-
        Returns the images of an advertisement. Additional data, such as the
        maximum images and whether the images can be managed by the authenticated
        user are also returned.
      tags:
        - Images
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/ad'
      responses:
        '200':
          description: >-
            The images and additional information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/{ad}/images:
    get:
      operationId: listAdImages
      summary: >-
        Lists the images of an advertisement
      description: >-
        Returns the images of an advertisement.
      tags:
        - Images
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/ad'
      responses:
        '200':
          description: >-
            The list of images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: uploadAdImage
      summary: >-
        Adds a new image for the given advertisement.
      description: >-
        Uploads a new image for the given advertisement.
      tags:
        - Images
      parameters:
        - $ref: '#/components/parameters/ad'
        - name: name
          description: >-
            The name for the new image. If not informed will fall back to the
            original file name in the form data
          in: query
          required: false
          schema:
            type: string
      responses:
        '201':
          description: >-
            The image is saved, its id is returned in the body and the URL to get
            the content is returned in the `Location` header
          headers:
            Location:
              description: >-
                URL for obtaining the image content
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: >-
                    The image being uploaded
  /marketplace/{ad}/images/order:
    put:
      operationId: reorderAdImages
      summary: >-
        Changes the order of the images of an advertisement.
      description: >-
        The new order is defined by the list of ids, so that images appear in the
        same order as the ids.
      tags:
        - Images
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/ad'
        - name: ids
          description: >-
            The array of ids (comma-separated) reflecting the desired order
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '204':
          description: >-
            The image order is changed and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /contact-infos/{id}/image:
    post:
      operationId: uploadContactInfoImage
      summary: >-
        Uploads a new image for the given additional contact information.
      description: >-
        Saves the given image for the additional contact information. If the given
        additional contact information already has an image, the old one is
        removed, and the current image is saved in its place.
      tags:
        - Images
      parameters:
        - $ref: '#/components/parameters/id'
        - name: name
          description: >-
            The name for the new image. If not informed will fall back to the
            original file name in the form data
          in: query
          required: false
          schema:
            type: string
      responses:
        '201':
          description: >-
            The image is saved, its id is returned in the body and the URL to get
            the content is returned in the `Location` header
          headers:
            Location:
              description: >-
                URL for obtaining the image content
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: >-
                    The image being uploaded
  /files/{id}/content:
    get:
      operationId: getRawFileContent
      summary: >-
        Returns the content of a raw file (temp or custom field value)
      description: >-
        Returns the content of either a temporary or a custom field value file
      tags:
        - Files
      parameters:
        - name: id
          in: path
          required: true
          description: >-
            The file identifier
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/{id}:
    get:
      operationId: viewRawFile
      summary: >-
        Returns a file details by id
      description: >-
        Returns metadata about a file given its id
      tags:
        - Files
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The file details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoredFile'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteRawFile
      summary: >-
        Removes a file by id
      description: >-
        Removes the file with id
      tags:
        - Files
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The file was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/temp:
    get:
      operationId: listTempFiles
      summary: >-
        Lists temporary files related to the currently authenticated user or guest
      description: >-
        Returns all uploaded temporary files by the current user, or guest key. If
        the current request is as guest and no guest key is given, the IP  address
        is used to match files. Using a key is recommended, because clients that
        move between WiFi and mobile connection or if the client is in a network
        with multiple outbound IP addresses, files won't be correctly matched
        without a key.
      tags:
        - Files
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: guestKey
          in: query
          required: false
          description: >-
            This parameter is only taken into account if the current request is
            running as guest. It is the key passed by the client when uploading
            files. If no key is given, files are matched by remote address.
          schema:
            type: string
        - name: customField
          in: query
          required: false
          description: >-
            If the temp file will be used as the value of a custom field of type
            file then the corresponding custom field must be given (id or internal
            name). Otherwise this paremeter will be ignored.
          schema:
            type: string
        - name: customFieldKind
          in: query
          required: false
          description: >-
            If a custom field is given then its kind must be given too to allow
            find it.
          schema:
            $ref: '#/components/schemas/CustomFieldKind'
      responses:
        '200':
          description: >-
            The list of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoredFile'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: uploadTempFile
      summary: >-
        Adds a new temporary file for the currently authenticated user or guest.
      description: >-
        Uploads a new temporary file. The returned id can later be used as value
        of a custom field of type file.
      tags:
        - Files
      parameters:
        - name: name
          description: >-
            The name for the new file. If not informed will fall back to the
            original file name in the form data
          in: query
          required: false
          schema:
            type: string
        - name: guestKey
          in: query
          required: false
          description: >-
            This parameter is only taken into account if the current request is
            running as guest. It should be a reasonably unique key (for example,
            an UUID, device identifier or a reasonably large random string) which
            uniquely identifies the uploaded file as belonging to this "session".
            If no key is given, files uploaded as guest are matched by IP address.
            Using a key is recommended, because clients that move between WiFi and
            mobile connection or if the client is in a network with multiple
            outbound IP addresses, files won't be correctly matched without a key.
          schema:
            type: string
        - name: customField
          in: query
          required: false
          description: >-
            If the temp file will be used as the value of a custom field of type
            file then the corresponding custom field must be given (id or internal
            name). Otherwise this paremeter will be ignored.
          schema:
            type: string
        - name: customFieldKind
          in: query
          required: false
          description: >-
            If a custom field is given then its kind must be given too to allow
            find it.
          schema:
            $ref: '#/components/schemas/CustomFieldKind'
      responses:
        '201':
          description: >-
            The file is saved, its id is returned in the body and the URL to get
            the content is returned in the `Location` header
          headers:
            Location:
              description: >-
                URL for obtaining the file content
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: >-
                    The file being uploaded
  /documents/data-for-search:
    get:
      operationId: getDocumentsDataForSearch
      summary: >-
        Returns configuration data for searching documents.
      description: >-
        Returns configuration data for searching documents.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The configuration data for documents search.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents:
    get:
      operationId: searchDocuments
      summary: >-
        General documents search
      description: >-
        Searches for documents, which might be both shared and individual documents
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: brokers
          in: query
          required: false
          description: "Either the ids or identification methods of individual document owners' brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: categories
          in: query
          required: false
          description: "The shared document categories"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: enabled
          in: query
          required: false
          description: "Only used if the logged user can manage documents. When set, filters documents by their `enabled` status, either `true` or `false`."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Either the ids or internal names of individual document owners' group"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: keywords
          in: query
          required: false
          description: "Used to filter documents containing that keywords in the the name or description (case insensitive)"
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: range
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/DocumentRangeEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: user
          in: query
          required: false
          description: "Either the id or identifier of the document owner"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The list of devices the user has.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createSharedDocument
      summary: >-
        Creates a new static shared document.
      description: >-
        Creates a new static shared document.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '201':
          description: >-
            Returns the identifier of the new document
          headers:
            Location:
              description: >-
                URL for viewing the document details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The document to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentNew'

  /documents/data-for-new:
    get:
      operationId: getSharedDocumentDataForNew
      summary: >-
        Returns data to create a new shared static document
      description: >-
        Returns configuration data for creating a new document
        of kind `static`.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for creating a document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: viewDocument
      summary: >-
        Returns details of a specific document.
      description: >-
        Returns details of a specific document.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateDocument
      summary: >-
        Updates the details of a document.
      description: >-
        Updates the details of a document.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The document was updated
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The document to be edited
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentEdit'
    delete:
      operationId: deleteDocument
      summary: >-
        Removes a document.
      description: >-
        Removes a document.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The document was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents/{id}/data-for-edit:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: getDocumentDataForEdit
      summary: >-
        Returns data to edit an existing document
      description: >-
        Returns configuration data for editing a document, plus the current
        `DocumentEdit` object that can be altered and sent back
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for editing a document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents/{id}/file:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: downloadDocumentFile
      summary: >-
        Returns the content of the document file.
      description: >-
        The document `kind` must be either `static` or
        `user`. Otherwise a 404 status is returned.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The document file
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: uploadDocumentFile
      summary: >-
        Saves the content of the document file.
      description: >-
        The document `kind` must be either `static` or
        `user`. Otherwise a 404 status is returned.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: name
          description: >-
            The name for the new file. If not informed will fall back to the
            original file name in the form data
          in: query
          required: false
          schema:
            type: string
      responses:
        '204':
          description: >-
            The file is saved, and nothing is returned.
            The URL to get the content is returned in the `Location` header.
          headers:
            Location:
              description: >-
                URL for obtaining the file content
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: >-
                    The file being uploaded

  /documents/{id}/dynamic/{user}:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/user'
    get:
      operationId: getDataForDynamicDocument
      summary: >-
        Returns data to process a dynamic document
      description: >-
        Returns the fields that can be used to process a dynamic document
        for the given user.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for processing a dynamic a document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForDynamicDocument'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: processDynamicDocument
      summary: >-
        Processes a dynamic document
      description: >-
        Generates the HTML content which is the result of processing
        a dynamic document
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The dynamic document content
          content:
            text/html:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The form fields
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessDynamicDocument'

  /{user}/documents:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: listUserDocuments
      summary: >-
        Lists the enabled documents for the given user
      description: >-
        Lists the enabled documents for the given user
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The list of documents for the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createUserDocument
      summary: >-
        Creates a new individual document for the given user.
      description: >-
        Creates a new individual document for the given user.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '201':
          description: >-
            Returns the identifier of the new document
          headers:
            Location:
              description: >-
                URL for viewing the document details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The document to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentNew'

  /{user}/documents/data-for-new:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getUserDocumentDataForNew
      summary: >-
        Returns data to create a new shared individual document
      description: >-
        Returns configuration data for creating a new document
        of kind `user` for the given user.
      tags:
        - Documents
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for creating a document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/contacts:
    get:
      operationId: searchContacts
      summary: >-
        Search users which are contacts of a specific user
      description: >-
        Returns a page of users that are contacts of the given user. This path
        works as such for backwards compatibility reason. In general, seaching the
        contact list of a user should use the `GET /{user}/contact-list` operation
        instead. That way contact custom fields will be properly handled. However
        the `GET /{user}/contacts` operation is kept for simple cases where only
        the contact users, not the contact relation are desired. The fields
        returned depend on the products, in the profile fields of other users
        setting. Only fields (both basic or custom) marked to be returned on user
        list are returned. If no fields are set to be returned, the resulting
        objects will have the `display` and `shortDisplay` filled in. However,
        those fields are not returned when another profile field is returned,
        preventing duplicated data to be returned.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: ignoreProfileFieldsInList
          in: query
          required: false
          description: "When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display` and `shortDisplay`."
          schema:
            type: boolean
        - name: includeGroup
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users."
          schema:
            type: boolean
        - name: includeGroupSet
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users."
          schema:
            type: boolean
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
      tags:
        - Contacts
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The users in the contact list which match the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/contact-list:
    get:
      operationId: searchContactList
      summary: >-
        Searches the contact list of a given user
      description: >-
        Returns a page of contacts, which have the contacted user and custom field
        values for custom fields set to be returned on the list. This operation is
        preferred over `GET /{user}/contacts` because it returns contact custom
        fields, while `GET /{user}/contacts` returns users which are contacts,
        with the profile fields configured to be returned in a regular users
        search.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: customFields
          in: query
          required: false
          description: "Concat custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customValues=extraDate:|2001-12-31`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ContactOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
      tags:
        - Contacts
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The contacts of the given owner that match the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createContact
      summary: >-
        Creates a new contact
      description: >-
        Creates a new contact for the given owner. The contact user needs to be
        set in the request body, as well as contact custom fields, if any.
      parameters:
        - $ref: '#/components/parameters/user'
      tags:
        - Contacts
      responses:
        '201':
          description: >-
            Returns the identifier of the new contact
          headers:
            Location:
              description: >-
                URL for viewing the contact details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The contact to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactNew'

  /{user}/contact-list/data-for-search:
    get:
      operationId: getContactListDataForSearch
      summary: >-
        Returns configuration data used when searching for contacts
      description: >-
        Returns data for searching a user's contact list, such as the contact
        custom fields which are set for being used as search filters.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      tags:
        - Contacts
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The data for searching the contact list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactListDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/contact-list/data-for-new:
    get:
      operationId: getContactListDataForNew
      summary: >-
        Returns configuration data for creating a new contact
      description: >-
        Returns data, such as a given contact user details and contact custom
        fields, for creating a new contact. The contact user is optional. If
        informed, the result will contain additional details about that user.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: contactUser
          required: false
          in: query
          description: >-
            The (optional) user to which will be the contact
          schema:
            type: string
      tags:
        - Contacts
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The data for creating a new contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contact-list/{id}/data-for-edit:
    get:
      operationId: getContactDataForEdit
      summary: >-
        Returns data to edit an existing contact
      description: >-
        Returns configuration data for editing a contact, plus the current
        `ContactEdit` object that can be altered and sent back
      tags:
        - Contacts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The data for editing a contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contact-list/{id}:
    get:
      operationId: viewContact
      summary: >-
        Returns details of a specific contact
      description: >-
        Returns information about a contact, located by id
      tags:
        - Contacts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The contact data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateContact
      summary: >-
        Updates an existing contact
      description: >-
        Updates an existing contact
      tags:
        - Contacts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The contact was updated
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The contact to be edited
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactEdit'
    delete:
      operationId: deleteContact
      summary: >-
        Removes a contact
      description: >-
        Removes a contact
      tags:
        - Contacts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The contact was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /agreements/pending:
    get:
      operationId: listPendingAgreements
      summary: >-
        Returns the agreements the authenticated user needs to accept in order to
        use the system
      description: >-
        Returns a list with all agreements the authenticated user is pending to
        accept. Until accepting the pending agreements, the usage of the system is
        limited.
      tags:
        - Agreements
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The list of agreements, or empty if there are no pending agreements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agreement'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /agreements/accept:
    post:
      operationId: acceptPendingAgreement
      summary: >-
        Accept one or more agreements
      description: >-
        Accept all the given agreements
      tags:
        - Agreements
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: agreements
          in: query
          description: >-
            The identifiers or internal names of the agreements to be accepted
          schema:
            type: array
            items:
              type: string
      responses:
        '204':
          description: >-
            The agreements were accepted
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/passwords/{type}:
    get:
      operationId: getUserPasswordsData
      summary: >-
        Returns complete data of the given password the given user have.
      description: >-
        Returns the password status and the permissions on which operations are
        enabled for a given user.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
      responses:
        '200':
          description: >-
            The password details and permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordStatusAndActions'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/passwords/list-data:
    get:
      operationId: getUserPasswordsListData
      summary: >-
        Returns complete data for each passwords the given user have.
      description: >-
        Returns the passwords, with their statuses, for a given user. Also,
        permissions on which operations are enabled are also returned. It is
        also returned additional data - the confirmation password input, in
        case some action is needed; and the security question data, in case
        the security answer is pending.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The list of password statuses and permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForUserPasswords'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/passwords:
    get:
      operationId: listUserPasswords
      summary: >-
        Returns the status for each passwords the given user have.
      description: >-
        Returns the passwords, with their statuses, for a given user.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The list of password statuses and permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PasswordStatusAndType'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/passwords/{type}/change:
    post:
      operationId: changePassword
      summary: >-
        Changes a manual password
      description: >-
        Changes a manual password of the given user. When the user is changing his
        own password he needs to pass in the `oldPassword` as well. When an
        adminitrator / broker is changing the password of a managed user, he/she
        can optionally force the password change on next login.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/user'
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
      responses:
        '204':
          description: >-
            The password is changed, and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for password change
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'

  /passwords/{type}/change-generated:
    post:
      operationId: changeGenerated
      summary: >-
        Generates a new value for an active generated password.
      description: >-
        Generates a new password whose type's `mode`
        is  `generated`.
         Only the password owner can perform this operation and the password
         status must be `active`.
      tags:
        - Passwords
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
      responses:
        '200':
          description: >-
            The plain value of the generated password. This is the only time this
            plain value is ever returned.
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /passwords/{type}/generate:
    post:
      operationId: generatePassword
      summary: >-
        Generates the value of a generated password for the first time or if
        expired.
      description: >-
        Generates the value of a password whose type's `mode` is
        `generated`. Only the password owner can perform
        this operation, and only in one of these conditions:


        - If the password `status` is `neverCreated` it
          can only be generated if the password doesn't require the administrator
          authorization to generate. This can be configured in the password type.

        - The password can be generated if its `status` is one of the
          following: `pending`,
          `expired` or `reset`.
      tags:
        - Passwords
      parameters:
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
      responses:
        '200':
          description: >-
            The plain value of the generated password. This is the only time this
            plain value is ever returned.
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/passwords/{type}/allow-generation:
    post:
      operationId: allowGeneration
      summary: >-
        Allows the given user to generate the password for the first time for the
        given type.
      description: >-
        Only valid if type's mode is `generated`,
        it's  marked as requiring administrator authorization and the password
        status is `neverCreated`.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/userNoSelf'
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
      responses:
        '204':
          description: >-
            The password is pending and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/passwords/{type}/reset-generated:
    post:
      operationId: resetGeneratedPassword
      summary: >-
        Resets a generated password, allowing it to be generated again
      description: >-
        Resets a generated password. This can only be done by administrators /
        brokers over managed users, and allow them to generate the password value
        again.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/userNoSelf'
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
      responses:
        '204':
          description: >-
            The password is reset, and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/passwords/{type}/reset-and-send:
    post:
      operationId: resetAndSendPassword
      summary: >-
        Generates a new value for a manual password and send it to the user via
        e-mail
      description: >-
        Resets a manual password to a generated value and send it to the user.
          Can also be used to reset and send the main channel's access password if
          it is generated. The new password is initially expired, so the user
        needs
          to change it on first login.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/userNoSelf'
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
        - name: sendMediums
          in: query
          required: false
          description: >-
            The send mediums for which the password will be send. If nothing is
            specified will send though all available mediums.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SendMediumEnum'
      responses:
        '204':
          description: >-
            The password is reset and sent, and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/passwords/{type}/disable:
    post:
      operationId: disablePassword
      summary: >-
        Disables a password, making it unusable until manually re-enabled
      description: >-
        Disables a password. It cannot be used again until enabled again.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/user'
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
      responses:
        '204':
          description: >-
            The password is disabled, and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/passwords/{type}/enable:
    post:
      operationId: enablePassword
      summary: >-
        Re-enables a disabled a password
      description: >-
        Re-enables a password that was previously disabled.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/user'
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
      responses:
        '204':
          description: >-
            The password is re-enabled, and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/passwords/{type}/unblock:
    post:
      operationId: unblockPassword
      summary: >-
        Unblocks a password that has been blocked by exceeding the wrong tries
      description: >-
        The password is unblocked if its status is
        either  `temporarilyBlocked` or
        `indefinitelyBlocked`.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/user'
        - name: type
          in: path
          required: true
          description: >-
            Either the id or internal name of the password type
          schema:
            type: string
      responses:
        '204':
          description: >-
            The password is unblocked, and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /security-answer:
    post:
      operationId: setSecurityAnswer
      summary: >-
        Sets the security answer if the current authenticated user
      description: >-
        The security question can be enabled in the configuration, and is used
        on the forgot password process. This method only works if the security
        answer is pending and enabled. If the user wants to change the security
        answer, first an admin must remove the current answer via
        `DELETE /{user}/security-answer`.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetSecurityAnswer'
      responses:
        '204':
          description: >-
            The security answer is set and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/security-answer:
    delete:
      operationId: resetUserSecurityAnswer
      summary: >-
        Resets a user security answer, allowing they to change it
      description: >-
        This operation must be performed as a manager of the user. It resets
        the current security answer, allowing the user to set a new one.
      tags:
        - Passwords
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/userNoSelf'
      responses:
        '204':
          description: >-
            The security answer is reset and nothing is returned.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/devices:
    get:
      operationId: listDevices
      summary: >-
        Returns the list of trusted devices for a user.
      description: >-
        The returned list includes those pending by activation and the already
        active devices the given user has. Only allowed if the authenticated user
        is the same as the user parameter or is an administrator / broker with
        permissions.
      tags:
        - Devices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The list of devices the user has.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /devices/data-for-send:
    get:
      operationId: getDeviceDataForSend
      summary: >-
        Returns data for send / resend an activation code.
      description: >-
        Returns data required to send or resend the activation code for the
        authenticated user.
      tags:
        - Devices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            Return the data for send a confirmation code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDataForSend'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /devices/send-activation-code:
    post:
      operationId: sendDeviceActivationCode
      summary: >-
        Sends a new device activation code.
      description: >-
        Creates a new pending-by-activation device for the authenticated user and
        sends the activation code through a given medium.
      tags:
        - Devices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters: []
      responses:
        '200':
          description: >-
            The code was sent to the user. The resultant device name and the
            e-mail or the normalized mobile phone number that received the code is
            returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendActivationCodeResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            There was an error when sending the activation code. Only if medium is
            `sms`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpError'
      requestBody:
        description: >-
          The parameters for requesting a device activation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendActivationCodeRequest'

  /devices/{id}/resend-activation-code:
    post:
      operationId: resendDeviceActivationCode
      summary: >-
        Resends the activation code for the given pending device.
      description: >-
        Resends the same activation code for the pending device for the
        authenticated user through a given medium.
      tags:
        - Devices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The code was resent to the user. The resultant device name and the
            e-mail or the normalized mobile phone number that received the code is
            returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendActivationCodeResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            There was an error when sending the activation code. Only if medium is
            `sms`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpError'
      requestBody:
        description: >-
          The parameters for resending a device activation code.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendActivationCodeRequest'

  /devices/activate:
    post:
      operationId: deviceActivation
      summary: >-
        Activates a device by code.
      description: >-
        Activates a trusted device by code for the authenticated user.
      tags:
        - Devices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: code
          description: >-
            The device activation code.
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            Successful activation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceActivationResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /devices/{id}/data-for-edit:
    get:
      operationId: getDeviceDataForEdit
      summary: >-
        Returns data to edit an existing device.
      description: >-
        Returns configuration data for editing a device, plus the current
        `DeviceEdit` object that can be altered and sent back.
      tags:
        - Devices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The data for editing a device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /devices/{id}:
    put:
      operationId: updateDevice
      summary: >-
        Updates a device.
      description: >-
        Updates a device. The device's owner and administrators / brokers with
        permissions can update a device. In case a PIN was already defined for the device then it's name will be
        updated too.
      tags:
        - Devices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The device was updated.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for saving a device.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceEdit'
    delete:
      operationId: deleteDevice
      summary: >-
        Removes a device.
      description: >-
        Removes a device. The device's owner and administrators / brokers with
        permissions can remove a device.
      tags:
        - Devices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The device was removed.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /device-confirmations/data-for-approval:
    get:
      operationId: dataForDeviceConfirmationApproval
      summary: >-
        Return data for approve / reject device confirmations.
      description: >-
        Can be invoked by guests to know if authentication is required for approve / reject pending
        device confirmations.
      tags:
        - DeviceConfirmations
      parameters: []
      responses:
        '200':
          description: >-
            The data for approval.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForDeviceConfirmationApproval'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /device-confirmations:
    post:
      operationId: createDeviceConfirmation
      summary: >-
        Creates a pending device confirmation for the authenticated user.
      description: >-
        Creates a device confirmation for an operation that must be confirmed. The
        confirmation will have a QR code that can be read (e.g with the Mobile
        App) to be approved / rejected by the device owner.
      tags:
        - DeviceConfirmations
      parameters: []
      responses:
        '201':
          description: >-
            Returns the identifier of the new confirmation.
          headers:
            Location:
              description: >-
                URL for viewing the confirmation details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for creating the confirmation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceConfirmation'

  /device-confirmations/{id}:
    get:
      operationId: viewDeviceConfirmation
      summary: >-
        Shows the details of a device confirmation for the authenticated user.
      description: >-
        Shows the details of a device confirmation for the authenticated user.
      tags:
        - DeviceConfirmations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The device confirmation details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceConfirmationView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteDeviceConfirmation
      summary: >-
        Deletes a device confirmation for the authenticated user.
      description: >-
        Deletes a device confirmation for the authenticated user.
      tags:
        - DeviceConfirmations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The device confirmation was removed.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /device-confirmations/{id}/approve:
    post:
      operationId: approveDeviceConfirmation
      summary: >-
        Approves a pending device confirmation.
      description: >-
        Approves a pending confirmation with a device only if not already approved
        / rejected. This operation can be executed as guest or as a logged user,
        if guest, the final user used to approve will be the device owner. For
        successful approval, the user who creates the confirmation (for a pending
        operation in other channel) must be the same as the user who owns the
        device. Moreover, to ensure the user is approving the same operation he
        previously requested, a HMAC-SHA256 must be calculated for the QR code
        using a secret key only valid for the device being used to confirm.
        Finally, when the operation requiring confirmation is executed, Cyclos
        will recalculate the QR code from the operation actual parameters and it
        must match the QR of the confirmation.
      tags:
        - DeviceConfirmations
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The confirmation was approved.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for approving the confirmation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceConfirmationActionParams'

  /device-confirmations/{id}/reject:
    post:
      operationId: rejectDeviceConfirmation
      summary: >-
        Rejects a pending device confirmation.
      description: >-
        Rejects a confirmation with a device only if not already approved /
        rejected. This operation can be executed as guest or as a logged user, if
        guest, the final user used to reject will be the device owner. For
        successful rejection, the user who creates the confirmation (for a pending
        operation in other channel) must be the same as the user who owns the
        device. Moreover, to ensure the user is rejecting the same operation he
        previously requested, a HMAC-SHA256 must be calculated for the QR code
        using a secret key only valid for the device being used to reject.
      tags:
        - DeviceConfirmations
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The confirmation was rejected.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for approving the confirmation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceConfirmationActionParams'

  /device-confirmations/{id}/qr-code:
    get:
      operationId: getDeviceConfirmationQrCode
      summary: >-
        Returns the QR-code image for the given confirmation only if not already
        approved / rejected.
      description: >-
        Returns the QR-code image for the given confirmation only if not already
        approved / rejected. The QR content is a URL of the form:
        cyclos://confirmation?id=confirmation_id&description=i18n_confirmation_type&fields=Label1:Value1|Label2:Value2...
        This request will return the image contents as expected but our api
        documentation page  (or any other usage of an &lt;img&gt; tag), created
        using swagger-ui, generates a second request to include the  image in the
        page. This new (GET) request won't send the authentication parameters and
        as this path requires  authentication the image will be shown as broken.
        Optionally, to solve the problem described above and to allow authenticate
        the user when using sessions, a `sessionToken` or
        `accessClientToken`  query parameter could be specified.
      tags:
        - DeviceConfirmations
      parameters:
        - $ref: '#/components/parameters/id'
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ImageSizeEnum'
      responses:
        '200':
          description: >-
            The image content.
          content:
            image/png:
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/device-pins:
    get:
      operationId: listDevicePins
      summary: >-
        Returns the list of device PIN for a user.
      description: >-
        Returns the list of device PIN for a user. Only allowed if the authenticated user
        is the same as the user parameter or is an administrator / broker with permissions.
      tags:
        - DevicePins
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The list of device PIN the user has.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DevicePin'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /device-pins:
    post:
      operationId: setDevicePin
      summary: >-
        Creates a new PIN or modify the current existing one.
      description: >-
        Creates a new PIN for the authenticated user. If authenticating with a PIN then changes its value and returns nothing.
      tags:
        - DevicePins
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters: []
      responses:
        '200':
          description: >-
            The pin was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDevicePinResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for creating the PIN.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDevicePin'

  /device-pins/{key}/data-for-edit:
    get:
      operationId: getDevicePinDataForEdit
      summary: >-
        Returns data for edit an existing device PIN.
      description: >-
        Returns configuration data for editing a device PIN, plus the current
        `DevicePinEdit` object that can be altered and sent back.
      tags:
        - DevicePins
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          description: >-
            The principal or id of the device PIN.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for editing a device PIN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePinDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /device-pins/{key}:
    get:
      operationId: viewDevicePin
      summary: >-
        Returns details of a specific device PIN
      description: >-
        Returns information about a device PIN by key
      tags:
        - DevicePins
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          description: >-
            The principal or id of the device PIN.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The device PIN data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePinView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      operationId: updateDevicePin
      summary: >-
        Updates a device PIN.
      description: >-
        Updates a device PIN. The device's owner and administrators / brokers with
        permissions can update a device PIN. In case the device was already activated as trusted then it's name will be
        updated too.
      tags:
        - DevicePins
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: key
          description: >-
            The principal or id of the device PIN.
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: >-
            The device PIN was updated.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for saving a device PIN.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePinEdit'
    delete:
      operationId: deleteDevicePin
      summary: >-
        Removes a device PIN.
      description: >-
        Removes a device PIN. The device's owner and administrators / brokers with
        permissions can remove a device PIN.
      tags:
        - DevicePins
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: key
          description: >-
            The principal or id of the device PIN.
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: >-
            The device PIN was removed.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /{owner}/accounts:
    get:
      operationId: listAccountsByOwner
      summary: >-
        Lists accounts of the given owner with their statuses
      description: >-
        Lists all visible accounts of the given user, or system accounts if the
        owner 'system' is used. Each account has status information, like the
        current balance, avaliable balance and so on. However, the returned data
        depend on the configuration, in the `Account status indicators` option,
        which is used to limit the amount of data returned.
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
      responses:
        '200':
          description: >-
            The accounts with their statuses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountWithStatus'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/accounts/{accountType}:
    parameters:
      - $ref: '#/components/parameters/owner'
      - $ref: '#/components/parameters/accountType'
    get:
      operationId: getAccountStatusByOwnerAndType
      summary: >-
        Returns the status of an account by owner and type
      description: >-
        Returns the account status for a specific account. The account type may be
        either the identifier or internal name. The status will contain both
        instant status information, that is, the same fields as `AccountStatus`,
        plus status that depend on the input parameters, such as those defined in
        `AccountWithHistoryStatus`. The actual data inside the result depend on
        the configuration, in the `Account status indicators` option, which is
        used to limit the amount of data returned.
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: chargedBack
          in: query
          required: false
          description: "When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion."
          schema:
            type: boolean
        - name: customFields
          in: query
          required: false
          description: "Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,documentDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either `bronze` or `silver`, and whose `documentDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=documentDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: `customFields=dynamic:'business` or `customFields=dynamic:'business'`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: direction
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransferDirectionEnum'
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: "The kind of transfers to return"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferKinds
          in: query
          required: false
          description: "DEPRECATED: Use `kinds` instead"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountWithHistoryStatus'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/accounts/{accountType}/data-for-history:
    parameters:
      - $ref: '#/components/parameters/owner'
      - $ref: '#/components/parameters/accountType'
    get:
      operationId: getAccountHistoryDataByOwnerAndType
      summary: >-
        Returns data for searching an account history by owner and type
      description: >-
        Returns configuration data for searching entries in a specific account
        history, as well as status information for that account information.
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for searching account history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForAccountHistory'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/accounts/{accountType}/history:
    parameters:
      - $ref: '#/components/parameters/owner'
      - $ref: '#/components/parameters/accountType'
    get:
      operationId: searchAccountHistory
      summary: >-
        Search an account history
      description: >-
        Returns a page of account history entries for a specific account,
        according to the given criteria
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: chargedBack
          in: query
          required: false
          description: "When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion."
          schema:
            type: boolean
        - name: customFields
          in: query
          required: false
          description: "Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,documentDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either `bronze` or `silver`, and whose `documentDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=documentDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: `customFields=dynamic:'business` or `customFields=dynamic:'business'`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: direction
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransferDirectionEnum'
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: "The kind of transfers to return"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferKinds
          in: query
          required: false
          description: "DEPRECATED: Use `kinds` instead"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The account history entries matching the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountHistoryResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/accounts/{accountType}/export/{format}:
    parameters:
      - $ref: '#/components/parameters/owner'
      - $ref: '#/components/parameters/accountType'
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportAccountHistory
      summary: >-
        Exports the accounts history entries as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in
        `GET /{owner}/accounts/{accountType}/data-for-history`.
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: chargedBack
          in: query
          required: false
          description: "When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion."
          schema:
            type: boolean
        - name: customFields
          in: query
          required: false
          description: "Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=rank:bronze|silver,documentDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `rank` is either `bronze` or `silver`, and whose `documentDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=documentDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: `customFields=dynamic:'business` or `customFields=dynamic:'business'`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: direction
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransferDirectionEnum'
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: "The kind of transfers to return"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferKinds
          in: query
          required: false
          description: "DEPRECATED: Use `kinds` instead"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/accounts/{accountType}/balances-history:
    parameters:
      - $ref: '#/components/parameters/owner'
      - $ref: '#/components/parameters/accountType'
    get:
      operationId: getAccountBalanceHistory
      summary: >-
        Returns the account balances over time
      description: >-
        Receives a period and an interval, returning the balance over each
        corresponding date. The maximum number of data points is 60, so it is
        possible to get the balances per day over 2 months. For larger periods,
        use weeks or months. When no period is given, assumes the beginning of
        current year or the account creation date, whichever is newer. When no
        interval is given, one is assumed. Also returns status of the given
        account
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: datePeriod
          in: query
          required: false
          description: >-
            The minimum / maximum transfer date. Is expressed an array, with the
            lower bound as first element, and the upper bound as second element.
            When only one element, will have just the lower bound. To specify only
            the upper bound, prefix the value with a comma.
          schema:
            type: array
            items:
              type: string
              format: date-time
        - name: intervalUnit
          in: query
          required: false
          description: >-
            The time unit for the data point interval
          schema:
            $ref: '#/components/schemas/TimeFieldEnum'
        - name: intervalCount
          in: query
          required: false
          description: >-
            A data point every X units. For example, it is possible to request the
            balance every 3 days. Defaults to 1.
          schema:
            type: integer
      responses:
        '200':
          description: >-
            The account balances over each datapoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceHistoryResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/data-for-user-balances:
    get:
      operationId: getUserBalancesData
      summary: >-
        Returns data for searching users together with their balances
      description: >-
        Returns configuration data for searching users together with their
        balances. The account types are returned, and the account type needs to be
        passed in the other `user-balances` operations.
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for searching users with balances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForUserBalancesSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{accountType}/user-balances/summary:
    get:
      operationId: getUserBalancesSummary
      summary: >-
        Returns summarized information for the user balances search
      description: >-
        Returns summaries for each balance level (if ranges are defined in either
        account type or filter), as well as the total summary.
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: accountType
          in: path
          required: true
          description: "The account type"
          schema:
            type: string
        - name: activationPeriod
          in: query
          required: false
          description: "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: addressResult
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserAddressResultEnum'
        - name: balanceRange
          in: query
          required: false
          description: "The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: integer
              format: int32
        - name: brokers
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) for brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: groups
          in: query
          required: false
          description: "Either id or internal names of groups / group sets"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGroup
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users."
          schema:
            type: boolean
        - name: includeGroupSet
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users."
          schema:
            type: boolean
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: lastIncomingTransferPeriod
          in: query
          required: false
          description: "The minimum / maximum date of the last incoming transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: lastLoginPeriod
          in: query
          required: false
          description: "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: lastOutgoingTransferPeriod
          in: query
          required: false
          description: "The minimum / maximum date of the last outgoing transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: latitude
          in: query
          required: false
          description: "The reference latitude for distance searches"
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          required: false
          description: "The reference longitude for distance searches"
          schema:
            type: number
            format: double
        - name: mainBrokerOnly
          in: query
          required: false
          description: "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker."
          schema:
            type: boolean
        - name: maxDistance
          in: query
          required: false
          description: "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position."
          schema:
            type: number
            format: double
        - name: mediumBalanceRange
          in: query
          required: false
          description: "An array with 2 elements, describing the lower and upper medium balance bounds. If not specified, the range defined in the account type will be used. If that one is also not defined, there will be no definitions for balance levels. Both bounds need to be set as 2 element in the array, or it won't be considered."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: integer
              format: int32
        - name: negativeSincePeriod
          in: query
          required: false
          description: "The minimum / maximum negative-since date for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: usersToExclude
          in: query
          required: false
          description: "Indicated the users to be excluded from the result"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: usersToInclude
          in: query
          required: false
          description: "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
      responses:
        '200':
          description: >-
            The summary of user balances matching the parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersWithBalanceSummary'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{accountType}/user-balances:
    get:
      operationId: searchUsersWithBalances
      summary: >-
        Searches for users together with balance information
      description: >-
        Returns the users, together with their balances
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        # The account type is already defined in UsersWithBalanceQueryFilters
        - $ref: '#/components/parameters/fields'
        - name: accountType
          in: path
          required: true
          description: "The account type"
          schema:
            type: string
        - name: activationPeriod
          in: query
          required: false
          description: "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: addressResult
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserAddressResultEnum'
        - name: balanceRange
          in: query
          required: false
          description: "The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: integer
              format: int32
        - name: brokers
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) for brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: groups
          in: query
          required: false
          description: "Either id or internal names of groups / group sets"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGroup
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users."
          schema:
            type: boolean
        - name: includeGroupSet
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users."
          schema:
            type: boolean
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: lastIncomingTransferPeriod
          in: query
          required: false
          description: "The minimum / maximum date of the last incoming transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: lastLoginPeriod
          in: query
          required: false
          description: "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: lastOutgoingTransferPeriod
          in: query
          required: false
          description: "The minimum / maximum date of the last outgoing transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: latitude
          in: query
          required: false
          description: "The reference latitude for distance searches"
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          required: false
          description: "The reference longitude for distance searches"
          schema:
            type: number
            format: double
        - name: mainBrokerOnly
          in: query
          required: false
          description: "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker."
          schema:
            type: boolean
        - name: maxDistance
          in: query
          required: false
          description: "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position."
          schema:
            type: number
            format: double
        - name: mediumBalanceRange
          in: query
          required: false
          description: "An array with 2 elements, describing the lower and upper medium balance bounds. If not specified, the range defined in the account type will be used. If that one is also not defined, there will be no definitions for balance levels. Both bounds need to be set as 2 element in the array, or it won't be considered."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: integer
              format: int32
        - name: negativeSincePeriod
          in: query
          required: false
          description: "The minimum / maximum negative-since date for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UsersWithBalanceOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: usersToExclude
          in: query
          required: false
          description: "Indicated the users to be excluded from the result"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: usersToInclude
          in: query
          required: false
          description: "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
      responses:
        '200':
          description: >-
            The users together with their balances
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithBalanceResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{accountType}/user-balances/export/{format}:
    parameters:
      # The account type is already defined in UsersWithBalanceQueryFilters
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportUsersWithBalances
      summary: >-
        Exports the user listing together with their balances as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in
        `GET /accounts/data-for-user-balances`.
      tags:
        - Accounts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: accountType
          in: path
          required: true
          description: "The account type"
          schema:
            type: string
        - name: activationPeriod
          in: query
          required: false
          description: "The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: addressResult
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserAddressResultEnum'
        - name: balanceRange
          in: query
          required: false
          description: "The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: integer
              format: int32
        - name: brokers
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) for brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: groups
          in: query
          required: false
          description: "Either id or internal names of groups / group sets"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGroup
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user groups, will return the `group` property on users."
          schema:
            type: boolean
        - name: includeGroupSet
          in: query
          required: false
          description: "When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users."
          schema:
            type: boolean
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: lastIncomingTransferPeriod
          in: query
          required: false
          description: "The minimum / maximum date of the last incoming transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: lastLoginPeriod
          in: query
          required: false
          description: "The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: lastOutgoingTransferPeriod
          in: query
          required: false
          description: "The minimum / maximum date of the last outgoing transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: latitude
          in: query
          required: false
          description: "The reference latitude for distance searches"
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          required: false
          description: "The reference longitude for distance searches"
          schema:
            type: number
            format: double
        - name: mainBrokerOnly
          in: query
          required: false
          description: "When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker."
          schema:
            type: boolean
        - name: maxDistance
          in: query
          required: false
          description: "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position."
          schema:
            type: number
            format: double
        - name: mediumBalanceRange
          in: query
          required: false
          description: "An array with 2 elements, describing the lower and upper medium balance bounds. If not specified, the range defined in the account type will be used. If that one is also not defined, there will be no definitions for balance levels. Both bounds need to be set as 2 element in the array, or it won't be considered."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: integer
              format: int32
        - name: negativeSincePeriod
          in: query
          required: false
          description: "The minimum / maximum negative-since date for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UsersWithBalanceOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: usersToExclude
          in: query
          required: false
          description: "Indicated the users to be excluded from the result"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: usersToInclude
          in: query
          required: false
          description: "Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/accounts/data-for-limits:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getDataForUserBalanceLimits
      summary: >-
        Returns data regarding the limits of all accounts of a given user.
      description: >-
        Returns data regarding the limits of all accounts of a given user.
      tags:
        - BalanceLimits
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The user account limits data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccountBalanceLimitsListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/accounts/{accountType}/limits:
    parameters:
      - $ref: '#/components/parameters/user'
      - $ref: '#/components/parameters/accountType'
    get:
      operationId: getAccountBalanceLimits
      summary: >-
        Returns data for the limits of a given account
      description: >-
        Returns the data needed to edit the limits of the given account,
        plus the history of limit changes.
      tags:
        - BalanceLimits
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The account limit data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceLimitsData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: setAccountBalanceLimits
      summary: >-
        Sets the limits for a given user account.
      description: >-
        Saves the account limits. The lower limit may be customized or default,
        while the upper limit may also be set to unlimited.
      tags:
        - BalanceLimits
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The limits were changed and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The new account balance limits
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAccountBalanceLimits'

  /accounts/data-for-limits:
    get:
      operationId: getAccountBalanceLimitsData
      summary: >-
        Returns data for a general search of account balance limits.
      description: >-
        Returns data for a general search of account balance limits.
      tags:
        - BalanceLimits
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for searching account balances limits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForBalanceLimitsSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/limits:
    get:
      operationId: searchAccountBalanceLimits
      summary: >-
        Searches for account balance limits.
      description: >-
        Searches for account balance limits, according to the given filters.
      tags:
        - BalanceLimits
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: accountType
          in: query
          required: false
          description: "Either id or internal name of the account type"
          schema:
            type: string
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead. Will be removed in 4.14. Either the ids or identification methods of users' broker"
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Either the ids or identification methods of users' broker"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Either the id or identifier of the user that performed the change"
          schema:
            type: string
        - name: currency
          in: query
          required: false
          description: "Either id or internal name of the currency"
          schema:
            type: string
        - name: customLimit
          in: query
          required: false
          description: "When set, returns only accounts that have a custom (if true) or have default (false) lower limit."
          schema:
            type: boolean
        - name: customLimitRange
          in: query
          required: false
          description: "The minimum / maximum customized limit. Is only used when `customLimit` is set to true. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: customUpperLimit
          in: query
          required: false
          description: "When set, returns only accounts that have a custom (if true) or have default (false) upper limit."
          schema:
            type: boolean
        - name: customUpperLimitRange
          in: query
          required: false
          description: "The minimum / maximum customized upper limit. Is only used when `customUpperLimit` is set to true. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: groups
          in: query
          required: false
          description: "Either the ids or internal names of user group"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: kind
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/BalanceLimitKind'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: user
          in: query
          required: false
          description: "Either the id or identifier of the account owner"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for searching account balances limits
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GeneralAccountBalanceLimitsResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/limits/export/{format}:
    parameters:
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportAccountBalanceLimits
      summary: >-
        Exports the account balance limits results as file.
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /accounts/data-for-limits`.
      tags:
        - BalanceLimits
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: accountType
          in: query
          required: false
          description: "Either id or internal name of the account type"
          schema:
            type: string
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead. Will be removed in 4.14. Either the ids or identification methods of users' broker"
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Either the ids or identification methods of users' broker"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Either the id or identifier of the user that performed the change"
          schema:
            type: string
        - name: currency
          in: query
          required: false
          description: "Either id or internal name of the currency"
          schema:
            type: string
        - name: customLimit
          in: query
          required: false
          description: "When set, returns only accounts that have a custom (if true) or have default (false) lower limit."
          schema:
            type: boolean
        - name: customLimitRange
          in: query
          required: false
          description: "The minimum / maximum customized limit. Is only used when `customLimit` is set to true. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: customUpperLimit
          in: query
          required: false
          description: "When set, returns only accounts that have a custom (if true) or have default (false) upper limit."
          schema:
            type: boolean
        - name: customUpperLimitRange
          in: query
          required: false
          description: "The minimum / maximum customized upper limit. Is only used when `customUpperLimit` is set to true. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: groups
          in: query
          required: false
          description: "Either the ids or internal names of user group"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: kind
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/BalanceLimitKind'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: user
          in: query
          required: false
          description: "Either the id or identifier of the account owner"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transfers/data-for-search:
    get:
      operationId: getTransferDataForSearch
      summary: >-
        Returns configuration data for searching transfers over multiple accounts.
      description: >-
        Returns configuration data for searching transfers over multiple accounts.
      tags:
        - Transfers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transfers:
    get:
      operationId: searchTransfers
      summary: >-
        Searches for transfers over multiple accounts.
      description: >-
        Searches for transfers over multiple accounts. Only transfers which can
        really be seen are returned. So, admins can search over any visible
        member / system accounts. Brokers can search over their managed members
        or themselves, and regular members can only search own transfers.
      tags:
        - Transfers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: chargedBack
          in: query
          required: false
          description: "When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion."
          schema:
            type: boolean
        - name: currencies
          in: query
          required: false
          description: "Either ids or internal names of the currency"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: currency
          in: query
          required: false
          description: "DEPRECATED: Use `currencies` instead.

Either id or internal name of the currency"
          schema:
            type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromAccountType
          in: query
          required: false
          description: "DEPRECATED: Use `fromAccountTypes` instead.

Either ids or internal names of the origin account type"
          schema:
            type: string
        - name: fromAccountTypes
          in: query
          required: false
          description: "Either ids or internal names of the origin account type"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: "The kind of transfers to return"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: toAccountType
          in: query
          required: false
          description: "DEPRECATED: Use `toAccountTypes` instead.

Either ids or internal names of the destination account type"
          schema:
            type: string
        - name: toAccountTypes
          in: query
          required: false
          description: "Either ids or internal names of the destination account type"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferKinds
          in: query
          required: false
          description: "DEPRECATED: Use `kinds` instead"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The users together with their balances
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransferResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transfers/export/{format}:
    parameters:
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportTransfers
      summary: >-
        Exports the transfers search results as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /transfers/data-for-search`.
      tags:
        - Transfers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: chargedBack
          in: query
          required: false
          description: "When set to either `true` will only return transfers that were charged-back. When set to `false`, will only return transfers that were not charged-back. When left blank will not filter by this creterion."
          schema:
            type: boolean
        - name: currencies
          in: query
          required: false
          description: "Either ids or internal names of the currency"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: currency
          in: query
          required: false
          description: "DEPRECATED: Use `currencies` instead.

Either id or internal name of the currency"
          schema:
            type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromAccountType
          in: query
          required: false
          description: "DEPRECATED: Use `fromAccountTypes` instead.

Either ids or internal names of the origin account type"
          schema:
            type: string
        - name: fromAccountTypes
          in: query
          required: false
          description: "Either ids or internal names of the origin account type"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: "The kind of transfers to return"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, `loan.open` would be a valid internal name."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: toAccountType
          in: query
          required: false
          description: "DEPRECATED: Use `toAccountTypes` instead.

Either ids or internal names of the destination account type"
          schema:
            type: string
        - name: toAccountTypes
          in: query
          required: false
          description: "Either ids or internal names of the destination account type"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferKinds
          in: query
          required: false
          description: "DEPRECATED: Use `kinds` instead"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransferKind'
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transfers/{key}:
    get:
      operationId: viewTransfer
      summary: >-
        Returns details about a transfer
      description: >-
        Returns details about a transfer.
      tags:
        - Transfers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number
          schema:
            type: string
      responses:
        '200':
          description: >-
            Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transfers/{key}/export/{format}:
    parameters:
      - name: key
        in: path
        required: true
        description: >-
          Either the id or transaction number
        schema:
          type: string
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportTransfer
      summary: >-
        Exports the transfer details to a file.
      description: >-
        Exports the transfer details to a file. The available formats are
        available in `TransferView`
      tags:
        - Transfers
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transfers/{key}/chargeback:
    post:
      operationId: chargebackTransfer
      summary: >-
        Perform the chargeback of a transfer
      description: >-
        The chargeback generates a new transaction with `kind` = `chargeback`. A
        new transfer is generated with the same from / to, and negative amount.
        This will effectively return the amount to the original account. Only
        top-level transfers can be charged back. For example, a transfer used to
        charge a fee cannot be charged back. Also, the hability to chargeback a
        transfer depends on permissions and configuration like the maximum allowed
        time for the chargeback.
      tags:
        - Transfers
      parameters:
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number
          schema:
            type: string
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '201':
          description: >-
            The chargeback id
          headers:
            Location:
              description: >-
                URL for viewing the created chargeback
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            There was an error while creating the chargeback payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
  /{owner}/transactions/data-for-search:
    get:
      operationId: getTransactionsDataForSearch
      summary: >-
        Returns data for searching transactions of an account owner
      description: >-
        Returns data which can be used to filter a transaction search
      tags:
        - Transactions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
      responses:
        '200':
          description: >-
            Data for searching transactions of an account owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/transactions:
    parameters:
      - $ref: '#/components/parameters/owner'
    get:
      operationId: searchTransactions
      summary: >-
        Searches transactions of an account owner
      description: >-
        Returns the transactions of a given account owner that match the specified
        criteria. Each result will will be relative to this owner. The amount may
        be positive or negative, depending on whether this owner has performed or
        received the transaction.
      tags:
        - Transactions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: accountTypes
          in: query
          required: false
          description: "The account types"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: authorizationPerformedBy
          in: query
          required: false
          description: "Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel)."
          schema:
            type: string
        - name: authorizationStatuses
          in: query
          required: false
          description: "Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
        - name: authorized
          in: query
          required: false
          description: "When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          schema:
            type: boolean
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: direction
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransferDirectionEnum'
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: externalPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `externalPayment`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ExternalPaymentStatusEnum'
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: paymentRequestExpiration
          in: query
          required: false
          description: "The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: paymentRequestStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `paymentRequest`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentRequestStatusEnum'
        - name: recurringPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `recurringPayment`. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RecurringPaymentStatusEnum'
        - name: scheduledPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `scheduledPayment`. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ScheduledPaymentStatusEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: ticketStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `ticket`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TicketStatusEnum'
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The transaction entries matching the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/transactions/export/{format}:
    parameters:
      - $ref: '#/components/parameters/owner'
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportTransactions
      summary: >-
        Exports the owner transactions search results as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /{owner}/transactions/data-for-search`.
      tags:
        - Transactions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: accountTypes
          in: query
          required: false
          description: "The account types"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: authorizationPerformedBy
          in: query
          required: false
          description: "Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel)."
          schema:
            type: string
        - name: authorizationStatuses
          in: query
          required: false
          description: "Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
        - name: authorized
          in: query
          required: false
          description: "When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          schema:
            type: boolean
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: direction
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransferDirectionEnum'
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: externalPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `externalPayment`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ExternalPaymentStatusEnum'
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: paymentRequestExpiration
          in: query
          required: false
          description: "The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: paymentRequestStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `paymentRequest`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentRequestStatusEnum'
        - name: recurringPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `recurringPayment`. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RecurringPaymentStatusEnum'
        - name: scheduledPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `scheduledPayment`. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ScheduledPaymentStatusEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: ticketStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `ticket`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TicketStatusEnum'
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions/data-for-search:
    get:
      operationId: getTransactionsOverviewDataForSearch
      summary: >-
        Returns data for searching transactions regardless of a owner
      description: >-
        Returns data which can be used to filter a transaction search
      tags:
        - Transactions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: pendingMyAuthorization
          in: query
          required: false
          schema:
            type: boolean
          description: >-
            When set to true will search for transactions which are currently
            pending authorization, and the authenticated user can authorize.
      responses:
        '200':
          description: >-
            Data for searching transactions of an account owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionOverviewDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions:
    get:
      operationId: searchTransactionsOverview
      summary: >-
        Searches transactions regardless of a owner
      description: >-
        Searches transactions regardless of a owner that match the specified
        criteria.
      tags:
        - Transactions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: authorizationPerformedBy
          in: query
          required: false
          description: "Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel)."
          schema:
            type: string
        - name: authorizationStatuses
          in: query
          required: false
          description: "Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
        - name: authorized
          in: query
          required: false
          description: "When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          schema:
            type: boolean
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: currencies
          in: query
          required: false
          description: "The currencies internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: externalPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `externalPayment`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ExternalPaymentStatusEnum'
        - name: fromAccountTypes
          in: query
          required: false
          description: "The source account types internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: paymentRequestExpiration
          in: query
          required: false
          description: "The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: paymentRequestStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `paymentRequest`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentRequestStatusEnum'
        - name: pendingMyAuthorization
          in: query
          required: false
          description: "When set to true will only return transactions (`payment`, `recurringPayment` or `scheduledPayment`) in pending authorization state that the logged user can authorize"
          schema:
            type: boolean
        - name: recurringPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `recurringPayment`. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RecurringPaymentStatusEnum'
        - name: scheduledPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `scheduledPayment`. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ScheduledPaymentStatusEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: ticketStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `ticket`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TicketStatusEnum'
        - name: toAccountTypes
          in: query
          required: false
          description: "The source account types internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The transaction entries matching the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionOverviewResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions/export/{format}:
    parameters:
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportTransactionsOverview
      summary: >-
        Exports the transactions overview search results as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /transactions/data-for-search`.
      tags:
        - Transactions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: authorizationPerformedBy
          in: query
          required: false
          description: "Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel)."
          schema:
            type: string
        - name: authorizationStatuses
          in: query
          required: false
          description: "Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
        - name: authorized
          in: query
          required: false
          description: "When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          schema:
            type: boolean
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: currencies
          in: query
          required: false
          description: "The currencies internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: externalPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `externalPayment`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ExternalPaymentStatusEnum'
        - name: fromAccountTypes
          in: query
          required: false
          description: "The source account types internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: paymentRequestExpiration
          in: query
          required: false
          description: "The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: paymentRequestStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `paymentRequest`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentRequestStatusEnum'
        - name: pendingMyAuthorization
          in: query
          required: false
          description: "When set to true will only return transactions (`payment`, `recurringPayment` or `scheduledPayment`) in pending authorization state that the logged user can authorize"
          schema:
            type: boolean
        - name: recurringPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `recurringPayment`. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RecurringPaymentStatusEnum'
        - name: scheduledPaymentStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `scheduledPayment`. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ScheduledPaymentStatusEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: ticketStatuses
          in: query
          required: false
          description: "Statuses used as search criteria applied only to transactions of kind `ticket`."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TicketStatusEnum'
        - name: toAccountTypes
          in: query
          required: false
          description: "The source account types internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions/{key}:
    get:
      operationId: viewTransaction
      summary: >-
        Returns details about a transaction
      description: >-
        Returns details about a transaction.
      tags:
        - Transactions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number
          schema:
            type: string
      responses:
        '200':
          description: >-
            Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions/{key}/export/{format}:
    parameters:
      - name: key
        in: path
        required: true
        description: >-
          Either the id or transaction number
        schema:
          type: string
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportTransaction
      summary: >-
        Exports the transaction details to a file.
      description: >-
        Exports the transaction details to a file. The available formats are
        available in `TransactionView`
      tags:
        - Transactions
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{owner}/installments/data-for-search:
    parameters:
      - $ref: '#/components/parameters/owner'
    get:
      operationId: getInstallmentsDataForSearch
      summary: >-
        Returns data for searching installments of an account owner
      description: >-
        Returns data which can be used to filter a installment search
      tags:
        - Installments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            Data for searching installments of an account owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/installments:
    parameters:
      - $ref: '#/components/parameters/owner'
    get:
      operationId: searchInstallments
      summary: >-
        Searches installments of an account owner
      description: >-
        Returns the installments of a given account owner that match the specified
        criteria. Each result will will be relative to this owner. The amount may
        be positive or negative, depending on whether this owner has performed or
        received the transaction.
      tags:
        - Installments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: accountTypes
          in: query
          required: false
          description: "The account types"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: authorizationPerformedBy
          in: query
          required: false
          description: "Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel)."
          schema:
            type: string
        - name: authorizationStatuses
          in: query
          required: false
          description: "Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
        - name: authorized
          in: query
          required: false
          description: "When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          schema:
            type: boolean
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: direction
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransferDirectionEnum'
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "Possible statuses for installments."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InstallmentStatusEnum'
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The installment entries matching the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstallmentResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/installments/export/{format}:
    parameters:
      - $ref: '#/components/parameters/owner'
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportInstallments
      summary: >-
        Exports the owner installments search results as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /{owner}/installments/data-for-search`.
      tags:
        - Installments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: accountTypes
          in: query
          required: false
          description: "The account types"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: authorizationPerformedBy
          in: query
          required: false
          description: "Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel)."
          schema:
            type: string
        - name: authorizationStatuses
          in: query
          required: false
          description: "Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
        - name: authorized
          in: query
          required: false
          description: "When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          schema:
            type: boolean
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: direction
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransferDirectionEnum'
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "Possible statuses for installments."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InstallmentStatusEnum'
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /installments/data-for-search:
    get:
      operationId: getInstallmentsOverviewDataForSearch
      summary: >-
        Returns data for searching installments regardless of a owner
      description: >-
        Returns data which can be used to filter a installment search
      tags:
        - Installments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            Data for searching installments of an account owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentOverviewDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /installments:
    get:
      operationId: searchInstallmentsOverview
      summary: >-
        Searches installments regardless of a owner
      description: >-
        Searches installments regardless of a owner that match the specified
        criteria.
      tags:
        - Installments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: authorizationPerformedBy
          in: query
          required: false
          description: "Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel)."
          schema:
            type: string
        - name: authorizationStatuses
          in: query
          required: false
          description: "Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
        - name: authorized
          in: query
          required: false
          description: "When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          schema:
            type: boolean
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: currencies
          in: query
          required: false
          description: "The currencies internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromAccountTypes
          in: query
          required: false
          description: "The source account types internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "Possible statuses for installments."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InstallmentStatusEnum'
        - name: toAccountTypes
          in: query
          required: false
          description: "The source account types internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The installment entries matching the criteria
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstallmentOverviewResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /installments/export/{format}:
    parameters:
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportInstallmentsOverview
      summary: >-
        Exports the installments overview search results as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /installments/data-for-search`.
      tags:
        - Installments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: accessClients
          in: query
          required: false
          description: "References to access clients (id or token) used to perform / receive the transfer."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: authorizationPerformedBy
          in: query
          required: false
          description: "Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel)."
          schema:
            type: string
        - name: authorizationStatuses
          in: query
          required: false
          description: "Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
        - name: authorized
          in: query
          required: false
          description: "When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (`payment`, `order`, `recurringPayment` or `scheduledPayment`)."
          schema:
            type: boolean
        - name: broker
          in: query
          required: false
          description: "DEPRECATED: Use `brokers` instead.

Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: by
          in: query
          required: false
          description: "Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator."
          schema:
            type: string
        - name: channels
          in: query
          required: false
          description: "Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: currencies
          in: query
          required: false
          description: "The currencies internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: excludedIds
          in: query
          required: false
          description: "List of transfers ids to be excluded from the result."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromAccountTypes
          in: query
          required: false
          description: "The source account types internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: fromCurrentAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include only transfers by the current access client."
          schema:
            type: boolean
        - name: groups
          in: query
          required: false
          description: "Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: includeGeneratedByAccessClient
          in: query
          required: false
          description: "Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated."
          schema:
            type: boolean
        - name: kinds
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionKind'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "Possible statuses for installments."
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InstallmentStatusEnum'
        - name: toAccountTypes
          in: query
          required: false
          description: "The source account types internal names or ids."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transactionNumber
          in: query
          required: false
          description: "The transaction number of the matching transfer"
          schema:
            type: string
        - name: transferFilters
          in: query
          required: false
          description: "Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: transferTypes
          in: query
          required: false
          description: "Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Reference a user that should have either received / performed the transfer."
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /installments/{key}/process:
    parameters:
      - name: key
        in: path
        required: true
        description: >-
          Either the id or a string in the form `number@transaction`,
          beging transaction either the id or transaction number.
        schema:
          type: string
    post:
      operationId: processInstallment
      summary: >-
        Processes a installment, generating its corresponding transfer.
      description: >-
        Processes an installment. The installment status must be either
        `scheduled`, `failed`
        or `blocked`.
        This action must be performed by the payer or manager.
      tags:
        - Installments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '201':
          description: >-
            The installment is processed and the transfer is returned
          headers:
            Location:
              description: >-
                URL for viewing the transfer details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /installments/{key}/settle:
    parameters:
      - name: key
        in: path
        required: true
        description: >-
          Either the id or a string in the form `number@transaction`,
          beging transaction either the id or transaction number.
        schema:
          type: string
    post:
      operationId: settleInstallment
      summary: >-
        Settles a scheduled payment installment.
      description: >-
        Settles a single installment. It must be a scheduled payment installment
        (not recurring payment), and the status must be either
        `scheduled`, `failed`
        or `blocked`.
        This action must be performed by the payment receiver or manager.
      tags:
        - Installments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The installment is unblocked and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{owner}/payments/data-for-perform:
    get:
      operationId: dataForPerformPayment
      summary: >-
        Returns configuration data for performing a payment
      description: >-
        Returns configuration data for performing a payment
      tags:
        - Payments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/fields'
        - name: to
          in: query
          required: false
          description: >-
            The payment destination. Either the string `system` for a payment to
            system or a user identification.
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: >-
            The payment type id or qualified internal name (in the form
            `fromAccountType.paymentType`). If no payment type is provided, the
            possible types will be returned, so the payer can choose.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for performing a payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForTransaction'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/payments:
    post:
      operationId: performPayment
      summary: >-
        Performs a payment from the given owner
      description: >-
        Performs either a direct, scheduled or recurring payment from the owner indicated on
        the path to the owner specified on the body. The destination user should
        be informed in the `subject` parameter. If the `subject` is `system`, it
        will be a payment to a system account. The payment id is returned on the
        response, and a link to the transaction details is returned on the
        `Location` header.
      tags:
        - Payments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '201':
          description: >-
            The created payment
          headers:
            Location:
              description: >-
                URL for viewing the transaction details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The perform payment parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformPayment'

  /{owner}/payments/preview:
    post:
      operationId: previewPayment
      summary: >-
        Previews a payment before performing it
      description: >-
        Previews a payment, scheduled or recurring payment. The actual balance
        checking is not performed in the preview.
      tags:
        - Payments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The payment preview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPreview'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The perform payment parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformPayment'

  /{owner}/payments/installments:
    get:
      operationId: calculatePerformPaymentInstallments
      summary: >-
        Calculates the default installments for a scheduled payment
      description: >-
        Used to calculate installments for a scheduled payment. Will return an
        installment every month. When later performing the payment, these can be
        (optionally) customized (such as changing some due dates or amounts) and
        used on the payment installments.
      tags:
        - Payments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/fields'
        - name: to
          in: query
          required: true
          description: >-
            The payment destination
          schema:
            type: string
        - name: count
          in: query
          required: true
          description: >-
            The number of installments
          schema:
            type: integer
        - name: amount
          in: query
          required: true
          description: >-
            The total scheduled payment amount
          schema:
            type: string
            format: number
        - name: currency
          in: query
          required: false
          description: >-
            The payment currency. Used when no `type` is not provided, to narrow
            the possible payment types by currency.
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: >-
            The payment type id or qualified internal name (in the
            form  `fromAccountType.paymentType`). If not provided, will use the
            first possible type (possibly narrowed by the `currency` parameter).
            However, if more than one type is available, a validation error will
            be raised.
          schema:
            type: string
        - name: firstDate
          in: query
          required: false
          description: >-
            The due date of the first installment. If none is provided, it is
            assumed that the first installment is paid immediately, and others
            will be with regular 1 month interval
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: >-
            The calculated installments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PerformInstallment'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /easy-invoices/qr-code/{to}:
    get:
      operationId: getEasyInvoiceQrCode
      summary: >-
        Returns the QR-code image for the given easy invoice's parameters
      description: >-
        The generated image could be scanned (e.g by the mobile application)
        to create a payment ready to be confirmed.
        The `easyInvoice` channel will be used to perform this operation, i.e the access and perform payment
        configurations of that channel will be applied.
      tags:
        - EasyInvoices
      parameters:
        - name: to
          in: path
          x-dotInPath: true
          required: true
          description: >-
            The user which will receive the easy invoice. Unlike other cases of
            user reference, in this case `self` cannot be used, because the URL
            may be shared with others, hence, `self` makes no sense.
          schema:
            type: string
        - name: amount
          in: query
          required: false
          description: >-
            The easy invoice amount. If provided and the user has multiple
            currencies, either `type` or `currency` is required.
          schema:
            type: string
            format: number
        - name: currency
          in: query
          required: false
          description: >-
            The currency id or internal name. Either this or `type` should be
            informed if an `amount` was given and the user has multiple
            currencies.
          schema:
            type: string
        - name: description
          in: query
          required: false
          description: >-
            The payment description
          schema:
            type: string
        - name: type
          in: query
          description: >-
            The payment type id or qualified internal name (in the form
            `fromAccountType.paymentType`). Either this or `currency` should be
            informed if an `amount` was given and the user has multiple
            currencies.
          schema:
            type: string
        - $ref: '#/components/parameters/customFields'
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ImageSizeEnum'
      responses:
        '200':
          description: >-
            The image content
          content:
            image/png:
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /easy-invoices/data-for-perform/{to}:
    get:
      operationId: dataForPerformEasyInvoice
      summary: >-
        Returns data for an easy invoice to the given user.
      description: >-
        An easy invoice is a pre-filled payment from the authenticated user
        to another user.
        Other users can use this for a payment template to that user, with
        pre-filled data. If an amount is specified, then either there must be
        only payment types of a single currency to the given user, or either a
        payment type or currency must be informed.
        The `easyInvoice` channel will be used to perform this operation, i.e the access and perform payment
        configurations of that channel will be applied.
      tags:
        - EasyInvoices
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: to
          in: path
          x-dotInPath: true
          required: true
          description: >-
            The user which will receive the easy invoice. Unlike other cases of
            user reference, in this case `self` cannot be used, because the URL
            may be shared with others, hence, `self` makes no sense.
          schema:
            type: string
        - name: amount
          in: query
          required: false
          description: >-
            The easy invoice amount. If provided and the user has multiple
            currencies, either `type` or `currency` is required.
          schema:
            type: string
            format: number
        - name: type
          in: query
          required: false
          description: >-
            The payment type id or qualified internal name (in the form
            `fromAccountType.paymentType`). Either this or `currency` should be
            informed if an `amount` was given and the user has multiple
            currencies.
          schema:
            type: string
        - name: currency
          in: query
          required: false
          description: >-
            The currency id or internal name. Either this or `type` should be
            informed if an `amount` was given and the user has multiple
            currencies.
          schema:
            type: string
        - $ref: '#/components/parameters/customFields'
      responses:
        '200':
          description: >-
            The data for easy invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForEasyInvoice'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /easy-invoices:
    post:
      operationId: performEasyInvoice
      summary: >-
        Performs a direct payment from an easy invoice.
      description: >-
        Performs a direct payment from the authenticated user to the owner specified on the body.
        The destination user should be informed in the `subject` parameter (the subject `system` is not allowed).
        The payment id is returned on the
        response, and a link to the transaction details is returned on the
        `Location` header.
        The `easyInvoice` channel will be used to perform this operation, i.e the access and perform payment
        configurations of that channel will be applied.
      tags:
        - EasyInvoices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '201':
          description: >-
            The created payment
          headers:
            Location:
              description: >-
                URL for viewing the transaction details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The perform payment parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformPayment'

  /easy-invoices/preview:
    post:
      operationId: previewEasyInvoice
      summary: >-
        Previews a direct payment from an easy invoice before performing it.
      description: >-
        Previews a direct payment from the logged created from an easy invoice. The actual balance
        checking is not performed in the preview.
        The `easyInvoice` channel will be used to perform this operation, i.e the access and perform payment
        configurations of that channel will be applied.
      tags:
        - EasyInvoices
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The payment preview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPreview'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The perform payment parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformPayment'

  /scheduled-payments/{key}/block:
    post:
      operationId: blockScheduledPayment
      summary: >-
        Blocks a scheduled payment.
      description: >-
        Blocks a scheduled payment, preventing its installments from being
        automatically processed. The scheduled payment status must be
        `open`. This action is to be performed by
        the scheduled payment payer.
      tags:
        - ScheduledPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The scheduled payment is blocked and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scheduled-payments/{key}/unblock:
    post:
      operationId: unblockScheduledPayment
      summary: >-
        Unblocks a scheduled payment.
      description: >-
        Unblocks a previously blocked scheduled payment The scheduled payment
        status must be `blocked`. This action is
        to be performed by the scheduled payment payer.
      tags:
        - ScheduledPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The scheduled payment is unblocked and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scheduled-payments/{key}/cancel:
    post:
      operationId: cancelScheduledPayment
      summary: >-
        Cancels a scheduled payment.
      description: >-
        Permanently cancels a scheduled payment. The scheduled payment status must
        be either `open` or
        `blocked`. This action is to be performed
        by the scheduled payment payer.
      tags:
        - ScheduledPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The scheduled payment is canceled and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scheduled-payments/{key}/settle-remaining:
    post:
      operationId: settleScheduledPayment
      summary: >-
        Settles all remaining installments in a scheduled payment.
      description: >-
        Settles all remaining installments, closing the scheduled payment. The
        scheduled payment status must be either
        `open` or
        `blocked`. This action is to be performed
        by the scheduled payment payee.
      tags:
        - ScheduledPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The scheduled payment is closed and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scheduled-payments/installments/{id}/process:
    post:
      operationId: processScheduledPaymentInstallment
      deprecated: true
      x-remove-version: 4.15
      summary: >-
        DEPRECATED: Use `POST /installments/{key}/process` instead.

        Processes a single scheduled payment installment.
      description: >-
        Processes a single installment. The installment status must be either
        `scheduled`,  `failed`
        or `blocked`. This action is
        to be performed by the scheduled payment payer.
      tags:
        - ScheduledPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
        - $ref: '#/components/parameters/id'
      responses:
        '201':
          description: >-
            The installment is processed and the transfer is returned
          headers:
            Location:
              description: >-
                URL for viewing the transfer details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scheduled-payments/installments/{id}/settle:
    post:
      operationId: settleScheduledPaymentInstallment
      deprecated: true
      x-remove-version: 4.15
      summary: >-
        DEPRECATED: Use `POST /installments/{key}/process` instead.

        Settles a single scheduled payment installment.
      description: >-
        Settles a single installment. The installment status must be either
        `scheduled`,  `failed`
        or `blocked`. This action is
        to be performed by the scheduled payment payee.
      tags:
        - ScheduledPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The installment is unblocked and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /recurring-payments/{key}/cancel:
    post:
      operationId: cancelRecurringPayment
      summary: >-
        Cancels a recurring payment.
      description: >-
        Permanently cancels a recurring payment. The recurring payment status must
        be `open`.
      tags:
        - RecurringPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The recurring payment is canceled and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recurring-payments/occurrences/{id}/process-failed:
    post:
      operationId: processFailedRecurringPaymentOccurrence
      deprecated: true
      x-remove-version: 4.15
      summary: >-
        DEPRECATED: Use `POST /installments/{key}/process` instead.

        Processes a failed recurring payment occurrence.
      description: >-
        Processes a failed recurring payment occurrence. The occurrence status
        must be `failed`.
      tags:
        - RecurringPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
        - $ref: '#/components/parameters/id'
      responses:
        '201':
          description: >-
            The occurrence is processed and the transfer is returned
          headers:
            Location:
              description: >-
                URL for viewing the transfer details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{owner}/payment-requests/data-for-send:
    get:
      operationId: dataForSendPaymentRequest
      summary: >-
        Returns configuration data for sending a payment request
      description: >-
        Returns configuration data for sending a payment request
      tags:
        - PaymentRequests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/fields'
        - name: to
          in: query
          required: false
          description: >-
            The payment request destination, which is either string `system` for a
            payment request to system or a user identification. The payment
            request destination is the one that performs the payment once it is
            accepted.
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: >-
            The payment type id or qualified internal name (in the form
            `fromAccountType.paymentType`). If no payment type is provided, the
            possible types will be returned, so the payer can choose.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for sending a payment request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForTransaction'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/payment-requests:
    post:
      operationId: sendPaymentRequest
      summary: >-
        Sends a payment request from the given owner
      description: >-
        Sends a payment request from the owner indicated on the path (which will
        receive the payment once the request is accepted) to the owner specified
        on the body (which will perform the payment once the request is accepted).
        The destination user should be informed in the `subject` parameter. If the
        `subject` is `system`, the payment request is sent to a system account,
        and has to be accepted by an administrator. The payment request id is
        returned on the response, and a link to the transaction details is
        returned on the `Location` header.
      tags:
        - PaymentRequests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
      responses:
        '201':
          description: >-
            The created payment request
          headers:
            Location:
              description: >-
                URL for viewing the transaction details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The send payment request parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendPaymentRequest'

  /payment-requests/{key}/accept:
    post:
      operationId: acceptPaymentRequest
      summary: >-
        Accepts a payment request.
      description: >-
        Accepts a payment request in status `open`.
        After accepting the payment request its resultant status could
        be  `processed` (and the
        corresponding  sheduled or direct payment was generated)
        or  `scheduled`.    This can be done only
        by managers or the payer (i.e the request's recipient)  with permission to
        accept.
      tags:
        - PaymentRequests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '201':
          description: >-
            The performed payment. Only if the process date was not given (i.e the
            request was processed immediately).
          headers:
            Location:
              description: >-
                URL for viewing the payment details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '204':
          description: >-
            The payment request was accepted and scheduled for processing at the
            given date. Nothing is returned.
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The parameters to accept a payment request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptOrReschedulePaymentRequest'

  /payment-requests/{key}/reschedule:
    post:
      operationId: reschedulePaymentRequest
      summary: >-
        Reschedules a payment request.
      description: >-
        Reschedules an already accepted and scheduled payment request (i.e
        with  status `scheduled`). If the new
        processing date is null then the payment request will be  processed
        immediately generating the corresponding payment. Otherwise it will be
        scheduled to be processed at the given date.  This can be done only by
        managers or the payer (i.e the request's recipient)  with permission to
        accept.
      tags:
        - PaymentRequests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '201':
          description: >-
            The performed payment. Only if the process date was not given (i.e the
            request was processed immediately).
          headers:
            Location:
              description: >-
                URL for viewing the payment details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '204':
          description: >-
            The payment request was rescheduled. Nothing is returned.
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The parameters to reschedule a payment request.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptOrReschedulePaymentRequest'

  /payment-requests/{key}/preview:
    get:
      operationId: previewPaymentRequest
      summary: >-
        Previews the payment performed when accepting the given payment request.
      description: >-
        Previews the payment ony if the payment request status
        is  `open`
        or  `scheduled`.
      tags:
        - PaymentRequests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The payment preview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPreview'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payment-requests/{key}/change-expiration:
    post:
      operationId: changePaymentRequestExpirationDate
      summary: >-
        Changes the payment request expiration.
      description: >-
        Change the expiration date of a payment request in
        status  `open` or
        `expired`. This can be done only by
        managers or the payee (i.e the request's sender)  with permission to
        change the expiration.
      tags:
        - PaymentRequests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The payment request expiration date was changed. Nothing is returned.
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The parameters to change the payment request's expiration date
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePaymentRequestExpirationDate'

  /payment-requests/{key}/reject:
    post:
      operationId: rejectPaymentRequest
      summary: >-
        Rejects a payment request.
      description: >-
        Rejects a payment request in status `open`.
        This can be done only by managers or the payer (i.e the request's
        recipient) with permission to accept.
      tags:
        - PaymentRequests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number
          schema:
            type: string
      responses:
        '204':
          description: >-
            The payment request was rejected. Nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          A comment for the reject action the payer can set.
        content:
          text/plain:
            schema:
              type: string

  /payment-requests/{key}/cancel:
    post:
      operationId: cancelPaymentRequest
      summary: >-
        Cancels a payment request.
      description: >-
        Cancels a payment request in status `open`.
        This can be done only by managers or the payee with permission to cancel.
      tags:
        - PaymentRequests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number
          schema:
            type: string
      responses:
        '204':
          description: >-
            The payment request was cancelled. Nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          A comment for the cancel action the payee/manager can set.
        content:
          text/plain:
            schema:
              type: string
  /pending-payments/{key}/authorize:
    post:
      operationId: authorizePendingPayment
      summary: >-
        Authorizes a pending payment.
      description: >-
        Authorizes a payment / scheduled payment / recurring payment whose
        authorization status is
        `pending`.
      tags:
        - PendingPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The payment is authorized. The next authorization level is returned,
            in case the payment is still pending another authorization, or returns
            a no-content when the payment is authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionAuthorizationLevelData'
        '204':
          description: >-
            Nothing is returned if the transaction authorization process is
            finished, and the transaction is processed.
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          Contains the action comments
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PendingPaymentActionParams'

  /pending-payments/{key}/deny:
    post:
      operationId: denyPendingPayment
      summary: >-
        Denies a pending payment.
      description: >-
        Denies a payment / scheduled payment / recurring payment whose
        authorization status is
        `pending`.
      tags:
        - PendingPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The payment is denied. Nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          Contains the action comments
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PendingPaymentActionParams'

  /pending-payments/{key}/cancel:
    post:
      operationId: cancelPendingPayment
      summary: >-
        Cancels the authorization process of a pending payment.
      description: >-
        Cancels a payment / scheduled payment / recurring payment whose
        authorization status is
        `pending`. This action is
        performed by the payer.
      tags:
        - PendingPayments
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The payment is canceled. Nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          Contains the action comments
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PendingPaymentActionParams'
  /pos/data-for-pos:
    get:
      operationId: dataForReceivePayment
      summary: >-
        Returns configuration data for receiving a payment (POS)
      description: >-
        Returns configuration data for receiving a payment in POS operation
      tags:
        - POS
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: from
          in: query
          required: false
          description: >-
            Identification of the payer user
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: >-
            The payment type id or qualified internal name (in the form
            `fromAccountType.paymentType`). If no payment type is provided, the
            possible types will be returned, so the payer can choose.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for receiving a payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForTransaction'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            If a POS error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PosError'

  /pos:
    post:
      operationId: receivePayment
      summary: >-
        Receives a payment (POS)
      description: >-
        Receives either a direct or scheduled payment in a POS operation for the
        authenticated user. The payer user should be informed in the `subject`
        parameter. The payment id is returned on the response, and a link to the
        transaction details is returned on the `Location` header.
      tags:
        - POS
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '201':
          description: >-
            The created payment
          headers:
            Location:
              description: >-
                URL for viewing the transaction details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The receive payment parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformPayment'

  /pos/preview:
    post:
      operationId: previewReceivePayment
      summary: >-
        Previews a POS payment before receiving it
      description: >-
        Previews a payment or scheduled payment. The actual balance checking is
        not performed in the preview.
      tags:
        - POS
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The payment preview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPreview'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            If a POS error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PosError'
      requestBody:
        description: >-
          The receive payment parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformPayment'

  /pos/installments:
    get:
      operationId: calculateReceivePaymentInstallments
      summary: >-
        Calculates the default installments for a scheduled payment
      description: >-
        Used to calculate installments for a scheduled payment. Will return an
        installment every month. When later receiving the payment, these can be
        (optionally) customized (such as changing some due dates or amounts) and
        used on the payment installments.
      tags:
        - POS
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: from
          in: query
          required: true
          description: >-
            The payment origin
          schema:
            type: string
        - name: count
          in: query
          required: true
          description: >-
            The number of installments
          schema:
            type: integer
        - name: amount
          in: query
          required: true
          description: >-
            The total scheduled payment amount
          schema:
            type: string
            format: number
        - name: currency
          in: query
          required: false
          description: >-
            The payment currency. Used when no `type` is not provided, to narrow
            the possible payment types by currency.
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: >-
            The payment type id or qualified internal name (in the
            form  `fromAccountType.paymentType`). If not provided, will use the
            first possible type (possibly narrowed by the `currency` parameter).
            However, if more than one type is available, a validation error will
            be raised.
          schema:
            type: string
        - name: firstDate
          in: query
          required: false
          description: >-
            The due date of the first installment. If none is provided, it is
            assumed that the first installment is paid immediately, and others
            will be with regular 1 month interval
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: >-
            The calculated installments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PerformInstallment'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            If a POS error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PosError'

  /pos/otp:
    post:
      operationId: receivePaymentOtp
      summary: >-
        Generates a new One-Time-Password (OTP) for a pos payment
      description: >-
        Sends a new OTP for the customer of the POS for a payment. The OTP belongs
        to the payer, not the authenticated user. The entire payment object must
        be sent on the request body. This is the same object which is sent both
        either preview or actually receive the payment.
      tags:
        - POS
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: medium
          in: query
          required: true
          description: >-
            The medium the user wants to receive the otp
          schema:
            $ref: '#/components/schemas/SendMediumEnum'
      responses:
        '204':
          description: >-
            The OTP is sent to the user, and no content is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            There was an error when generating the OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpError'
      requestBody:
        description: >-
          The receive payment parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformPayment'

  /pos/device-confirmations:
    post:
      operationId: receivePaymentCreateDeviceConfirmation
      summary: >-
        Creates a pending device confirmation for a pos payment.
      description: >-
        Creates a device confirmation to confirm a pos payment. The confirmation
        will have a QR code that can be read (e.g with the Mobile App) to be
        approved / rejected by the payer. The confirmation belongs to the payer,
        not the authenticated user. The entire payment object must be sent on the
        request body. This is the same object which is sent both either preview or
        actually receive the payment.
      tags:
        - POS
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters: []
      responses:
        '201':
          description: >-
            Returns the identifier of the new confirmation.
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The receive payment parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformPayment'

  /pos/device-confirmations/{id}:
    get:
      operationId: receivePaymentViewDeviceConfirmation
      summary: >-
        Shows the details of a device confirmation for a POS payer.
      description: >-
        Shows the details of a device confirmation for POS payer. The confirmation belongs to the payer but must had been
        created by the authenticated user. The entire payment object must be sent on the request body.
        This is the same object which is sent both either preview or actually receive the payment
      tags:
        - POS
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - name: payer
          in: query
          required: true
          description: >-
            A user identification value, such as id, username, e-mail, phone, etc. Id
            is always allowed, others depend on Cyclos configuration. Note that a
            valid numeric value is always considered as id. For example, when using
            another identification method that can be numeric only, prefix the value
            with a single quote (like in Excel spreadsheets), for example,
            `'1234567890`;
          schema:
            type: string
        - name: currency
          in: query
          required: false
          description: >-
            The currency id or internal name. Only used when not specifying a
            payment type. In this case, will narrow the search for the payment type.
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: >-
            The payment type, either the id or qualified internal name (in the form
            `fromAccountType.paymentType`). If no payment type is specified, if a
            single one is possible, it will be used. If a currency is specified, it
            will be taken into account in order to find the payment type. If,
            however, there would be multiple possibilities, a validation error is
            returned.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The device confirmation details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceConfirmationView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      operationId: receivePaymentDeleteDeviceConfirmation
      summary: >-
        Deletes a device confirmation for a POS payer.
      description: >-
        Deletes a device confirmation for the payer of pos payment. The
        confirmation belongs to the payer, not the authenticated user. The entire
        payment object must be sent on the request body. This is the same object
        which is sent both either preview or actually receive the payment.
      tags:
        - POS
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - name: payer
          in: query
          required: true
          description: >-
            A user identification value, such as id, username, e-mail, phone, etc. Id
            is always allowed, others depend on Cyclos configuration. Note that a
            valid numeric value is always considered as id. For example, when using
            another identification method that can be numeric only, prefix the value
            with a single quote (like in Excel spreadsheets), for example,
            `'1234567890`;
          schema:
            type: string
        - name: currency
          in: query
          required: false
          description: >-
            The currency id or internal name. Only used when not specifying a
            payment type. In this case, will narrow the search for the payment type.
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: >-
            The payment type, either the id or qualified internal name (in the form
            `fromAccountType.paymentType`). If no payment type is specified, if a
            single one is possible, it will be used. If a currency is specified, it
            will be taken into account in order to find the payment type. If,
            however, there would be multiple possibilities, a validation error is
            returned.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The device confirmation was removed.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pos/device-confirmations/{id}/qr-code:
    get:
      operationId: receivePaymentDeviceConfirmationQrCode
      summary: >-
        Returns the QR-code image for the given device confirmation only if it was
        not yet approved / rejected
      description: >-
        This request will return the image contents as expected but our
        api  documentation page (or any other usage of an &lt;img&gt; tag),
        created  using swagger-ui, generates a second request to include the image
        in the page. This new (GET) request won't send the authentication
        parameters and  as this path requires authentication the image will be
        shown as broken. Optionally, to solve the problem described above and to
        allow authenticate the user when using sessions, a `sessionToken` or
        `accessClientToken`  query parameter could be specified.
      tags:
        - POS
      parameters:
        - $ref: '#/components/parameters/id'
        - name: payer
          description: >-
            The payer, either a user principal (id, login name,  etc) or the word
            `system` when the payment is to be performed to / from a system
            account. Note that a valid numeric value is always considered as id.
            For example, when using another identification method that can be
            numeric only, prefix the value with a single quote (like in Excel
            spreadsheets), for example, `'1234567890`.
          in: query
          required: true
          schema:
            type: string
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ImageSizeEnum'
      responses:
        '200':
          description: >-
            The image content
          content:
            image/png:
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/client-types:
    get:
      operationId: listClientTypesForUser
      summary: >-
        Returns the list of access clients types for a user
      description: >-
        Returns the access client types for a given user that the authenticated
        user has access.
      tags:
        - Clients
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: channel
          in: query
          description: >-
            If a channel id or internal name is specified, will only list access
            client types that can be used to access that channel
          schema:
            type: string
      responses:
        '200':
          description: >-
            The list of access clients types, with permissions, for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserClientTypePermissions'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /clients/activate:
    post:
      operationId: activateClient
      summary: >-
        Activates an access client
      description: >-
        Activates an access client belonging to the currently authenticated user.
      tags:
        - Clients
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: code
          required: true
          in: query
          description: >-
            The activation code. Must match the activation code obtained in
            Cyclos, which belongs to the authenticated user.
          schema:
            type: string
        - name: prefix
          required: false
          in: query
          description: >-
            A prefix to be added to the generated access client token. Can be used
            to increase the size of the generated token, and to increase the
            security on clients that have to store the token. This can be
            accomplished by using some sort of client application hash or
            identifier, which should be stable. The prefix is not returned by this
            method. When later passing in the full token, the prefix should
            prepend the returned token without any separator.
          schema:
            type: string
      responses:
        '200':
          description: >-
            Returns the token to be used on subsequent requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateClientResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /clients/{key}:
    get:
      operationId: viewClient
      summary: >-
        Returns details of an access client
      description: >-
        Returns the access client details, together with permissions
      tags:
        - Clients
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          in: path
          required: true
          description: >-
            The access client id or token
          schema:
            type: string
      responses:
        '200':
          description: >-
            The access client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /clients/{key}/unassign:
    post:
      operationId: unassignClient
      summary: >-
        Unassign (disconnects) an access client
      description: >-
        Unassigns an access client by id or token. It must be currently assigned.
        After this call, the client can be assigned again if needed.
      tags:
        - Clients
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: key
          in: path
          required: true
          description: >-
            The access client id or token
          schema:
            type: string
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            Nothing is returned, and the access client is unassigned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mobile/data-for-guest:
    get:
      operationId: dataForMobileGuest
      summary: >-
        Returns data the mobile application uses while in guest mode
      description: >-
        The data returned can be controlled with a cache key. Each data type has a
        parameter, such as `headerIf`, which returns the data only if it has
        changed since the last request.
      tags:
        - Mobile
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/cyclosVersion'
        - $ref: '#/components/parameters/headerIf'
        - $ref: '#/components/parameters/footerIf'
        - $ref: '#/components/parameters/themeIf'
        - name: translationsIf
          in: query
          required: false
          description: >-
            Controls the translations cache. If is a boolean value (`true` or
            `false`) will forcibly return or skip the content. Otherwise, it
            should be a string in the form `id|version`. In this case, the content
            will be returned only when changed. When blank will always return it.
          schema:
            type: string
        - name: deviceId
          in: query
          required: false
          description: >-
            Trusted device identification. If given and the device is active then
            a pending device confirmation will be created that will be validated
             after the user logs-in. If the validation passes then no confirmation
            password will be used only for that session.
          schema:
            type: string
        - name: pinId
          in: query
          required: false
          description: >-
            Device PIN identification. If given then the information about whether it is active or not will be given in
            the returned `dataForLogin`.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for the mobile guest page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForMobileGuest'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mobile/data-for-user:
    get:
      operationId: dataForMobileUser
      summary: >-
        Returns data the mobile application uses in either user or POS mode
      description: >-
        The data returned can be controlled with a cache key. Each data type has a
        parameter, such as `helpIf`, which returns the data only if it has changed
        since the last request.
      tags:
        - Mobile
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/cyclosVersion'
        - $ref: '#/components/parameters/themeIf'
        - name: translationsIf
          in: query
          required: false
          description: >-
            Controls the translations cache. If is a boolean value (`true` or
            `false`) will forcibly return or skip the content. Otherwise, it
            should be a string in the form `id|version`. In this case, the content
            will be returned only when changed. When blank will always return it.
          schema:
            type: string
        - name: mobileHelpIf
          in: query
          required: false
          description: >-
            Controls the mobile help cache. If is a boolean value (`true` or
            `false`) will forcibly return or skip the content. Otherwise, it
            should be a string in the form `id|version`. In this case, the content
            will be returned only when changed. When blank will always return it.
            Only taken into account when not accessing as access client (not in
            POS mode).
          schema:
            type: string
        - name: posHelpIf
          in: query
          required: false
          description: >-
            Controls the POS help cache. If is a boolean value (`true` or `false`)
            will forcibly return or skip the content. Otherwise, it should be a
            string in the form `id|version`. In this case, the content will be
            returned only when changed. When blank will always return it. Only
            taken into account when accessing as access client (POS mode).
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for the mobile user page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForMobileUser'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mobile/page/{id}:
    get:
      operationId: mobilePageContent
      summary: >-
        Returns the content of a mobile page
      description: >-
        Returns the content of a mobile page, either by id or internal name
      tags:
        - Mobile
      parameters:
        - name: id
          in: path
          required: true
          description: >-
            The mobile page id
          schema:
            type: string
      responses:
        '200':
          description: >-
            The page content
          content:
            text/html:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notifications:
    get:
      operationId: searchNotifications
      summary: >-
        Searches for the notifications the authenticated user has received.
      description: >-
        Returns an ordered page of notifications the authenticated user has
        received (newest first).
      tags:
        - Notifications
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: onlyNew
          in: query
          required: false
          description: "Boolean value indicating wether return only the new notifications received after the last view date tracked using `POST /notifications/viewed`"
          schema:
            type: boolean
        - name: onlyUnread
          in: query
          required: false
          description: "Boolean value indicating wether return only the unread notifications"
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
      responses:
        '200':
          description: >-
            The notifications page
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications/{id}:
    get:
      operationId: viewNotification
      summary: >-
        Returns the notification details.
      description: >-
        Returns the notification details.
      tags:
        - Notifications
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The notification details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteNotification
      summary: >-
        Removes a notification by id.
      description: >-
        Removes a notification for the authenticated user by id.
      tags:
        - Notifications
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The notification was removed
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications/mark-as-read:
    post:
      operationId: markNotificationsAsRead
      summary: >-
        Marks a list of notifications as read.
      description: >-
        Marks a list of notifications, given by id, as read.
      tags:
        - Notifications
      parameters:
        - name: ids
          description: >-
            The notifications (comma-separated list of identifiers) to mark as
            read.
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '204':
          description: >-
            The notifications were marked as read.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'

  /notifications/status:
    get:
      operationId: notificationsStatus
      summary: >-
        Return information about the received notifications.
      description: >-
        Return information about the status of the received notifications (unread,
        new, etc).
      tags:
        - Notifications
      responses:
        '200':
          description: >-
            The notifications status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsStatus'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications/viewed:
    post:
      operationId: markAsViewed
      summary: >-
        Update the last view date for the notifications.
      description: >-
        Update the last view date for the notifications. This will be used to
        calculate the number of new notifications returned by the `POST
        /notifications/status` operation.
      tags:
        - Notifications
      responses:
        '204':
          description: >-
            The last view date was updated.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
  /{user}/notification-settings:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: viewNotificationSettings
      summary: >-
        Returns the notification settings for a given user.
      description: >-
        Returns the notification settings for a given operator / user /
        administrator.
      tags:
        - NotificationSettings
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The notification settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettingsView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: saveNotificationSettings
      summary: >-
        Saves the notification settings for a given user.
      description: >-
        Saves the notification settings for a given operator / user /
        administrator.
      tags:
        - NotificationSettings
      security:
        - basic: []
        - session: []
        - accessClient: []
      requestBody:
        description: The parameters to save
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettingsEdit'
      responses:
        '204':
          description: >-
            The notification settings are saved and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'

  /{user}/notification-settings/data-for-edit:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getNotificationSettingsDataForEdit
      summary: >-
        Returns configuration data to edit the notification settings of a user.
      description: >-
        Returns data to edit the nofitication settings od a given operator /
        user / administrator.
      tags:
        - NotificationSettings
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The notification settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettingsDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vouchers/data-for-search:
    get:
      operationId: getVouchersDataForSearch
      summary: >-
        Returns data for searching vouchers as admin
      description: >-
        Returns configuration data used to search vouchers as admin
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The configuration data for searching a vouchers as admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VouchersDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vouchers:
    get:
      operationId: searchVouchers
      summary: >-
        Searches for vouchers as admin
      description: >-
        Returns the list of matching vouchers the authenticated admin can view
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum voucher amount"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: buyer
          in: query
          required: false
          description: "The buyer of the voucher. A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`;"
          schema:
            type: string
        - name: buyerGroups
          in: query
          required: false
          description: "The ids or internal names of buyers groups"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum voucher creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: creationType
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/VoucherCreationTypeEnum'
        - name: expirationPeriod
          in: query
          required: false
          description: "The minimum / maximum voucher expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/VoucherOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: printed
          in: query
          required: false
          description: "If it is passed, filter if the voucher was printed or not."
          schema:
            type: boolean
        - name: redeemPeriod
          in: query
          required: false
          description: "The minimum / maximum voucher redeem date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: redeemer
          in: query
          required: false
          description: "The redeemer of the voucher. A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`;"
          schema:
            type: string
        - name: redeemerGroups
          in: query
          required: false
          description: "The ids or internal names of redeemers groups"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VoucherStatusEnum'
        - name: token
          in: query
          required: false
          description: "The voucher token (with or without mask)"
          schema:
            type: string
        - name: types
          in: query
          required: false
          description: "The ids or internal names of voucher types"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
      responses:
        '200':
          description: >-
            The list of matching vouchers.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VoucherResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vouchers/export/{format}:
    parameters:
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportVouchers
      summary: >-
        Exports the vouchers search results as file.
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /vouchers/data-for-search`.
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum voucher amount"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: buyer
          in: query
          required: false
          description: "The buyer of the voucher. A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`;"
          schema:
            type: string
        - name: buyerGroups
          in: query
          required: false
          description: "The ids or internal names of buyers groups"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum voucher creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: creationType
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/VoucherCreationTypeEnum'
        - name: expirationPeriod
          in: query
          required: false
          description: "The minimum / maximum voucher expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/VoucherOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: printed
          in: query
          required: false
          description: "If it is passed, filter if the voucher was printed or not."
          schema:
            type: boolean
        - name: redeemPeriod
          in: query
          required: false
          description: "The minimum / maximum voucher redeem date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: redeemer
          in: query
          required: false
          description: "The redeemer of the voucher. A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`;"
          schema:
            type: string
        - name: redeemerGroups
          in: query
          required: false
          description: "The ids or internal names of redeemers groups"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VoucherStatusEnum'
        - name: token
          in: query
          required: false
          description: "The voucher token (with or without mask)"
          schema:
            type: string
        - name: types
          in: query
          required: false
          description: "The ids or internal names of voucher types"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: markAsPrinted
          in: query
          required: false
          schema:
            type: boolean
          description: >-
            Should the exported vouchers be marked as printed?
            By default doesn't mark vouchers as printed.
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vouchers/{key}:
    get:
      operationId: viewVoucher
      summary: >-
        Returns data for a particular voucher
      description: >-
        Returns details about a particular voucher, as well as the transactions
        used to buy and redeem, and the permissions for authenticated over it.
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          description: >-
            The voucher `id` or `token`. When the token is fully numeric, it must
            be preceded by a single quote (`'`).
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The voucher details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vouchers/{key}/export/{format}:
    parameters:
      - name: key
        description: >-
          The voucher `id` or `token`. When the token is fully numeric, it must
          be preceded by a single quote (`'`).
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportVoucher
      summary: >-
        Exports a voucher details as file.
      description: >-
        Generates a file containing the voucher details. The available export
        formats are returned in `VoucherView`.
      parameters:
        - name: markAsPrinted
          in: query
          required: false
          schema:
            type: boolean
          description: >-
            Should the exported voucher be marked as printed?
            By default doesn't mark vouchers as printed.
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vouchers/{key}/qr-code:
    get:
      operationId: getVoucherQrCode
      summary: >-
        Returns the QR-code image for the given voucher
      description: >-
        The api documentation page, using swagger-ui (or any direct usage of an
        image tag), generates a second  request to show the image contents on the
        preview. This is a new GET request, without passing-in the authentication
        parameters. As this path requires authentication, the image is shown
        broken, but the first request works as expected, returning the image
        content. Optionally, to solve the problem described above and allow to
        authenticate the user when using sessions, a `sessionToken` or
        `accessClientToken` plus a `channel` query parameters could be specified.
      tags:
        - Vouchers
      parameters:
        - name: key
          description: >-
            The voucher `id` or `token`. When the token is fully numeric, it must
            be preceded by a single quote (`'`).
          in: path
          required: true
          schema:
            type: string
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ImageSizeEnum'
      responses:
        '200':
          description: >-
            The image content
          content:
            image/png:
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /vouchers/{key}/change-expiration:
    post:
      operationId: changeVoucherExpirationDate
      summary: >-
        Changes the voucher expiration.
      description: >-
        Change the expiration date of a voucher in
        status  `open` or
        `expired`. This can be done only by
        admin with permission to change the expiration.
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or token.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The voucher expiration date was changed. Nothing is returned.
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The parameters to change the voucher's expiration date
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeVoucherExpirationDate'

  /vouchers/{key}/cancel:
    post:
      operationId: cancelVoucher
      summary: >-
        Cancels the voucher
      description: >-
        Cancels a voucher in status `open`,
        `expired` or `pending`.
        If its creation type is `bought`
        also refund the buyer.
        This can be done by users with permission to refund over its
        open or expired vouchers, or by admins with permission to cancel/refund
        for generated/bought vouchers respectively.
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or token.
          schema:
            type: string
      responses:
        '204':
          description: >-
            The voucher was canceled. Nothing is returned.
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'

  /{user}/vouchers/data-for-search:
    get:
      operationId: getUserVouchersDataForSearch
      summary: >-
        Returns data for searching vouchers a user has bought or redeemed
      description: >-
        Returns configuration data used to search vouchers the user has either
        bought (default) or redeemed (if `relation` is `redeemed`)
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: relation
          in: query
          description: >-
            Indicates the relation used to filter the vouchers.
          schema:
            $ref: '#/components/schemas/VoucherRelationEnum'
      responses:
        '200':
          description: >-
            The configuration data for searching a user's vouchers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVouchersDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/vouchers:
    get:
      operationId: searchUserVouchers
      summary: >-
        Searches for vouchers a user has bought or redeemed
      description: >-
        Returns the list of matching vouchers the given user has either bought
        (default) or redeemed (if `type` is `redeemed`)
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: amountRange
          in: query
          required: false
          description: "The minimum / maximum voucher amount"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum voucher creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: expirationPeriod
          in: query
          required: false
          description: "The minimum / maximum voucher expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: redeemBy
          in: query
          required: false
          description: "The user who perform the redeem action. A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`;"
          schema:
            type: string
        - name: redeemPeriod
          in: query
          required: false
          description: "The minimum / maximum voucher redeem date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: relation
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/VoucherRelationEnum'
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VoucherStatusEnum'
        - name: token
          in: query
          required: false
          description: "The voucher token (with or without mask)"
          schema:
            type: string
        - name: types
          in: query
          required: false
          description: "The ids or internal names of voucher types"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
      responses:
        '200':
          description: >-
            The list of matching vouchers. The `buyer` and `redeemer` fields will
            not be returned when searching for bought and redeemed vouchers
            (respectively), because they are always the user passed as parameter.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VoucherResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/vouchers/types-for-buy:
    get:
      operationId: listVoucherTypesForBuy
      deprecated: true
      x-remove-version: 4.15
      summary: >-
        Returns the voucher types the authenticated user can buy vouchers to the
        given user
      description: >-
        Instead use "/{user}/vouchers/data-for-buy" without passing a type.


        List the voucher types the user can buy to another user (or himself)
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The list with the voucher types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VoucherTypeDetailed'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/vouchers/data-for-buy:
    get:
      operationId: getVoucherDataForBuy
      summary: >-
        Returns data for buying a voucher of a specified type or the list of types to buy.
      description: >-
        If a type is passed it returns the data for buying vouchers, otherwise it
        returns the list of types the atuhenticated user can buy to the given user (or himself).
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: type
          description: >-
            Either the `id` or `internalName` of the voucher type. Left empty to get
            the list of available types for buy.
          in: query
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for buying vouchers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherDataForBuy'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/vouchers/buy:
    post:
      operationId: buyVouchers
      summary: >-
        Buys one or more vouchers for the given user
      description: >-
        Buys vouchers. If the payment type has custom fields, the values should be
        passed as well. This service only returns the vouchers list, if  you need
        information about the voucher status please
        use  /{user}/vouchers/buy-with-status.
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '200':
          description: >-
            The identifiers of all generated vouchers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            An error occurred while buying the voucher(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyVoucherError'
      requestBody:
        description: >-
          The buy voucher parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyVoucher'

  /{user}/vouchers/buy-with-status:
    post:
      operationId: buyVouchersWithStatus
      summary: >-
        Buys one or more vouchers for the given user returning the status.
      description: >-
        Buys vouchers. If the payment type has custom fields, the values
        should  be passed as well. The status returned in the result is shared by
        all vouchers.
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '200':
          description: >-
            The status of all bougth vouchers and their identifiers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherBoughtResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            An error occurred while buying the voucher(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyVoucherError'
      requestBody:
        description: >-
          The buy voucher parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyVoucher'

  /{user}/vouchers/data-for-redeem:
    get:
      operationId: getVoucherInitialDataForRedeem
      summary: >-
        Returns initial data for redeeming vouchers
      description: >-
        Returns initial data for redeeming vouchers
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: >-
            The data for redeeming vouchers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherInitialDataForRedeem'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/vouchers/{token}/data-for-redeem:
    get:
      operationId: getVoucherDataForRedeem
      summary: >-
        Returns data for redeeming a voucher by token
      description: >-
        Data for redeeming a specific voucher
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: token
          description: >-
            The voucher token to be redeemed
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for redeeming vouchers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherDataForRedeem'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            An error occurred while retrieving data for redeeming the voucher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedeemVoucherError'

  /{user}/vouchers/{token}/redeem:
    post:
      operationId: redeemVoucher
      summary: >-
        Redeems a voucher for the given user
      description: >-
        Redeems a voucher
      tags:
        - Vouchers
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/user'
        - name: token
          description: >-
            The voucher token to be redeemed
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: >-
            The identifiers of the voucher and the generated payment for redeem
          headers:
            Location:
              description: >-
                URL for viewing the redeemed voucher
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherRedeemResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            An error occurred while redeeming the voucher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedeemVoucherError'
      requestBody:
        description: >-
          Additional redeem data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedeemVoucher'
  /tickets/data-for-new:
    get:
      operationId: dataForNewTicket
      summary: >-
        Returns data for create a new ticket for the logged user.
      tags:
        - Tickets
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: type
          in: query
          required: false
          description: >-
            The payment type id or qualified internal name (in the form
            `fromAccountType.paymentType`). If no payment type is provided, the
            possible types will be returned, so the payer can choose.
          schema:
            type: string
        - name: payer
          in: query
          required: false
          description: >-
            Will only be used if no specific payment type is given. An
            identification for the user which will pay the ticket. Is optional,
            and in most cases, should be left empty. If specified, the returned
            payment types will take into account those that can be paid by the
            given user.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for creating a ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForTransaction'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/{ticket}:
    get:
      operationId: viewTicket
      summary: >-
        Returns details about a ticket by ticket number
      description: >-
        Returns details about a ticket by ticket number.
      tags:
        - Tickets
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: ticket
          in: path
          required: true
          description: >-
            The ticket number
          schema:
            type: string
      responses:
        '200':
          description: >-
            Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets:
    post:
      operationId: newTicket
      summary: >-
        Creates a new ticket with status `open` for the
        logged user.
      description: >-
        The logged user will be the ticket's owner and then the receiver of the
        payment generated after processing the ticket only if was previously
        approved by the payer.
      tags:
        - Tickets
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '201':
          description: >-
            The created ticket
          headers:
            Location:
              description: >-
                URL for viewing the ticket details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The data to create the new ticket
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketNew'

  /tickets/{ticket}/qr-code:
    get:
      operationId: getTicketQrCode
      summary: >-
        Returns the QR-code image for the given ticket only if its status is
        `open`
      description: >-
        This request will return the image contents as expected but our
        api  documentation page (or any other usage of an &lt;img&gt; tag),
        created  using swagger-ui, generates a second request to include the image
        in the page. This new (GET) request won't send the authentication
        parameters and  as this path requires authentication the image will be
        shown as broken. Optionally, to solve the problem described above and to
        allow authenticate the user when using sessions, a `sessionToken` or
        `accessClientToken`  query parameter could be specified.
      tags:
        - Tickets
      parameters:
        - name: ticket
          description: >-
            The ticket number.
          in: path
          required: true
          schema:
            type: string
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ImageSizeEnum'
      responses:
        '200':
          description: >-
            The image content
          content:
            image/png:
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/{ticket}/preview:
    post:
      operationId: previewTicket
      summary: >-
        Previews the payment generated by the ticket.
      description: >-
        Previews the payment that will be generated if the ticket is approved by a
        user (i.e the payer). The ticket status must
        be  `open` and `successUrl` null
        or  `approved`. The actual balance checking is
        not  performed in the preview.
      tags:
        - Tickets
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: ticket
          description: >-
            The ticket number
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The approval preview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketPreview'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/{ticket}/cancel:
    post:
      operationId: cancelTicket
      summary: >-
        Cancels a ticket by the receiver.
      description: >-
        Cancels a ticket by the receiver before being approved by the payer.
        The  logged user must be the ticket's owner.
      tags:
        - Tickets
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: ticket
          description: >-
            The ticket number
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: >-
            The ticket was canceled. Nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/{ticket}/approve:
    post:
      operationId: approveTicket
      summary: >-
        Approves a ticket by the payer.
      description: >-
        After a successful approval, a new direct payment from the logged user
        (i.e the payer) to the user who created the ticket will be generated ONLY
        if the ticket doesn't have a defined `successUrl` nor `successWebhook`, in
        that case the ticket goes to `processed` status.
        Otherwise the ticket just goes to the `approved`
        status and the corresponding payment will be generated only after the
        ticket is processed by the receiver.
      tags:
        - Tickets
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/confirmationPassword'
        - name: ticket
          description: >-
            The ticket number
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The approval result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketApprovalResult'
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'

  /tickets/{ticket}/process:
    post:
      operationId: processTicket
      summary: >-
        Processes a ticket by the receiver.
      description: >-
        Processes an already approved ticket generating a new direct payment from
        the user who approve the ticket to the logged user (i.e the ticket's
        creator). A ticket can be processed only if its status is
        `approved` and the `orderId` (if any) matches the
        one given at ticket creation. After successfully processing it goes to the
        final status:  `processed`.
      tags:
        - Tickets
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: ticket
          description: >-
            The ticket number
          in: path
          required: true
          schema:
            type: string
        - name: orderId
          description: >-
            The order id given at ticket creation. Must be specified only if an
            `orderId` was given when the ticket was created.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >-
            The process result
          headers:
            Location:
              description: >-
                URL for viewing the payment details
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketProcessResult'
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
  /{owner}/record-types:
    get:
      operationId: listRecordTypesByOwner
      summary: >-
        Lists the record types over a user or system
      description: >-
        Returns the record types the authenticated user can view over the given
        user or system if the `system` owner is used.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
      responses:
        '200':
          description: >-
            The list of visible record types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OwnerRecordPermissions'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/record-types/{type}:
    get:
      operationId: getRecordTypeByOwner
      summary: >-
        Returns a single record type over a user or system
      description: >-
        Returns the a specific record type the authenticated user can view over
        the given user or system if the `system` owner is used.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
        - name: type
          description: >-
            Either the identifier or internal name of the record type
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The record type details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerRecordPermissions'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/records/{type}/data-for-search:
    get:
      operationId: getRecordDataForOwnerSearch
      summary: >-
        Returns data for searching records of a specific type and owner
      description: >-
        Returns data for searching records of a specific type, either for system
        or user records, depending on the `owner` parameter.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
        - name: type
          description: >-
            Either the identifier or internal name of the record type
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The configuration data for searching records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/records/{type}:
    get:
      operationId: searchOwnerRecords
      summary: >-
        Searches for records of a specific type and owner
      description: >-
        Returns records matching the search criteria, for a specific type,  either
        for system or user records, depending on the `owner` parameter. The custom
        fields returned on each record depend on the field configuration, which
        needs to be enabled to return on list. The profile fields available as
        search filters for records are assigned in the products (or admin group
        permissions).
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
        - name: type
          description: >-
            Either the identifier or internal name of the record type
          in: path
          required: true
          schema:
            type: string
        - name: createdBy
          in: query
          required: false
          description: "Either the id or identifier of the user that created the record"
          schema:
            type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum record creation date"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: customFields
          in: query
          required: false
          description: "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
      responses:
        '200':
          description: >-
            The records matching the search filters.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createRecord
      summary: >-
        Creates a new record for the given owner and type
      description: >-
        Creates a new record for the given owner and type. If the owner is
        `system` will be a system record. Otherwise will be a
        user record.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/owner'
        - name: type
          description: >-
            Either the identifier or internal name of the record type
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: >-
            Returns the identifier of the new record
          headers:
            Location:
              description: >-
                URL for viewing the record details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The record to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordNew'

  /{owner}/records/{type}/export/{format}:
    parameters:
      - $ref: '#/components/parameters/owner'
      - name: type
        description: >-
          Either the identifier or internal name of the record type
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportOwnerRecords
      summary: >-
        Exports the records search results as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /{owner}/records/{type}/data-for-search`.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: createdBy
          in: query
          required: false
          description: "Either the id or identifier of the user that created the record"
          schema:
            type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum record creation date"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: customFields
          in: query
          required: false
          description: "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/records/{type}/data-for-new:
    get:
      operationId: getRecordDataForNew
      summary: >-
        Returns data to create a new record
      description: >-
        Returns configuration data for creating a record for the given owner and
        type. If the owner is `system` will be a system record.
        Otherwise will be a user record.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
        - name: type
          required: true
          in: path
          description: >-
            The record type to be created
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for creating a record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /records/{id}/data-for-edit:
    get:
      operationId: getRecordDataForEdit
      summary: >-
        Returns data to edit an existing record
      description: >-
        Returns configuration data for editing a record, plus the current
        `RecordEdit` object that can be altered and sent back
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The data for editing a record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /records/{id}:
    get:
      operationId: viewRecord
      summary: >-
        Returns details of a specific record
      description: >-
        Returns information about a record, located by id
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The record data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateRecord
      summary: >-
        Updates an existing record
      description: >-
        Updates an existing record
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The record was updated
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The record to be edited
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordEdit'
    delete:
      operationId: deleteRecord
      summary: >-
        Removes a record
      description: >-
        Removes a record
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The record was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /general-records/record-types:
    get:
      operationId: listRecordTypesForGeneralSearch
      summary: >-
        Lists the record types for general search
      description: >-
        Returns the record types the authenticated user can use to search records
        in general, that is, without being of a particular user, but any managed
        user.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The list of visible record types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordTypeWithMenu'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /general-records/{type}/data-for-search:
    get:
      operationId: getRecordDataForGeneralSearch
      summary: >-
        Returns data for searching records of a type over any owner
      description: >-
        Returns data for searching records of a specific type over any owner. Is
        not tied to a particular owner (user or system), hence, is considered a
        general search.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: type
          description: >-
            Either the identifier or internal name of the record type
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The configuration data for searching records of this type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralRecordsDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /general-records/{type}:
    get:
      operationId: searchGeneralRecords
      summary: >-
        Searches for records of a specific type over any owner
      description: >-
        Returns records matching the search criteria, for a specific type. The
        custom fields returned on each record depend on the field configuration,
        which needs to be enabled to return on list. The profile fields available
        as search filters for records are assigned in the products (or admin group
        permissions).
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: type
          description: >-
            Either the identifier or internal name of the record type
          in: path
          required: true
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Either the ids or identification methods of record owners' brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: createdBy
          in: query
          required: false
          description: "Either the id or identifier of the user that created the record"
          schema:
            type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum record creation date"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: customFields
          in: query
          required: false
          description: "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: groups
          in: query
          required: false
          description: "Either the ids or internal names of record owners' groups"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: user
          in: query
          required: false
          description: "Either the id or identifier of the record owner"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The configuration data for searching records
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordWithOwnerResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /general-records/{type}/export/{format}:
    parameters:
      - name: type
        description: >-
          Either the identifier or internal name of the record type
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportGeneralRecords
      summary: >-
        Exports the general records search results as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /general-records/{type}/data-for-search`.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: brokers
          in: query
          required: false
          description: "Either the ids or identification methods of record owners' brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: createdBy
          in: query
          required: false
          description: "Either the id or identifier of the user that created the record"
          schema:
            type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum record creation date"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: customFields
          in: query
          required: false
          description: "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: groups
          in: query
          required: false
          description: "Either the ids or internal names of record owners' groups"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: user
          in: query
          required: false
          description: "Either the id or identifier of the record owner"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shared-records/data-for-search:
    get:
      operationId: getRecordDataForSharedSearch
      summary: >-
        Returns data for searching records with shared fields
      description: >-
        Returns data for searching records from multiple types, using shared
        fields. Only user records can be shared this way.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The configuration data for searching records with shared fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedRecordsDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shared-records:
    get:
      operationId: searchSharedRecords
      summary: >-
        Searches for records with shared fields
      description: >-
        Returns records matching the search criteria, using shared fields. This
        allows searching over multiple record types that use shared fields. The
        custom fields returned on each record depend on the field configuration,
        which needs to be enabled to return on list. The profile fields available
        as search filters for records are assigned in the products (or admin group
        permissions).
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: brokers
          in: query
          required: false
          description: "Either the ids or identification methods of record owners' brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: createdBy
          in: query
          required: false
          description: "Either the id or identifier of the user that created the record"
          schema:
            type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum record creation date"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: customFields
          in: query
          required: false
          description: "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: groups
          in: query
          required: false
          description: "Either the ids or internal names of record owners' groups"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: types
          in: query
          required: false
          description: "Either the ids or identification methods of record types"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Either the id or identifier of the record owner"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The configuration data for searching records
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordWithOwnerResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shared-records/export/{format}:
    parameters:
      - $ref: '#/components/parameters/format'
    get:
      operationId: exportSharedRecords
      summary: >-
        Exports the shared fields records search results as file
      description: >-
        Generates a file containing the search results. The available export
        formats are returned in `GET /transfers/data-for-search`.
      tags:
        - Records
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: brokers
          in: query
          required: false
          description: "Either the ids or identification methods of record owners' brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: createdBy
          in: query
          required: false
          description: "Either the id or identifier of the user that created the record"
          schema:
            type: string
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum record creation date"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: customFields
          in: query
          required: false
          description: "Record custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: groups
          in: query
          required: false
          description: "Either the ids or internal names of record owners' groups"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: types
          in: query
          required: false
          description: "Either the ids or identification methods of record types"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: user
          in: query
          required: false
          description: "Either the id or identifier of the record owner"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The file content
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/token-types:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: listUserTokenTypes
      summary: >-
        Returns the permissions over token types of the given user.
      description: >-
        Returns the permissions the authenticated user can perform over the
        tokens of the given user.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenPermissions'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/tokens/{type}:
    parameters:
      - $ref: '#/components/parameters/user'
      - name: type
        description: >-
          Either the identifier or internal name of the token type
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getUserTokens
      summary: >-
        Returns the tokens of a type and user
      description: >-
        Returns data containing the tokens of a given type and user, along with
        the tokens themselves. If the authenticated user is the requested user,
        will only return tokens whose `status` are either
        `active` or `blocked`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The tokens matching the search filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokensListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: activateToken
      summary: >-
        Activates a pending / unassigned token.
      description: >-
        If the token status is `unassigned`, the token
        will be assigned to the given user, and activated.
        Otherwise, if the token status is `pending`,
        just activates the token, checking that the user matches.
        In both cases the token status is set to `active`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            Returns the id of the assigned token
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: The token value to activate
        content:
          text/plain:
            schema:
              type: string

  /tokens/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: viewToken
      summary: >-
        Returns details of a specific token
      description: >-
        Returns information about a token, located by either id or number
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The token data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{id}/activate:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: activatePendingToken
      summary: >-
        Activates a token.
      description: >-
        Activates a token, which must be assigned to a user managed by the
        authenticated user. The token status must be `pending`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The token is activated and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{id}/block:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: blockToken
      summary: >-
        Blocks a token.
      description: >-
        Blocks a token, which remains blocked until being unblocked again.
        The token status must be `active`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The token is blocked and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{id}/unblock:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: unblockToken
      summary: >-
        Unlocks a token.
      description: >-
        Unlocks a token, returning its status to `active`.
        The token status must be `blocked`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The token is unblocked and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{id}/cancel:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: cancelToken
      summary: >-
        Permanently cancels a token.
      description: >-
        Permanently cancels a token.
        The token status must be any but `canceled`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The token is canceled and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{id}/assign/{user}:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/user'
    post:
      operationId: assignToken
      summary: >-
        Assigns a token to a given user.
      description: >-
        Assigns a token to a given user. The token status must be
        `unassigned`. After assigning, the token status
        will be `pending`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The token is assigned to the user and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{id}/set-expiry-date:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: setTokenExpiryDate
      summary: >-
        Sets the expiry date of a specific token.
      description: >-
        Updates the token expiry date. The token status must be either
        `active`, `blocked` or
        `expired`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: date
          in: query
          required: false
          description: >-
            The new expiry date. If not specified, the token will never expire.
          schema:
            type: string
            format: date-time
      responses:
        '204':
          description: >-
            The token expiry date is changed and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{id}/set-activation-deadline:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: setTokenActivationDeadline
      summary: >-
        Sets the activation deadline date of a specific token.
      description: >-
        Updates the token activation deadline date. The token status must be
        `pending` or `activationExpired`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: date
          in: query
          required: false
          description: >-
            The new activation deadline date. If not specified, there will be no deadline.
          schema:
            type: string
            format: date-time
      responses:
        '204':
          description: >-
            The token activation deadline date is changed and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{type}/data-for-new:
    parameters:
      - name: type
        description: >-
          Either the identifier or internal name of the token type
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getTokenDataForNew
      summary: >-
        Returns data to create a new token for the given type.
      description: >-
        Returns data to create a new token for the given type.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: user
          in: query
          required: false
          schema:
            type: string
          description: >-
            Either id or identification of the user to have the token
            initially assigned
      responses:
        '200':
          description: >-
            The data for creating a new token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{type}/new:
    parameters:
      - name: type
        description: >-
          Either the identifier or internal name of the token type
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: createToken
      summary: >-
        Creates a new token of the given type.
      description: >-
        Creates a new token of the given type. If a user is specified, the
        token will be initially assigned to that user, and the initial status
        will be `pending`.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '201':
          description: >-
            Returns the identifier of the new record
          headers:
            Location:
              description: >-
                URL for viewing the record details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          Details of the token to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenNew'

  /general-tokens/{type}/data-for-search:
    parameters:
      - name: type
        description: >-
          Either the identifier or internal name of the token type
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getGeneralTokensDataForSearch
      summary: >-
        Returns data for searching tokens of a specific type.
      description: >-
        Returns data for searching tokens of a specific type,
        regardless of the user.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The configuration data for searching tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /general-tokens/{type}:
    parameters:
      - name: type
        description: >-
          Either the identifier or internal name of the token type
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: searchGeneralTokens
      summary: >-
        Searches for tokens of a specific type, regardless of the user.
      description: >-
        Returns tokens matching the search criteria, for a specific type.
      tags:
        - Tokens
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: activationPeriod
          in: query
          required: false
          description: "The minimum / maximum token activation date."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: brokers
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) for brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: expiryPeriod
          in: query
          required: false
          description: "The minimum / maximum token expiry date."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: groups
          in: query
          required: false
          description: "Either id or internal names of groups / group sets"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: "The desired token statuses"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TokenStatusEnum'
        - name: user
          in: query
          required: false
          description: "Either id or a principal (login name, e-mail, etc) for the token owner user"
          schema:
            type: string
        - name: value
          in: query
          required: false
          description: "The token value"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The tokens matching the search filters
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{owner}/operations:
    get:
      operationId: listOperationsByOwner
      summary: >-
        Lists the custom operations over the system or user
      description: >-
        Returns the custom operations the authenticated user can run over the
        given user or system if the `system` owner is used.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
      responses:
        '200':
          description: >-
            The list of custom operations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/operations/{operation}/data-for-run:
    get:
      operationId: getOwnerOperationDataForRun
      summary: >-
        Returns configuration data for running a custom operation over an owner
      description: >-
        Returns data to run a specific custom operation over a given user or
        system if the `system` owner is used. The operation scope must match,
        being either `system` or
        `user`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data used to run the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDataForRun'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{owner}/operations/{operation}/run:
    post:
      operationId: runOwnerOperation
      summary: >-
        Runs a custom operation either for system or user
      description: >-
        Runs a specific custom operation over a given user or system if the
        `system` owner is used. The operation scope must match, being either
        `system` or `user`.  If
        the operation resulted in a file download (either because the `resultType`
        is `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The custom operation parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunOperation'

  /{owner}/operations/{operation}/run-upload:
    post:
      operationId: runOwnerOperationWithUpload
      summary: >-
        Runs a custom operation either for system or user while uploading a file
      description: >-
        Runs a specific custom operation over a given user or system if the
        `system` owner is used. The operation scope must match, being either
        `system` or
        `user`.  This path allows uploading a file, by
        using a `multipart-form-data` post. If the operation resulted in a file
        download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/owner'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                params:
                  description: >-
                    The custom operation parameters.
                  allOf:
                    - $ref: '#/components/schemas/RunOperation'
                file:
                  type: string
                  format: binary
                  description: >-
                    The file being uploaded

  /operations/{operation}/data-for-run:
    get:
      operationId: getOperationDataForRun
      summary: >-
        Returns configuration data for running a custom operation without
        additional scope
      description: >-
        Returns data to run a specific custom operation, which must not have any
        additional scope to run, such as user, contact, record or advertisement.
        Hence, this path is suitable for custom operations with scope
        `system` or `internal`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data used to run the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDataForRun'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /operations/{operation}/run:
    post:
      operationId: runOperation
      summary: >-
        Runs a custom operation without additional scope
      description: >-
        Runs a specific custom operation without additional scope. Is suitable for
        operations with scope `system` or
        `internal`. If the operation resulted in a file
        download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The custom operation parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunOperation'

  /operations/{operation}/run-upload:
    post:
      operationId: runOperationWithUpload
      summary: >-
        Runs a custom operation without additional scope while uploading a file
      description: >-
        Runs a specific custom operation without additional scope. Is suitable for
        operations with scope `system` or
        `internal`.  This path allows uploading a file,
        by using a `multipart-form-data` post. If the operation resulted in a file
        download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                params:
                  description: >-
                    The custom operation parameters.
                  allOf:
                    - $ref: '#/components/schemas/RunOperation'
                file:
                  type: string
                  format: binary
                  description: >-
                    The file being uploaded

  /operations/callback/{id}:
    post:
      operationId: runCustomOperationCallback
      summary: >-
        Runs the callback of an external redirect custom operation
      description: >-
        Custom operations may be configured in Cyclos to be of result type
        `externalRedirect`. In such case, the
        regular execution returns an URL to which redirect clients. Once the
        external page processing is complete, the user is redirected back, so the
        operation can be completed. This operation should be executed to complete
        the payment. In order for the external service receive the correct URL,
        Cyclos need to have a link generation script that handles the link type
        `EXTERNAL_REDIRECT`.
      tags:
        - Operations
      parameters:
        - name: id
          description: >-
            The external redirect identifier. Received as part of the URL which is
            generated by Cyclos to the external service to use as callback.
          in: path
          required: true
          schema:
            type: string
        - name: token
          description: >-
            The security token which is received as part of the URL which is
            generated by Cyclos to the external service to use as callback.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          Data of the original callback request sent by the external service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpRequestData'

  /marketplace/{ad}/operations:
    get:
      operationId: listOperationsByAd
      summary: >-
        Lists the custom operations over the given advertisement
      description: >-
        Returns the custom operations the authenticated user can run over the
        given advertisement. All returned operations have the scope
        `advertisement`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/ad'
      responses:
        '200':
          description: >-
            The list of custom operations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/{ad}/operations/{operation}/data-for-run:
    get:
      operationId: getAdOperationDataForRun
      summary: >-
        Returns configuration data for running a custom operation over an
        advertisement
      description: >-
        Returns data to run a specific custom operation over an advertisement. The
        operation scope must be `advertisement`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/ad'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data used to run the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDataForRun'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/{ad}/operations/{operation}/run:
    post:
      operationId: runAdOperation
      summary: >-
        Runs a custom operation over an advertisement
      description: >-
        Runs a specific custom operation over a given advertisement. The operation
        scope must be `advertisement`. If the operation
        resulted in a file download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/ad'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The custom operation parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunOperation'

  /marketplace/{ad}/operations/{operation}/run-upload:
    post:
      operationId: runAdOperationWithUpload
      summary: >-
        Runs a custom operation over an advertisement while uploading a file
      description: >-
        Runs a specific custom operation over a given advertisement. The operation
        scope must be `advertisement`. This path allows
        uploading a file, by using a `multipart-form-data` post. If the operation
        resulted in a file download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/ad'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                params:
                  description: >-
                    The custom operation parameters.
                  allOf:
                    - $ref: '#/components/schemas/RunOperation'
                file:
                  type: string
                  format: binary
                  description: >-
                    The file being uploaded

  /records/{id}/operations:
    get:
      operationId: listOperationsByRecord
      summary: >-
        Lists the custom operations over the given record
      description: >-
        Returns the custom operations the authenticated user can run over the
        given record. All returned operations have the scope
        `record`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The list of custom operations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /records/{id}/operations/{operation}/data-for-run:
    get:
      operationId: getRecordOperationDataForRun
      summary: >-
        Returns configuration data for running a custom operation over a record
      description: >-
        Returns data to run a specific custom operation over a record. The
        operation scope must be `record`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data used to run the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDataForRun'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /records/{id}/operations/{operation}/run:
    post:
      operationId: runRecordOperation
      summary: >-
        Runs a custom operation over a record
      description: >-
        Runs a specific custom operation over a given record. The operation scope
        must be `record`. If the operation resulted in a
        file download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The custom operation parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunOperation'

  /records/{id}/operations/{operation}/run-upload:
    post:
      operationId: runRecordOperationWithUpload
      summary: >-
        Runs a custom operation over a record while uploading a file
      description: >-
        Runs a specific custom operation over a given record. The operation scope
        must be `record`. This path allows uploading a
        file, by using a `multipart-form-data` post. If the operation resulted in
        a file download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                params:
                  description: >-
                    The custom operation parameters.
                  allOf:
                    - $ref: '#/components/schemas/RunOperation'
                file:
                  type: string
                  format: binary
                  description: >-
                    The file being uploaded

  /transfers/{key}/operations:
    get:
      operationId: listOperationsByTransfer
      summary: >-
        Lists the custom operations over the given transfer
      description: >-
        Returns the custom operations the authenticated user can run over the
        given transfer. All returned operations have the scope
        `transfer`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number
          schema:
            type: string
      responses:
        '200':
          description: >-
            The list of custom operations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transfer/{key}/operations/{operation}/data-for-run:
    get:
      operationId: getTransferOperationDataForRun
      summary: >-
        Returns configuration data for running a custom operation over a transfer
      description: >-
        Returns data to run a specific custom operation over a transfer. The
        operation scope must be `transfer`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number
          schema:
            type: string
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data used to run the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDataForRun'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transfers/{key}/operations/{operation}/run:
    post:
      operationId: runTransferOperation
      summary: >-
        Runs a custom operation over a transfer
      description: >-
        Runs a specific custom operation over a given transfer. The operation
        scope must be `transfer`. If the operation
        resulted in a file download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number
          schema:
            type: string
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The custom operation parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunOperation'

  /transfers/{key}/operations/{operation}/run-upload:
    post:
      operationId: runTransferOperationWithUpload
      summary: >-
        Runs a custom operation over a transfer while uploading a file
      description: >-
        Runs a specific custom operation over a given transfer. The operation
        scope must be `transfer`. This path allows
        uploading a file, by using a `multipart-form-data` post. If the operation
        resulted in a file download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: key
          in: path
          required: true
          description: >-
            Either the id or transaction number
          schema:
            type: string
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                params:
                  description: >-
                    The custom operation parameters.
                  allOf:
                    - $ref: '#/components/schemas/RunOperation'
                file:
                  type: string
                  format: binary
                  description: >-
                    The file being uploaded

  /contact-list/{id}/operations:
    get:
      operationId: listOperationsByContact
      summary: >-
        Lists the custom operations over the given contact
      description: >-
        Returns the custom operations the authenticated user can run over the
        given contact. All returned operations have the scope
        `contact`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The list of custom operations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contact-list/{id}/operations/{operation}/data-for-run:
    get:
      operationId: getContactOperationDataForRun
      summary: >-
        Returns configuration data for running a custom operation over a contact
      description: >-
        Returns data to run a specific custom operation over a contact. The
        operation scope must be `contact`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data used to run the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDataForRun'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contact-list/{id}/operations/{operation}/run:
    post:
      operationId: runContactOperation
      summary: >-
        Runs a custom operation over a contact
      description: >-
        Runs a specific custom operation over a given contact. The operation scope
        must be `contact`. If the operation resulted in a
        file download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The custom operation parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunOperation'

  /contact-list/{id}/operations/{operation}/run-upload:
    post:
      operationId: runContactOperationWithUpload
      summary: >-
        Runs a custom operation over an contact while uploading a file
      description: >-
        Runs a specific custom operation over a given contact. The operation scope
        must be `contact`. This path allows uploading a
        file, by using a `multipart-form-data` post. If the operation resulted in
        a file download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                params:
                  description: >-
                    The custom operation parameters.
                  allOf:
                    - $ref: '#/components/schemas/RunOperation'
                file:
                  type: string
                  format: binary
                  description: >-
                    The file being uploaded

  /contact-infos/{id}/operations:
    get:
      operationId: listOperationsByContactInfo
      summary: >-
        Lists the custom operations over the given additional contact information
      description: >-
        Returns the custom operations the authenticated user can run over the
        given additional contact iformation. All returned operations have the
        scope `contactInfo`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The list of custom operations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contact-infos/{id}/operations/{operation}/data-for-run:
    get:
      operationId: getContactInfoOperationDataForRun
      summary: >-
        Returns configuration data for running a custom operation over an
        additional contact information
      description: >-
        Returns data to run a specific custom operation over an additional contact
        information. The operation scope must be
        `contactInfo`.
      tags:
        - Operations
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data used to run the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDataForRun'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contact-infos/{id}/operations/{operation}/run:
    post:
      operationId: runContactInfoOperation
      summary: >-
        Runs a custom operation over an additional contact information
      description: >-
        Runs a specific custom operation over a given additional contact
        information. The operation scope must be
        `contactInfo`. If the operation resulted in a
        file download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The custom operation parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunOperation'

  /contact-infos/{id}/operations/{operation}/run-upload:
    post:
      operationId: runContactInfoOperationWithUpload
      summary: >-
        Runs a custom operation over an additional contact information while
        uploading a file
      description: >-
        Runs a specific custom operation over a given additional contact
        information. The operation scope must be
        `contactInfo`. This path allows uploading a file,
        by using a `multipart-form-data` post. If the operation resulted in a file
        download (either because the `resultType` is
        `fileDownload` or is a
        `resultPage` running for either PDF or CSV)
        the resulting contente type will be of the file itself. Otherwise will
        result in an `application/json` with the result object.
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
        - name: operation
          description: >-
            Either the id or internal name of the custom operation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The custom operation result, either as `RunOperationResult` or as the
            file itself
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOperationResult'
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                params:
                  description: >-
                    The custom operation parameters.
                  allOf:
                    - $ref: '#/components/schemas/RunOperation'
                file:
                  type: string
                  format: binary
                  description: >-
                    The file being uploaded
  /nfc/{tokenType}/{value}:
    get:
      operationId: getNfcToken
      summary: >-
        Retrieve the NFC token detailed data
      description: >-
        Returns the token's data and the user owner of the token (i.e the assigned
        user, if any)
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: tokenType
          description: >-
            The internal name or id of the token type
          in: path
          required: true
          schema:
            type: string
        - name: value
          description: >-
            The token value
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            Returns the token data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDetailed'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nfc/external-auth:
    post:
      operationId: nfcExternalAuth
      summary: >-
        NFC external authentication
      description: >-
        The NFC tag will normally perform a mutual authentication, by first
        generating a challenge that must be encrypted by the external system with
        the device key. With this the external system is authenticated. Cyclos
        also returns a challenge that should be encrypted by the NFC tag. This
        challenge can later be passed in specific operations (for example, when
        performing a payment) for Cyclos to make sure the NFC tag is present on
        the operation.
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters: []
      responses:
        '200':
          description: >-
            Returns the challenge to be encrypted by the NFC tag in a subsequent
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NfcExternalAuthenticateResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            If a NFC external authentication error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NfcAuthError'
      requestBody:
        description: >-
          The parameters for the external authentication. If the `token` value is
          informed, it will be performed an external authentication with the token
          itself, using the Application Master Key (AMK). If the `token` is not
          informed, the authentication will be done using the PICC Master Key
          (PMK), which is useful, for example, when initializing the NFC tag.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NfcExternalAuthenticateParameter'

  /nfc/data-for-initialize:
    get:
      operationId: getNfcDataForInitialize
      summary: >-
        Returns data for NFC tag initialization. Optionally the user can
        personalize the tag too.
      description: >-
        Returns data with the NFC token types the authenticated user can use to
        initialize NFC tags.
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for NFC tag initialization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NfcDataForInitialize'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nfc/initialize:
    post:
      operationId: initializeNfc
      summary: >-
        Initializes a NFC tag
      description: >-
        Initializes a NFC tag, creating a new `token` in Cyclos. Returns the keys
        (PICC Master Key, Application Master Key and the Operational Key) to be
        stored on the NFC tag.
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters: []
      responses:
        '200':
          description: >-
            The data for NFC tag initialization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NfcInitializeResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            If a NFC tag inititalization error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitializeNfcError'
      requestBody:
        description: >-
          The parameters for initializing the NFC tag. If the `user` value is left
          blank, the NFC tag will be only initialized, but not personalized
          (assigned to any user). If a user is given, the permission to
          personalize is required (besides the permission to initialize), and is a
          shortcut to initializing and later personalizing the tag. The
          initialization is a sensitive operation, as the result contains the
          plain keys that should be stored on the NFC tag. Hence, can only be
          performed by managers (with granted permission). Later on, other users
          (for example, businesses) will be able to personalize the NFC tag for
          customers.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NfcInitializeParameter'

  /nfc/data-for-personalize:
    get:
      operationId: getNfcDataForPersonalize
      summary: >-
        Returns data for perfornalizing an initialized NFC tag for a user
      description: >-
        Returns data for personalizing a NFC tag for a given user.
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: tokenType
          in: query
          required: true
          description: >-
            The token type reference (id or internal name) of the token principal
            type, which is stored on the NFC card being personalized.
          schema:
            type: string
        - name: user
          in: query
          required: true
          description: >-
            The user reference (id or an identification method) of the user to
            whom the NFC tag will be personalized. When authenticated as a manager
            of that user (administrator or broker) no confirmation password will
            be required for the personalization. However, if the authenticated
            user is not a manager, the user will be required a confirmation
            password.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The data for NFC tag personalization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NfcDataForPersonalize'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nfc/personalize:
    post:
      operationId: personalizeNfc
      summary: >-
        Personalizes a NFC tag
      description: >-
        Personalization requires a NFC tag that was previously initialized, but is
        still unassigned. This operation doesn't store any key in the NFC tag
        itself, hence the plain keys are not returned. What is needed is an
        external authentication with the NFC tag, in order to ensure the card is
        physically present. The flow for personalizing a tag is: - `GET
        /nfc/data-for-personalize?user={user}`: Obtain the data for
          personalizing NFC tags for this user. The most important information
          is which the confirmation password will be required, if any;
        - `POST /nfc/external-auth`: With a challenge previously encrypted by
        the
          NFC tag, invoke this operation. If the challenge matches the NFC token
          in Cyclos, it will be encrypted and returned. Also a new challenge will
          be returned, which should be then encrypted by the NFC tag for later
          being sent back;
        - `POST /nfc/personalize`: With the encrypted challenge and the
          confirmation password (if any), this operation will update the NFC
          token in Cyclos, so it is now assigned to the specified user. From
          this point on, the NFC tag is operational.
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The NFC tag is personalized and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            If a NFC tag personalization error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizeNfcError'
      requestBody:
        description: >-
          The parameters for the initialization.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NfcPersonalizeParameter'

  /nfc/personalize/otp:
    post:
      operationId: getOtpForPersonalizeNfc
      summary: >-
        Generates a new One-Time-Password (OTP) for personalizing a NFC tag
      description: >-
        Sends a new OTP for the customer which will own the NFC tag. The OTP
        belongs to the NFC tag owner, not the authenticated user.
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - name: medium
          in: query
          required: true
          description: >-
            The medium the user wants to receive the otp
          schema:
            $ref: '#/components/schemas/SendMediumEnum'
      responses:
        '204':
          description: >-
            The OTP is sent to the user, and no content is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            There was an error when generating the OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpError'
      requestBody:
        description: >-
          The parameters identifying the token and the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NfcPersonalizeDataParameter'

  /nfc/personalize/device-confirmations:
    post:
      operationId: createDeviceConfirmationForPersonalizeNfc
      summary: >-
        Creates a pending device confirmation for personalizing a NFC tag.
      description: >-
        Creates a device confirmation for the customer which will own the NFC tag. The confirmation must be approved
        by the NFC tag owner, not the authenticated user, i.e the confirmation QR-code must be read (e.g with the Mobile
        App) by the customer. After the confirmation being processed the authenticated user will be notified.
      tags:
        - NFC
      parameters: []
      responses:
        '201':
          description: >-
            Returns the identifier of the new confirmation.
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters identifying the token and the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NfcPersonalizeDataParameter'

  /nfc/personalize/device-confirmations/{id}:
    get:
      operationId: viewDeviceConfirmationForPersonalizeNfc
      summary: >-
        Shows the details of a device confirmation that was created to confirm the personalize nfc-tag operation.
      description: >-
        Shows a device confirmation for the user which will own the NFC tag. The confirmation belongs to that user,
        not the authenticated user. The same parameters used for the creation must be sent for this operation too.
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - name: user
          description: >-
            The principal (id, login name,  etc) of the user who will own the tag.
            Note that a valid numeric value is always considered as id.
            For example, when using another identification method that can be
            numeric only, prefix the value with a single quote (like in Excel
            spreadsheets), for example, `'1234567890`.
          in: query
          required: true
          schema:
            type: string
        - name: type
          description: >-
            Either the identifier or internal name of fhe NFC token type
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The device confirmation details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceConfirmationView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      operationId: deleteDeviceConfirmationForPersonalizeNfc
      summary: >-
        Deletes a device confirmation that was created to confirm the personalize nfc-tag operation.
      description: >-
        Deletes a device confirmation for the user which will own the NFC tag. The confirmation belongs to that user,
        not the authenticated user. The same parameters used for the creation must be sent for this operation too.
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - name: user
          description: >-
            The principal (id, login name,  etc) of the user who will own the tag.
            Note that a valid numeric value is always considered as id.
            For example, when using another identification method that can be
            numeric only, prefix the value with a single quote (like in Excel
            spreadsheets), for example, `'1234567890`.
          in: query
          required: true
          schema:
            type: string
        - name: type
          description: >-
            Either the identifier or internal name of fhe NFC token type
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: >-
            The device confirmation was removed.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nfc/personalize/device-confirmations/{id}/qr-code:
    get:
      operationId: getDeviceConfirmationQrCodeForPersonalizeNfc
      summary: >-
        Returns the QR-code image for the given device confirmation only if it was
        not yet approved / rejected
      description: >-
        This request will return the image contents as expected but our
        api  documentation page (or any other usage of an &lt;img&gt; tag),
        created  using swagger-ui, generates a second request to include the image
        in the page. This new (GET) request won't send the authentication
        parameters and  as this path requires authentication the image will be
        shown as broken. Optionally, to solve the problem described above and to
        allow authenticate the user when using sessions, a `sessionToken` or
        `accessClientToken`  query parameter could be specified.
      tags:
        - NFC
      parameters:
        - $ref: '#/components/parameters/id'
        - name: user
          description: >-
            The principal (id, login name,  etc) of the user who will own the tag.
            Note that a valid numeric value is always considered as id.
            For example, when using another identification method that can be
            numeric only, prefix the value with a single quote (like in Excel
            spreadsheets), for example, `'1234567890`.
          in: query
          required: true
          schema:
            type: string
        - name: type
          description: >-
            Either the identifier or internal name of fhe NFC token type
          in: query
          required: true
          schema:
            type: string
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ImageSizeEnum'
      responses:
        '200':
          description: >-
            The image content
          content:
            image/png:
              schema:
                type: string
                format: binary
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nfc/cancel:
    post:
      operationId: cancelNfc
      summary: >-
        Cancels a NFC tag
      description: >-
        Cancels a NFC token. Must be authenticated as a manager (administrator /
        broker) of the token owner, and have the correct permission.
      tags:
        - NFC
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters: []
      responses:
        '204':
          description: >-
            The NFC tag is canceled and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for canceling.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NfcTokenParameter'
  /push/subscribe:
    get:
      operationId: subscribeForPushNotifications
      summary: >-
        Subscribes for receiving push notifications of specific types
      description: >-
        Returns an event stream of server-sent events
      tags:
        - Push
      parameters:
        - name: clientId
          in: query
          required: true
          description: >-
            An id generated by the client. This id is valid for the authenticated
            used, indicating a single session. As event streams can timeout and be
            reconnected, subsequent subscriptions with the same user and client id
            are considered the same subscription, and missed events since the last
            timeout will be immediately delivered. Missed events are enqueued up
            to a few minutes after the connection timeout. After that window, any
            enqueued events are discarded.
          schema:
            type: string
        - name: kinds
          in: query
          required: true
          description: >-
            The event kinds for which the client desires to subscribe
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PushNotificationEventKind'
        - name: accountIds
          in: query
          required: false
          description: >-
            When subscribing to `accountStatus`
            events, this parameter must be informed to select the accounts to be
            watched for.
          schema:
            type: array
            items:
              type: string
        - name: ticketNumber
          in: query
          required: false
          description: >-
            When subscribing to `ticket` events,
            this parameter can be used to filter which ticket to monitor.
          schema:
            type: string
        - name: lastEventId
          in: header
          required: false
          description: >-
            The last received event id, in case of reconnections. May also be
            passed as the standard header `Last-Event-ID`.
          schema:
            type: string
      responses:
        '200':
          description: >-
            The event stream
          content:
            text/event-stream:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ui/data-for-ui:
    get:
      operationId: dataForUi
      summary: >-
        Returns useful data required to properly display a user interface
      description: >-
        The returned data contains settings and also content like header, footer
        and theme.
      tags:
        - UI
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: kind
          in: query
          required: false
          description: >-
            Specifies the kind of user interface to get data for. If null then no
            data related to the UI will be returned.
          schema:
            $ref: '#/components/schemas/UiKind'
        - $ref: '#/components/parameters/cyclosVersion'
        - $ref: '#/components/parameters/headerIf'
        - $ref: '#/components/parameters/footerIf'
        - $ref: '#/components/parameters/themeIf'
        - $ref: '#/components/parameters/themeByComponents'
        - name: deviceId
          in: query
          required: false
          description: >-
            Trusted device identification. If given and the device is active then
            a pending device confirmation will be created that will be validated
            after the user logs-in. If the validation passes then no confirmation
            password will be used only for that session.
          schema:
            type: string
        - name: pinId
          in: query
          required: false
          description: >-
            Device PIN identification. If given then the information about whether it is active or not will be given in
            the returned `dataForLogin`.
          schema:
            type: string
      responses:
        '200':
          description: >-
            Returns the data for display a user interface
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataForUi'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /validate/email-change/{key}:
    parameters:
      - name: key
        required: true
        in: path
        description: >-
          The e-mail change validation key the user has received.
        schema:
          type: string
    post:
      operationId: validateEmailChange
      summary: >-
        Validate a pending e-mail change.
      description: >-
        When e-mail validation on change is enabled on the configuration, when a
        user changes their e-mail the new e-mail will not be immediately used.
        In this case, an e-mail is sent to the new e-mail address, with a link
        to validate it.
        That link should include the validation key, which should be sent to
        the Cyclos backend to actually validate the new e-mail. Only after this
        the new e-mail address will be effectively used in Cyclos.
      tags:
        - Validation
      responses:
        '200':
          description: >-
            If the e-mail change was validated correctly.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /validate/registration/{key}:
    parameters:
      - name: key
        required: true
        in: path
        description: >-
          The registration validation key the user has received.
        schema:
          type: string
    post:
      operationId: validateUserRegistration
      summary: >-
        Validate a pending user registration.
      description: >-
        Validate a pending user registration for the given validation key. After
        validating the registration is completed. However, the group configuration
        defines if the user is initially active or not.
      tags:
        - Validation
      responses:
        '200':
          description: >-
            The result of the validation. The resulting status only can be
            `active` or
            `inactive`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/registration/validate:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
    post:
      operationId: manuallyValidateUserRegistration
      summary: >-
        Manually validates a pending user / operator registration.
      description: >-
        Marks the user registration as validated. Can only be performed by a
        manager (admin / broker) of the pending user. The actual resulting
        user status depends on the group configuration.
        The user status must be `pending`.
      tags:
        - Validation
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The result of the e-mail validation. The resulting status only can
            be `active` or
            `inactive`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/registration/resend:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
    post:
      operationId: resendUserRegistrationEmail
      summary: >-
        Re-sends the e-mail to validate a pending user / operator registration.
      description: >-
        Sends the validation e-mail again.
        This operation has to be executed by the user manager (admin or broker).
        The user status must be `pending`.
      tags:
        - Validation
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The e-mail is sent and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/email-change/validate:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
    post:
      operationId: manuallyValidateEmailChange
      summary: >-
        Manually validates a pending e-mail change.
      description: >-
        If the user has a new e-mail address pending validation, this operation,
        which has to be executed by the user manager (admin or broker) marks the
        new e-mail address as validating, effectively changing the user's e-mail.
      tags:
        - Validation
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The new e-mail address is effectly used and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/email-change/resend:
    parameters:
      - $ref: '#/components/parameters/userNoSelf'
    post:
      operationId: resendEmailChangeEmail
      summary: >-
        Re-sends the e-mail to validate a pending e-mail change.
      description: >-
        Sends again the e-mail to the new user e-mail address.
        This operation has to be executed by the user manager (admin or broker).
      tags:
        - Validation
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The new e-mail address is effectly used and nothing is returned
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /localization/locales:
    get:
      operationId: getLocales
      summary: >-
        Returns the list of available locales, this collection is already sent in
        DataForUI or MobileBaseData.
      description: >-
        Returns the list of available locales.
      tags:
        - Localization
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '200':
          description: >-
            The list of available locales.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserLocale'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /localization/settings:
    post:
      operationId: saveLocalizationSettings
      summary: >-
        Saves the localization settings for the authenticated user.
      description: >-
        Saves the localization settings for the authenticated user such as the
        preferred language.
      parameters: []
      tags:
        - Localization
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The settings were saved
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The localization settings.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalizationSettings'
  /alerts/user:
    get:
      operationId: searchUserAlerts
      summary: >-
        Searches for user alerts.
      description: >-
        Searches for user alerts according to a give set of filters.
      tags:
        - Alerts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: brokers
          in: query
          required: false
          description: "Either the ids or identification methods the alert user's brokers"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: datePeriod
          in: query
          required: false
          description: "The minimum / maximum alert date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: groups
          in: query
          required: false
          description: "Either the ids or internal names of the alert user"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: types
          in: query
          required: false
          description: "The types of user alerts to search"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserAlertTypeEnum'
        - name: user
          in: query
          required: false
          description: "Either the id or identifier of the alert user"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The accounts with their statuses.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAlert'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /alerts/user/data-for-search:
    get:
      operationId: getUserAlertDataForSearch
      summary: >-
        Returns configuration data for searching user alerts.
      description: >-
        Returns configuration data for searching user alerts.
      tags:
        - Alerts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for searching user alerts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAlertDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/references/data-for-search:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getUserReferencesDataForSearch
      summary: >-
        Returns data for searching references of a specific user.
      description: >-
        Returns data for searching references of a specific user.
      tags:
        - References
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The configuration data for searching references
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReferenceDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/references:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: searchUserReferences
      summary: >-
        Searches for references of a specific user
      description: >-
        Returns references matching the search criteria, for a specific user.
      tags:
        - References
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: direction
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ReferenceDirectionEnum'
        - name: levels
          in: query
          required: false
          description: "The levels to filter"
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReferenceLevelEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: period
          in: query
          required: false
          description: "The minimum / maximum reference date"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: relatedUser
          in: query
          required: false
          description: "The user that either gave or received the reference to the user specified in the path. Should be either the id or some other allowed identification (login name, email, etc)."
          schema:
            type: string
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
      responses:
        '200':
          description: >-
            The references matching the search filters.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserReferenceResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/references/statistics:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getUserReferenceStatistics
      summary: >-
        Returns statistics for a given user references.
      description: >-
        Returns statistics for a given user references.
      tags:
        - References
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: direction
          in: query
          required: false
          description: >-
            Whether to return statistics on received or given references.
            When not specified, defaults to received.
          schema:
            $ref: '#/components/schemas/ReferenceDirectionEnum'
        - name: periods
          description: >-
            The requested periods for statistics. The result will have the
            `periods` field corresponding to the input periods. When not
            specified, the default is to return 2 periods: all time and
            last 30 days. The maximum allowed number of periods is 5.
            Each period can either be:


            - Single date: in ISO 8601 format, from that date and up.
              Example: `2019-10-30`;

            - 2 dates, split by pipe: Both in ISO 8601 format, specifying
              a period range. Example: `2019-10-01|2019-12-31T23:59:59.999`.
          in: query
          required: false
          schema:
            type: array
            items:
              type: string

      responses:
        '200':
          description: >-
            The reference statistics for the requested periods.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceStatistics'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{from}/reference/{to}/data-for-set:
    parameters:
      - name: from
        required: true
        in: path
        x-dotInPath: true
        schema:
          type: string
        description: >-
          The user that will give the reference. Can be `self` for the currently
          authenticated user, or the id or some other allowed identifier (login
          name, e-mail, etc).
      - name: to
        required: true
        in: path
        x-dotInPath: true
        schema:
          type: string
        description: >-
          The user that will receive the reference. Can be the id or some other
          allowed identifier (login name, e-mail, etc).
    get:
      operationId: getReferenceDataForSet
      summary: >-
        Returns details for setting a reference.
      description: >-
        Returns details for setting a reference.
      tags:
        - References
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            Contains data for setting the reference, as well as the current
            value, if any.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceDataForSet'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{from}/reference/{to}:
    parameters:
      - name: from
        required: true
        in: path
        x-dotInPath: true
        schema:
          type: string
        description: >-
          The user that will give the reference. Can be `self` for the currently
          authenticated user, or the id or some other allowed identifier (login
          name, e-mail, etc).
      - name: to
        required: true
        in: path
        x-dotInPath: true
        schema:
          type: string
        description: >-
          The user that will receive the reference. Can be the id or some other
          allowed identifier (login name, e-mail, etc).
    post:
      operationId: setReference
      summary: >-
        Creates or changes the reference between the given users.
      description: >-
        Creates or changes the reference between the given users.
      tags:
        - References
      responses:
        '201':
          description: >-
            Returns the identifier of the created / modified reference
          headers:
            Location:
              description: >-
                URL for viewing the reference details
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The reference details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferenceSet'

  /references/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: viewReference
      summary: >-
        Returns details of a specific reference.
      description: >-
        Returns details of a specific reference.
      tags:
        - References
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The reference details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateReference
      summary: >-
        Updates an existing reference.
      description: >-
        Updates an existing reference.
      tags:
        - References
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The reference is updated and nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The reference details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferenceSet'
    delete:
      operationId: deleteReference
      summary: >-
        Removes a reference
      description: >-
        Removes a reference
      tags:
        - References
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The reference was deleted
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /references/{id}/data-for-edit:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: getReferenceDataForEdit
      summary: >-
        Returns data to edit an existing reference.
      description: >-
        Returns configuration data for editing a reference, plus the current
        `ReferenceSet` object that can be altered and sent back.
      tags:
        - References
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for editing a reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceDataForSet'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /marketplace/data-for-search:
    get:
      operationId: getAdDataForSearch
      summary: >-
        Returns configuration data for searching advertisements.
      description: >-
        Returns data needed on for a general advertisements search.
      tags:
        - Marketplace
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: kind
          in: query
          required: false
          description: >-
            Indicates the kind of advertisement that should be searched. When
            nothing is passed (default) all kinds will be searched.
          schema:
            $ref: '#/components/schemas/AdKind'
        - name: brokered
          description: >-
            If the authenticated is a broker, passing the `true` value will
            indicate the advertisements to be searched are from managed users of
            that broker. The default is `false`.
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: >-
            The configuration data for advertisements search.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace:
    get:
      operationId: searchAds
      summary: >-
        Searches for advertisements.
      description: >-
        Returns a page of advertisements that match a given criteria.
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: addressResult
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AdAddressResultEnum'
        - name: broker
          in: query
          required: false
          description: "DEPRECATED. Use `brokers` instead."
          schema:
            type: string
        - name: brokers
          in: query
          required: false
          description: "Either ids or an identifications, such as login name, e-mail, etc, for the brokers of the advertisement owner. Can only be used when searching with a broker himself or admin."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: category
          in: query
          required: false
          description: "Either id or internal name of a category"
          schema:
            type: string
        - name: currency
          in: query
          required: false
          description: "Either id or internal name of a currency for the price"
          schema:
            type: string
        - name: customFields
          in: query
          required: false
          description: "Advertisement custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: expirationPeriod
          in: query
          required: false
          description: "The minimum / maximum expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: groups
          in: query
          required: false
          description: "Array of either id or internal names of user groups the advertisement owner must belong to"
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: hasImages
          in: query
          required: false
          description: "When set to `true` only advertisements with images are returned"
          schema:
            type: boolean
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: kind
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AdKind'
        - name: latitude
          in: query
          required: false
          description: "The reference latitude for distance searches"
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          required: false
          description: "The reference longitude for distance searches"
          schema:
            type: number
            format: double
        - name: maxDistance
          in: query
          required: false
          description: "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position."
          schema:
            type: number
            format: double
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AdOrderByEnum'
        - name: owner
          in: query
          required: false
          description: "Either id or an identification, such as login name, e-mail, etc, for the advertisement owner. The allowed identification methods are those the authenticated user can use on keywords search."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: priceRange
          in: query
          required: false
          description: "The minumum / maximum price. Used only if a currency is specified. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: productNumber
          in: query
          required: false
          description: "Textual search for a product number for webshop only."
          schema:
            type: string
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: publicationPeriod
          in: query
          required: false
          description: "The minimum / maximum publication date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: returnEditable
          in: query
          required: false
          description: "Whether to return the editable property. Passing `true` will impact the performance a bit, as for each returned advertisement some statuses and permissions need to be checked."
          schema:
            type: boolean
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AdStatusEnum'
      tags:
        - Marketplace
      responses:
        '200':
          description: >-
            The advertisements matching the criteria.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/marketplace/data-for-search:
    get:
      operationId: getUserAdsDataForSearch
      summary: >-
        Returns configuration data for searching advertisements of a user.
      description: >-
        Returns data needed on for a user's advertisements search.
      tags:
        - Marketplace
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: kind
          in: query
          required: false
          description: >-
            Indicates the kind of advertisement that should be searched. When
            nothing is passed (default) all kinds will be searched.
          schema:
            $ref: '#/components/schemas/AdKind'
      responses:
        '200':
          description: >-
            The configuration data for this user's advertisements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdsDataForSearch'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/marketplace/data-for-new:
    get:
      operationId: getAdDataForNew
      summary: >-
        Returns configuration data for creating a new advertisement for a user and
        kind.
      description: >-
        Returns data for creating a new advertisement for the given user. The
        `kind` should be informed. If not set, `simple` is assumed.
        Currently only `simple` advertisements can be created through
        this API.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: basedOnId
          in: query
          required: false
          description: >-
            Indicates the advertisement id to be based on by copying some data (e.g publication period) to the new advertisement.
          schema:
            type: string
        - name: kind
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AdKind'
      tags:
        - Marketplace
      responses:
        '200':
          description: >-
            The data for creating a new advertisement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/marketplace:
    get:
      operationId: searchUserAds
      summary: >-
        Searches for advertisements of a specific user.
      description: >-
        Returns a page of advertisements that match a given criteria for a
        given  user. Equivallent to calling `GET /marketplace?owner={user}`.
      parameters:
        - $ref: '#/components/parameters/user'
        - name: addressResult
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AdAddressResultEnum'
        - name: category
          in: query
          required: false
          description: "Either id or internal name of a category"
          schema:
            type: string
        - name: currency
          in: query
          required: false
          description: "Either id or internal name of a currency for the price"
          schema:
            type: string
        - name: customFields
          in: query
          required: false
          description: "Advertisement custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: expirationPeriod
          in: query
          required: false
          description: "The minimum / maximum expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: hasImages
          in: query
          required: false
          description: "When set to `true` only advertisements with images are returned"
          schema:
            type: boolean
        - name: keywords
          in: query
          required: false
          description: "Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products."
          schema:
            type: string
        - name: kind
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AdKind'
        - name: latitude
          in: query
          required: false
          description: "The reference latitude for distance searches"
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          required: false
          description: "The reference longitude for distance searches"
          schema:
            type: number
            format: double
        - name: maxDistance
          in: query
          required: false
          description: "Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position."
          schema:
            type: number
            format: double
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AdOrderByEnum'
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: priceRange
          in: query
          required: false
          description: "The minumum / maximum price. Used only if a currency is specified. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: number
        - name: productNumber
          in: query
          required: false
          description: "Textual search for a product number for webshop only."
          schema:
            type: string
        - name: profileFields
          in: query
          required: false
          description: "User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.

The basic profile fields have one of the following identifiers:

- `name` or `fullName`: Full name;
- `username`, `loginName` or `login`: Login name;
- `email`: E-mail;
- `phone`: Phone;
- `accountNumber`, `account`: Account number;
- `image`: Image (accepts a boolean value, indicating that either
  it is required that users either have images or not).


If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request.
The specific address fields are:

- `address`: Searches on any address field (not a specific field);
- `address.address`: Searches on the fields that represent the
  street address, which are `addressLine1`,
  `addressLine2`,
  `street`,
  `buildingNumber` and
  `complement`.
  Note that normally only a subset of them should be enabled in the
  configuration (either line 1 / 2 or street + number + complement);

- `address.zip`: Searches for matching zip (postal) code;
- `address.poBox`: Searches for matching postal box;
- `address.neighborhood`: Searches by neighborhood;
- `address.city`: Searches by city;
- `address.region`: Searches by region (or state);
- `address.country`: Searches by ISO 3166-1 alpha-2 country code.
A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
        - name: publicationPeriod
          in: query
          required: false
          description: "The minimum / maximum publication date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AdStatusEnum'
      tags:
        - Marketplace
      responses:
        '200':
          description: >-
            The advertisements matching the criteria.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createAd
      summary: >-
        Creates a new advertisement for the given user.
      description: >-
        Creates a new advertisement for the given user.
      tags:
        - Marketplace
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '201':
          description: >-
            Returns the identifier of the new advertisement.
          headers:
            Location:
              description: >-
                URL for viewing the advertisement details.
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The advertisement to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdNew'

  /marketplace/{ad}/data-for-edit:
    get:
      operationId: getAdDataForEdit
      summary: >-
        Returns configuration data for editing an advertisement.
      description: >-
        Returns configuration data which can be used to edit an advertisement.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/ad'
      tags:
        - Marketplace
      responses:
        '200':
          description: >-
            The data for editing an advertisement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/{ad}:
    get:
      operationId: viewAd
      summary: >-
        Returns details of an advertisement.
      description: >-
        Returns detailed information of an advertisement.
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/ad'
      tags:
        - Marketplace
      responses:
        '200':
          description: >-
            The advertisement details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateAd
      summary: >-
        Updates an existing advertisement.
      description: >-
        Updates an existing advertisement.
      tags:
        - Marketplace
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '204':
          description: >-
            The advertisement was updated
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The advertisement to be edited.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdEdit'
    delete:
      operationId: deleteAd
      summary: >-
        Removes an advertisement.
      description: >-
        Removes an advertisement by id.
      tags:
        - Marketplace
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '204':
          description: >-
            The advertisement was removed.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/{ad}/hide:
    post:
      operationId: hideAd
      summary: >-
        Hides an advertisement by id.
      description: >-
        Hides an advertisement thus making it visible only for the owner and its managers.
      tags:
        - Marketplace
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '204':
          description: >-
            The advertisement was hidden.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/{ad}/unhide:
    post:
      operationId: unhideAd
      summary: >-
        Unhides an advertisement by id.
      description: >-
        Unhides an advertisement thus making it visible for other members.
      tags:
        - Marketplace
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '204':
          description: >-
            The advertisement was unhidden.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/{ad}/set-as-draft:
    post:
      operationId: setAdAsDraft
      summary: >-
        Change the advertisement status to `draft`.
      description: >-
        Change the advertisement status to `draft` thus making it only visible for the owner.
      tags:
        - Marketplace
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '204':
          description: >-
            The advertisement status was changed.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The comments for the action.
          Only if the authenticated user is a manager of the advertisement's owner with permissions to manage pending ads.
        required: false
        content:
          text/plain:
            schema:
              type: string

  /marketplace/{ad}/request-authorization:
    post:
      operationId: submitAdForAuthorization
      summary: >-
        Request for authorization for an advertisement.
      description: >-
        Request for authorization for an advertisement.
        Only if the system is configured to require authorizations and the
        authenticated user is the owner of the advertisement. The advertisement
        will remain in status `pending` until approved
        or rejected.
      tags:
        - Marketplace
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '204':
          description: >-
            The advertisement was submitted for authorization.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/{ad}/approve:
    post:
      operationId: approveAd
      summary: >-
        Approves a pending advertisement.
      description: >-
        Change the advertisement status from `pending` to
        `active`, making it publcly visible.
      tags:
        - Marketplace
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '204':
          description: >-
            The advertisement status was changed.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/{ad}/reject:
    post:
      operationId: rejectAd
      summary: >-
        Rejects a pending advertisement.
      description: >-
        Change the advertisement status from `pending` to
        `draft`, making it visible only to its owner.
        A comment text is set in the request body.
      tags:
        - Marketplace
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '204':
          description: >-
            The advertisement status was changed.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The comments for the action.
        required: false
        content:
          text/plain:
            schema:
              type: string

  /marketplace/{ad}/questions:
    post:
      operationId: createAdQuestion
      summary: >-
        Creates a new advertisement question.
      description: >-
        Creates a new question for an advertisement and associate it to
        the  authenticated user.
      tags:
        - AdQuestions
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '201':
          description: >-
            Returns the identifier of the new question.
          headers:
            Location:
              description: >-
                URL for viewing the advertisement question details.
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string

  /questions/{id}:
    get:
      operationId: getAdQuestion
      summary: >-
        Returns details of an advertisement question.
      description: >-
        Return detailed information of an advertisement question.
      tags:
        - AdQuestions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            Returns the advertisement question information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdQuestionView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteAdQuestion
      summary: >-
        Removes an advertisement question.
      description: >-
        Removes an advertisement question created for the authenticated user.
      tags:
        - AdQuestions
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: >-
            The advertisement question was removed.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /shopping-carts:
    get:
      operationId: getShoppingCarts
      summary: >-
        Returns the shopping carts list.
      description: >-
        Returns the shopping carts for the authenticated user. Each cart
        contains  all webshop ads offered by the same seller and in the same
        currency.
      tags:
        - ShoppingCarts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The shopping carts list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingCartResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-carts/{id}:
    get:
      operationId: getShoppingCartDetails
      summary: >-
        Returns details of a shopping cart.
      description: >-
        Returns the details of a shopping cart by id with all webshop ads offered
        by the same seller and in the same currency.
      tags:
        - ShoppingCarts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The shopping cart details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: removeShoppingCart
      summary: >-
        Removes a shopping cart.
      description: >-
        Removes the given shopping cart by id and returns the total number of the
        webshop ads in the remaining all carts.
      tags:
        - ShoppingCarts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The shopping cart was removed. Returns the total number of the webshop
            ads in all the remaining shopping carts.
          content:
            application/json:
              schema:
                type: integer
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-carts/{id}/adjust:
    post:
      operationId: adjustAndGetShoppingCartDetails
      summary: >-
        Adjusts a shopping cart items, returning its details.
      description: >-
        Works like `GET /shopping-carts/{id}`, but first adjusts the status of all
        items. For each item checks both the availability and the quantity,
        setting to corresponding `availability` or `quantityAdjustment` property
        if anything was modified.
      tags:
        - ShoppingCarts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The shopping cart details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-carts/items/{ad}:
    post:
      operationId: addItemToShoppingCart
      summary: >-
        Adds the given webshop ad to the corresponding shopping cart.
      description: >-
        Adds the given webshop ad to the corresponding shopping cart according to
        the seller and currency and returns the total number of webshop ads in all
        carts. Optionally a quantity can be specified. The different shopping
        carts are created dynamically according to the seller and currency.

        E.g if the user adds the following webshop ads (i.e items):

        - 1 from Seller1 in Dolars;

        - 2 from Seller1 in Euros;

        - 1 from Seller2 un Dolars.


        Then the following three carts will be created for the authenticated
        user:


        - 1 cart containing 1 item offered by Seller1 in Dolars;

        - 1 cart containing 2 items offered by Seller1 in Euros;

        - 1 cart containing 1 item offered by Seller2 in Dolars.


        Finally, the total number of wbshop ads returned will be 4. For those
        quantity-limited products the given quantity could have been adjusted to
        meet the restrictions. You can view the adjustment applied to each item
        when retrieving the details of a shopping cart. if you want to remove the
        adjustment just send a new request to modify the quantity (using `PUT
        /shopping-carts/items/{ad}`) and specify the current quantity (i.e the
        already adjusted and returned in the details of the shopping cart) as the
        parameter.
      tags:
        - ShoppingCarts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/ad'
        - name: quantity
          in: query
          required: false
          description: >-
            The quantity being added. It could be a decimal number only if
            the  corresponding webshop ad allows it.
          schema:
            type: number
            format: double
      responses:
        '200':
          description: >-
            Returns the total number of webshop ads present in all the  shopping
            carts.
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            If an error has occurred adding the webshop ad to the cart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartError'
    delete:
      operationId: removeItemFromShoppingCart
      summary: >-
        Removes the given webshop ad from the corresponding shopping cart.
      description: >-
        Removes the given webshop ad from the corresponding shopping cart
        according to the seller and currency and returns the total number of the
        remaining webshop ads in all carts.
      tags:
        - ShoppingCarts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/ad'
      responses:
        '200':
          description: >-
            The webshop ad was removed from the shopping cart. Returns the total
            number of the remaining webshop ads in all the shopping carts.
          content:
            application/json:
              schema:
                type: integer
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: modifyItemQuantityOnShoppingCart
      summary: >-
        Modifies the corresponding cart with the new quantity for the given
        webshop ad.
      description: >-
        Modifies the corresponding shopping cart with the new quantity for
        the  given webshop ad only if it was already added to the cart of the
        authenticted user and returns the total number of webshop ads in all
        carts. For those quantity-limited products the given quantity could have
        been  adjusted to met the restrictions. You can view the adjustment
        applied to  each item when retrieving the details of a shopping cart. if
        you want to  remove the adjustment just send a new request to modify the
        quantity  and specify the current quantity (i.e the already adjusted and
        returned  in the details of the shopping cart) as the parameter.
      tags:
        - ShoppingCarts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/ad'
        - name: quantity
          in: query
          required: true
          description: >-
            The new quantity for the given webshop ad. It could be a
            decimal  number only if the corresponding webshop ad allows it. If
            zero then the webshop ad is removed from the cart.
          schema:
            type: number
            format: double
      responses:
        '200':
          description: >-
            The quantity for the given webshop was updated.  Returns the total
            number of webshop ads present in all the shopping  carts.
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            If an error has occurred modifying the quantity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartError'

  /shopping-carts/{id}/data-for-checkout:
    get:
      operationId: getShoppingCartDataForCheckout
      summary: >-
        Returns configuration data for check-out a shopping cart.
      description: >-
        Returns configuration data for check-out the given shopping cart by id.
      tags:
        - ShoppingCarts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: >-
            The configuration data for check-out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartDataForCheckout'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-carts/{id}/checkout:
    post:
      operationId: checkoutShoppingCart
      summary: >-
        Checks out a shopping cart.
      description: >-
        Checks out the given shopping cart associated to the authenticated user.
        After the check-out the purchase order will be awaiting for the
        seller's  acceptance (i. e with status
        `pendingSeller`).
      tags:
        - ShoppingCarts
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '200':
          description: >-
            The shopping cart was cheked out. Returns the total number of the
            webshop ads in all the remaining shopping carts. The id of the
            purchase order is not returned because is the same as the id of the
            given shopping cart but a header with the url to view the details
            does.
          headers:
            Location:
              description: >-
                URL for viewing the order details.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            If an error has occurred in the check-out process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartCheckoutError'
      requestBody:
        description: >-
          The data for check-out.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingCartCheckout'
  /{user}/orders:
    get:
      operationId: searchUserOrders
      summary: >-
        Searches for orders of a specific user.
      description: >-
        Returns a page of orders that match a given criteria for a given user. The
        authenticated user must be the seller, buyer or a manager user with
        permission to view purchases or sales. A list of statuses is accepted but
        at this moment only one status can be specified.
      tags:
        - Orders
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/user'
        - name: creationPeriod
          in: query
          required: false
          description: "The minimum / maximum order creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma."
          style: simple
          schema:
            type: array
            items:
              description: ''
              type: string
              format: date-time
        - name: number
          in: query
          required: false
          description: "The generated order number according to the webshop settings."
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "The page number (zero-based) of the search. The default value is zero."
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          required: false
          description: "The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting."
          schema:
            type: integer
            format: int32
        - name: productNumber
          in: query
          required: false
          description: "The product number (with the mask if there is one) of an advertisement contained in the orders."
          schema:
            type: string
        - name: relatedUser
          in: query
          required: false
          description: "Either id or an identification, such as login name, e-mail, etc, for the seller or buyer according whether we are searching for purchases or sales. The allowed identification methods are those the authenticated user can use on keywords search."
          schema:
            type: string
        - name: sales
          in: query
          required: false
          description: "Are we searching for sales or purchases? If not specified it's assumed purchases (i.e `false`)"
          schema:
            type: boolean
        - name: skipTotalCount
          in: query
          required: false
          description: "When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit."
          schema:
            type: boolean
        - name: statuses
          in: query
          required: false
          description: ''
          style: simple
          schema:
            type: array
            items:
              $ref: '#/components/schemas/OrderStatusEnum'
      responses:
        '200':
          description: >-
            The orders matching the criteria.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: >-
                The total number of results. It may be configured in Cyclos to skip the
                total count, which is useful on large databases, where the count itself
                may use a lot of resources from the database. If disabled, this header is
                not returned.
            X-Page-Size:
              schema:
                type: integer
              description: >-
                The maximum number of results per page
            X-Current-Page:
              schema:
                type: integer
              description: >-
                The current page the results are in
            X-Has-Next-Page:
              schema:
                type: boolean
              description: >-
                Returns whether there is a next page. This is normally always returned,
                whether total count is enabled or not. If the total count is not returned,
                is the only way for clients to know whether more results are available or
                not.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOrderResult'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{order}:
    get:
      operationId: viewOrder
      summary: >-
        Returns details of an order.
      description: >-
        Returns detailed information of an order given by id.
      tags:
        - Orders
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: >-
            The order details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{order}/seller/data-for-set-delivery:
    get:
      operationId: getDataForSetDeliveryMethod
      summary: >-
        Returns configuration data to set delivery method data by seller.
      description: >-
        Returns configuration data to set delivery method data by seller of an
        order given by id.
      tags:
        - Orders
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: >-
            The configuration data for set he delivery method.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDataForSetDeliveryMethod'
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'

  /orders/{order}/seller/set-delivery:
    post:
      operationId: setDeliveryMethod
      summary: >-
        Sets delivery method data by seller.
      description: >-
        Sets the delivery method data by seller for the order given by id. This
        operation can be used only if the order is in status
        `pendingSeller` and has not already set delivery
        method data. After the delivery method has been set the order will be
        enter in status `pendingBuyer` to be accepted by
        buyer.
      tags:
        - Orders
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/order'
      responses:
        '204':
          description: >-
            The delivery method was set by seller. Nothing is returned.
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The parameters for setting the delivery method.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDeliveryMethod'

  /orders/{order}/buyer/data-for-accept:
    get:
      operationId: getOrderDataForAcceptByBuyer
      summary: >-
        Returns configuration data for accept an order by buyer.
      description: >-
        Returns configuration data for accept an order given by id as the buyer.
      tags:
        - Orders
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: >-
            The configuration data for accept the order as the buyer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDataForAcceptByBuyer'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{order}/buyer/accept:
    post:
      operationId: acceptOrderByBuyer
      summary: >-
        Accepts a pending order by buyer.
      description: >-
        Accepts a pending order by buyer generating the corresponding payment. The
        order status must be `pendingBuyer` to be accepted
        by the authenticated user (i.e the buyer).

        The `paymentType` and the `confirmationPassword` are required under the
        following circumstances:

        `paymentType`: Only required if the order was generated as a sale by
        the  seller and not from the shopping cart check-out (Sales are not
        supported yet).

        `confirmationPassword`: Only required if at check-out a delivery
        method was not set or its charge type is `negotiatied`.

        The possible statuses after an order acceptance are: -
        `paymentPending`: if the generated payment is
        awaiting authorization; - `completed`: if the
        payment was done.
      tags:
        - Orders
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/confirmationPassword'
      responses:
        '204':
          description: >-
            The order was accepted by the buyer. Nothing is returned.
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The parameters for accepting the order.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptOrderByBuyer'

  /orders/{order}/seller/accept:
    post:
      operationId: acceptOrderBySeller
      summary: >-
        Accepts a pending order by seller.
      description: >-
        Accepts a pending order by seller generating the corresponding payment.
        The order status must be `pendingSeller` to be
        accepted by the authenticated user (i.e seller). The possible statuses
        after order acceptance are:

        - `paymentPending`: if the generated payment is
        awaiting for authorization; - `completed`: if
        the payment was done.
      tags:
        - Orders
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/order'
      responses:
        '204':
          description: >-
            The order was accepted by seller. Nothing is returned.
        '500':
          description: >-
            If a payment error has occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
      requestBody:
        description: >-
          The parameters for accepting the order.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptOrderBySeller'

  /orders/{order}/reject:
    post:
      operationId: rejectOrder
      summary: >-
        Rejects a pending order.
      description: >-
        Rejects a pending order by buyer or seller. The order status must be
        `pendingBuyer` or
        `pendingSeller` to be rejected by the authenticated
        user (buyer/seller). The possible statuses after an order rejection
        are:

        - `rejectedBySeller`: if the authenticated user
        is the seller; - `rejectedByBuyer`: if the
        authenticated user is the buyer.
      tags:
        - Orders
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/order'
      responses:
        '204':
          description: >-
            The order was rejected by the authenticated user. Nothing is returned.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The parameters for rejecting the order.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectOrder'
  /{user}/delivery-methods/list-data:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getUserDeliveryMethodsListData
      summary: >-
        Returns data for webshop delivery methods listing of the given user.
      description: >-
        Returns the user webshop delivery methods, plus additional data
        related to them.
      tags:
        - DeliveryMethods
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for listing webshop delivery methods
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeliveryMethodsListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/delivery-methods/data-for-new:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getDeliveryMethodDataForNew
      summary: >-
        Returns data for creating a new webshop delivery method for a given user.
      description: >-
        Returns data for creating a new webshop delivery method for a given user.
      tags:
        - DeliveryMethods
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for creating a new webshop delivery method.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryMethodDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/delivery-methods:
    parameters:
      - $ref: '#/components/parameters/user'
    post:
      operationId: createDeliveryMethod
      summary: >-
        Creates a new webshop delivery method for a given user.
      description: >-
        Creates a new webshop delivery method for a given user.
      tags:
        - DeliveryMethods
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '201':
          description: >-
            Returns the identifier of the new delivery method.
          headers:
            Location:
              description: >-
                URL for viewing the delivery method details.
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The delivery method to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryMethodNew'

  /delivery-methods/{id}/data-for-edit:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: getDeliveryMethodDataForEdit
      summary: >-
        Returns data for modifying a webshop delivery method.
      description: >-
        Returns data for modifying a webshop delivery method.
      tags:
        - DeliveryMethods
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The webshop delivery method data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryMethodDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /delivery-methods/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: viewDeliveryMethod
      summary: >-
        Returns details of a webshop delivery method.
      description: >-
        Returns details of a webshop delivery method.
      tags:
        - DeliveryMethods
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The webshop delivery method data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryMethodView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateDeliveryMethod
      summary: >-
        Updates an existing webshop delivery method.
      description: >-
        Updates an existing webshop delivery method.
      tags:
        - DeliveryMethods
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The webshop delivery method was updated.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The webshop delivery method to be edited.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryMethodEdit'
    delete:
      operationId: deleteDeliveryMethod
      summary: >-
        Removes a webshop delivery method.
      description: >-
        Removes a webshop delivery method.
      tags:
        - DeliveryMethods
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The webshop delivery method was removed.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /{user}/webshop-settings:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: viewWebshopSettings
      summary: >-
        Returns the webshop settings for a given user.
      description: >-
        Returns the webshop settings for a given user.
      tags:
        - WebshopSettings
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The webshop settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebshopSettingsView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateWebshopSettings
      summary: >-
        Updates a user's webshop settings.
      description: >-
        Updates a user's webshop settings.
      tags:
        - WebshopSettings
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The webshop settings were updated.
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The new webshop settings
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebshopSettings'
  /{user}/marketplace-interests/list-data:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getUserAdInterestsListData
      summary: >-
        Returns data for advertisement interests listing of the given user.
      description: >-
        Returns data for advertisement interests listing of the given user.
      tags:
        - AdInterests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for listing advertisement interests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdInterestsListData'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/marketplace-interests/data-for-new:
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      operationId: getAdInterestDataForNew
      summary: >-
        Returns data for creating a new advertisement interest for a given user.
      description: >-
        Returns data for creating a new advertisement interest for a given user.
      tags:
        - AdInterests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The data for creating a new advertisement interest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdInterestDataForNew'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{user}/marketplace-interests:
    parameters:
      - $ref: '#/components/parameters/user'
    post:
      operationId: createAdInterest
      summary: >-
        Creates a new advertisement interest for a given user.
      description: >-
        Creates a new advertisement interest for a given user.
      tags:
        - AdInterests
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '201':
          description: >-
            Returns the identifier of the new advertisement interest.
          headers:
            Location:
              description: >-
                URL for viewing the advertisement interest details.
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The advertisement interest to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdInterestNew'

  /marketplace-interests/{id}/data-for-edit:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: getAdInterestDataForEdit
      summary: >-
        Returns data for modifying an advertisement interest.
      description: >-
        Returns data for modifying an advertisement interest.
      tags:
        - AdInterests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The advertisement interest data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdInterestDataForEdit'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace-interests/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: viewAdInterest
      summary: >-
        Returns details of an advertisement interest.
      description: >-
        Returns details of an advertisement interest.
      tags:
        - AdInterests
      security:
        - basic: []
        - session: []
        - accessClient: []
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: >-
            The advertisement interest data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdInterestView'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateAdInterest
      summary: >-
        Updates an existing advertisement interest.
      description: >-
        Updates an existing advertisement interest.
      tags:
        - AdInterests
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The advertisement interest was updated.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: >-
            Input error. Either a validation error or the maximum allowed items was
            exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: >-
          The advertisement interest to be edited.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdInterestEdit'
    delete:
      operationId: deleteAdInterest
      summary: >-
        Removes an advertisement interest.
      description: >-
        Removes an advertisement interest.
      tags:
        - AdInterests
      security:
        - basic: []
        - session: []
        - accessClient: []
      responses:
        '204':
          description: >-
            The advertisement interest was removed.
        '409':
          description: >-
            This operation expected an entity state, but it has resulted in a conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '401':
          description: >-
            Unauthorized access. Missing or invalid crendentials supplied for such
            operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Permission denied for such operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: >-
            An expected data was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:

  securitySchemes:

    basic:
      type: http
      scheme: basic
      description: >-
          User and password, which are sent on every request (stateless).
          The user identification, commonly referred as principal, can be,
          according to the settings in Cyclos:


          - Login name;


          - E-mail;


          - Mobile phone;


          - Account number;


          - Custom field (fields configured as principal type in Cyclos);


          - Pin (see below for more details).



          There is a configuration in Cyclos, under System > Configurations >
          Channels (tab) > Channel that specifies which identification methods
          (principal types) are allowed for that channel. There is also a setting
          for the default. When a specific principal type is not given, if
          there is a 'Default user identification method', that one is used. If
          there's no default, all possible principal types are attempted.



          To specify the principal type, set the HTTP header `Principal-Type`,
          containing the principal type internal name. If there is a default
          set in the channel configuration, but still you want all types to be
          attempted, pass `*` in the `Principal-Type` header.



          It is also possible to access with a device PIN. To do so, first activate
          a device PIN, which will result in both a PIN principal value (identifier)
          and a cryptographic salt. Then, to authenticate as PIN, set the
          `Principal-Type` header to `#` and send the `Authorization` header with
          value: `Basic base64(principal:salt+PIN)`.


    session:
      type: apiKey
      name: Session-Token
      in: header
      description: >-
        A steteful access, using a session token as obtained from a call to `POST
        /auth/session`. That token is then passed in on every request. The POST
        request itself must be called using the `basic` authentication to set the
        user and password. The authenticated user can then be seen on Cyclos in
        the connected users functionality.

    accessClient:
      type: apiKey
      name: Access-Client-Token
      in: header
      description: >-
        Access via an access client token, which is obtained when the client is
        activated. This token is passed in as a header on every request
        (stateless).

  parameters:

    page:
      name: page
      required: false
      in: query
      schema:
        type: integer
      description: >-
        The page number (zero-based) of the search. The default value is zero.

    pageSize:
      name: pageSize
      required: false
      in: query
      schema:
        type: integer
      description: >-
        The maximum number of records that will be returned on the search. The
        default value is 40.

    keywords:
      name: keywords
      required: false
      in: query
      schema:
        type: string
      description: >-
        Textual search keywords. Sometimes, like in user search, the fields
        matched depends on what is configured on the products.

    fields:
      name: fields
      required: false
      in: query
      schema:
        type: array
        items:
          type: string
      description: >-
        Select which fields to include on returned data. On the beginning of this
        page is an explanation on how this parameter works.

    customFields:
      name: customFields
      required: false
      in: query
      style: simple
      schema:
        type: array
        items:
          type: string
      description: >-
        Custom field values. Is a comma-separated array, where each part consists
        in two parts: the internal name (or custom field id) of the field, and
        a value, both separated by : (colon). For example,
        `customFields=field1:value1,field2:value2`. Sometimes multiple
        values are accepted. In this case, the multiple values are separated by
        pipes. For example, profileFields=field1:valueA|valueB. Enumerated
        fields accept multiple values, while numeric and date fields also accept
        ranges, which are two values, pipe-separated. For example,
        `customFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31`
        would match results whose custom field with internal name `rank` is either
        bronze or silver, and whose `birthDate` is between January 1, 2000 and
        December 31, 2001. To specify a single bound in ranges (like birth dates
        before December 31, 2001), use a pipe in one of the values, like
        `customFields=birthDate:|2001-12-31`.

    user:
      name: user
      required: true
      in: path
      x-dotInPath: true
      schema:
        type: string
      description: >-
        Can be one of:


        - a user identification value, such as id, username, e-mail, phone, etc.
          Id is always allowed, others depend on Cyclos configuration. Note that
          a valid numeric value is always considered as id. For example, when
          using another identification method that can be numeric only, prefix\
          the value with a single quote (like in Excel spreadsheets);

        -  `self` for the currently authenticated user.

    userNoSelf:
      name: user
      required: true
      in: path
      x-dotInPath: true
      schema:
        type: string
      description: >-
        A user identification value, such as id, username, e-mail, phone, etc. Id
        is always allowed, others depend on Cyclos configuration. Note that a
        valid numeric value is always considered as id. For example, when using
        another identification method that can be numeric only, prefix the value
        with a single quote (like in Excel spreadsheets), for example,
        `'1234567890`;

    owner:
      name: owner
      required: true
      in: path
      x-dotInPath: true
      schema:
        type: string
      description: >-
        Can be one of:


        - a user identification value, such as id, username, e-mail, phone, etc.
          Id is always allowed, others depend on Cyclos configuration. Note that
          a valid numeric value is always considered as id. For example, when
          using another identification method that can be numeric only, prefix\
          the value with a single quote (like in Excel spreadsheets);

        -  `self` for the currently authenticated user;

        - `system` for the system owner.
    id:
      name: id
      required: true
      in: path
      schema:
        type: string
      description: >-
        The object identification

    format:
      name: format
      required: true
      in: path
      description: >-
        The format to export the data
      schema:
        type: string

    order:
      name: order
      required: true
      in: path
      x-dotInPath: true
      schema:
        type: string
      description: >-
        Either the order id or number. If the number is solely comprised of
        numbers, it must be prefixed by a single quote.

    ad:
      name: ad
      required: true
      in: path
      x-dotInPath: true
      schema:
        type: string
      description: >-
        Can be either the advertisement internal identifier or, in case of webshop
        advertisements, can be the product number (if the owner is the logged
        user) or a string in the form `productNumber@user`, with the user
        identifier as well.

    confirmationPassword:
      name: confirmationPassword
      in: header
      schema:
        type: string
      required: false
      description: >-
        The password used to confirm this action, if needed. The actual password
        type, if any, depends on the Cyclos configuration for the current channel.

    accountType:
      name: accountType
      description: >-
        The account type internal name or id
      in: path
      required: true
      schema:
        type: string

    cyclosVersion:
      name: cyclosVersion
      in: query
      schema:
        type: string
      required: false
      description: >-
        The last known Cyclos version. Sometimes, data to be cached depends on the
        version of the Cyclos application, and this helps controlling such cases

    headerIf:
      name: headerIf
      in: query
      schema:
        type: string
      required: false
      description: >-
        Controls the header cache. If is a boolean value (`true` or `false`) will
        forcibly return or skip the content. Otherwise, it should be a string in
        the form `id|version`. In this case, the content will be returned only
        when changed. When blank will always return it.

    footerIf:
      name: footerIf
      in: query
      schema:
        type: string
      required: false
      description: >-
        Controls the footer cache. If is a boolean value (`true` or `false`) will
        forcibly return or skip the content. Otherwise, it should be a string in
        the form `id|version`. In this case, the content will be returned only
        when changed. When blank will always return it.

    themeIf:
      name: themeIf
      in: query
      schema:
        type: string
      required: false
      description: >-
        Controls the theme cache. If is a boolean value (`true` or `false`) will
        forcibly return or skip the content. Otherwise, it should be a string in
        the form `id|version`. In this case, the content will be returned only
        when changed. When blank will always return it.

    themeByComponents:
      name: themeByComponents
      in: query
      schema:
        type: boolean
      required: false
      description: >-
        Flag used to indicate how the theme must be returned (if returned):
        true means the theme components (base / advanced definitions and custom
        style) will be filled. Otherwise the final CSS (i. e the theme content).
        Only valid if the kind of the user interface is NOT `mobile`.
        For that kind the theme es always returned by its components.

  schemas:
    AccountKind:
      description: >
        Indicates whether an account belongs to system or user

        Possible values are:
        
        - `system`: System account, there is only one account per type in the system. Managed only by administrators
        
        - `user`: User account, there is one account of this type per user.
      type: string
      enum:
        - system
        - user

    AdAddressResultEnum:
      description: >
        Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times.

        Possible values are:
        
        - `all`: All addresses are returned.
        
        - `nearest`: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)
        
        - `none`: Addresses are not returned.
      type: string
      enum:
        - all
        - nearest
        - none

    AdCategoriesDisplayEnum:
      description: >
        The possible views for simple or webshop advertisements categories

        Possible values are:
        
        - `images`: A list including the categories with its corresponding image.
        
        - `simple`: A simplified list of categories.
      type: string
      enum:
        - images
        - simple

    AdKind:
      description: >
        The possible kinds of an advertisement

        Possible values are:
        
        - `simple`: A simple advertisement that can be viewed, but not directly bought
        
        - `webshop`: An advertisement that is part of an webshop. Can be bought, there is stock management, etc.
      type: string
      enum:
        - simple
        - webshop

    AdOrderByEnum:
      description: >
        Indicates how advertisements results are ordered.

        Possible values are:
        
        - `date`: Newest advertisements are returned first.
        
        - `distance`: Only useful when providing a location, will return nearer advertisements first.
        
        - `priceAsc`: Smaller prices are returned first. Advertisements without price are returned last.
        
        - `priceDesc`: Higher prices are returned first. Advertisements without price are returned last.
        
        - `random`: Without definite order
        
        - `relevance`: This is the default if keywords are used. Best matching advertisements come first.
      type: string
      enum:
        - date
        - distance
        - priceAsc
        - priceDesc
        - random
        - relevance

    AdStatusEnum:
      description: >
        The possible status for an advertisement

        Possible values are:
        
        - `active`: The advertisement is published and can be seen by other users.
        
        - `disabled`: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users.
        
        - `draft`: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations.
        
        - `expired`: The advertisement publication period has already expired, and cannot be seen by other users.
        
        - `hidden`: The advertisement is manually hidden from other users
        
        - `pending`: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations.
        
        - `scheduled`: The advertisement has a future publication period, and cannot be seen by other users.
      type: string
      enum:
        - active
        - disabled
        - draft
        - expired
        - hidden
        - pending
        - scheduled

    AddressFieldEnum:
      description: >
        The address fields that can be configured to be enabled or required

        Possible values are:
        
        - `addressLine1`: The first line of the descriptive address
        
        - `addressLine2`: The second line of the descriptive address
        
        - `buildingNumber`: The numeric identifier for a land parcel, house, building or other
        
        - `city`: The city name
        
        - `complement`: The complement (like apartment number)
        
        - `country`: The country, represented as 2-letter, uppercase, ISO 3166-1 code
        
        - `neighborhood`: The neighborhood name
        
        - `poBox`: The post-office box, is an uniquely addressable box
        
        - `region`: The region or state
        
        - `street`: The street name
        
        - `zip`: A zip code that identifies a specific geographic (postal) delivery area
      type: string
      enum:
        - addressLine1
        - addressLine2
        - buildingNumber
        - city
        - complement
        - country
        - neighborhood
        - poBox
        - region
        - street
        - zip

    AddressQueryFieldEnum:
      description: >
        Fields which can be used when filtering by user address, by using the `address.<addressField>` name

        Possible values are:
        
        - `address`: Filters by any field in the street address: `addressLine1`, `addressLine2`, `street`, `buildingNumber` or `complement`
        
        - `city`: Filters by city name
        
        - `country`: Filters by country, represented as 2-letter, uppercase, ISO 3166-1 code (exact match)
        
        - `neighborhood`: Filters by neighborhood name
        
        - `poBox`: Filters by post-office box (exact match)
        
        - `region`: Filters by region or state
        
        - `zip`: Filters by zip (postal) code (exact match)
      type: string
      enum:
        - address
        - city
        - country
        - neighborhood
        - poBox
        - region
        - zip

    AdminMenuEnum:
      description: >
        Which administration menu should a data be displayed

        Possible values are:
        
        - `contentManagement`: Content management
        
        - `reports`: Reports
        
        - `systemBanking`: System accounts
        
        - `systemManagement`: System management
        
        - `userManagement`: User management
      type: string
      enum:
        - contentManagement
        - reports
        - systemBanking
        - systemManagement
        - userManagement

    AuthorizationActionEnum:
      description: >
        Possible actions that could be confirmed with a device for a payment authorization

        Possible values are:
        
        - `authorize`: Authorize the payment authorization
        
        - `cancel`: Cancel the payment authorization
        
        - `deny`: Deny the payment authorization
      type: string
      enum:
        - authorize
        - cancel
        - deny

    AvailabilityEnum:
      description: >
        Determines the availability of a data

        Possible values are:
        
        - `disabled`: The data is disabled
        
        - `optional`: The data is enabled and optional
        
        - `required`: The data is enabled and required
      type: string
      enum:
        - disabled
        - optional
        - required

    BadRequestErrorCode:
      description: >
        Error codes for 400 Bad request HTTP status

        Possible values are:
        
        - `general`: Bad request format
        
        - `json`: Error in the JSON format
      type: string
      enum:
        - general
        - json

    BalanceLevelEnum:
      description: >
        Contains the possible balance levels on the users with balances search

        Possible values are:
        
        - `high`: High balance, above the medium balance range upper bound
        
        - `low`: Low balance, below the medium balance range lower bound
        
        - `medium`: Medium balance, between the lower and upper bounds of the medium balance range
      type: string
      enum:
        - high
        - low
        - medium

    BalanceLimitKind:
      description: >
        The kind of account balance limit

        Possible values are:
        
        - `lower`: The lower (negative) balance limit
        
        - `upper`: The upper (positive) balance limit
      type: string
      enum:
        - lower
        - upper

    BasicProfileFieldEnum:
      description: >
        The existing user basic profile fields

        Possible values are:
        
        - `accountNumber`: Account number
        
        - `address`: Address
        
        - `email`: E-mail
        
        - `image`: Image
        
        - `name`: Full name
        
        - `phone`: Phone (either mobile or land-line)
        
        - `username`: Login name
      type: string
      enum:
        - accountNumber
        - address
        - email
        - image
        - name
        - phone
        - username

    BrokeringActionEnum:
      description: >
        An action over a user's brokers

        Possible values are:
        
        - `add`: The broker was added
        
        - `remove`: The broker was removed
        
        - `setMain`: The broker was set as main
      type: string
      enum:
        - add
        - remove
        - setMain

    BuyVoucherErrorCode:
      description: >
        Possible errors when buying a voucher

        Possible values are:
        
        - `maxAmountForPeriod`: The maximum allowed buy amount for a period (example, a month) has been exceeded
        
        - `maxOpenAmount`: The maximum open amount for this voucher type for the buyer user has been exceeded
        
        - `maxTotalOpenAmount`: The maximum total open amount for this voucher type, for all users, has been exceeded
        
        - `notAllowedForUser`: The user attempting to buy vouchers is not allowed to buy vouchers of this type
        
        - `payment`: There was an error when performing the payment
        
        - `unexpected`: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.
      type: string
      enum:
        - maxAmountForPeriod
        - maxOpenAmount
        - maxTotalOpenAmount
        - notAllowedForUser
        - payment
        - unexpected

    CaptchaProviderEnum:
      description: >
        Possibles captcha provider

        Possible values are:
        
        - `internal`: Default provider using images
      type: string
      enum:
        - internal

    ClientActionEnum:
      description: >
        Possible actions that could be confirmed with a device for an access client

        Possible values are:
        
        - `block`: Block the access client
        
        - `getActivationCode`: Get the activation code
        
        - `unassign`: Unassign the access client
        
        - `unblock`: Unblock the access client
      type: string
      enum:
        - block
        - getActivationCode
        - unassign
        - unblock

    ClientStatusEnum:
      description: >
        The status of an access client

        Possible values are:
        
        - `active`: The access client is active, and can operate normally
        
        - `blocked`: The access client is blocked and cannot be used until it is unblocked
        
        - `removed`: The access client was removed, but had transactions, so couldn't be physically removed
        
        - `unassigned`: The access client is unassigned (disconnected) from an (remote) application
      type: string
      enum:
        - active
        - blocked
        - removed
        - unassigned

    CodeVerificationStatusEnum:
      description: >
        The status of a mobile phone verification challenge

        Possible values are:
        
        - `codeNotSent`: There isn't a current code to be verified (for example the was never sent or the code was reset by max attempts reached)
        
        - `expired`: The code has expired and can't be used anymore.
        
        - `failed`: The code was wrong (it doesn't match the expected value)
        
        - `maxAttemptsReached`: The max attempts with an invalid code was reached.
        
        - `success`: The code was correct and accepted.
      type: string
      enum:
        - codeNotSent
        - expired
        - failed
        - maxAttemptsReached
        - success

    ConflictErrorCode:
      description: >
        Error codes for 409 Conflict entity HTTP status

        Possible values are:
        
        - `constraintViolatedOnRemove`: An attempt to remove some entity has failed, probably because that entity is in use, that is, is being referenced by some other entity.
        
        - `staleEntity`: Failure in the optimistic lock. It means some entity was fetched for editing by 2 clients. Then they both saved it. The first one is successful, but the second one will fail. If you get this error, make sure the `version` field is being sent with the correct value, as fetched from the server.
      type: string
      enum:
        - constraintViolatedOnRemove
        - staleEntity

    ContactOrderByEnum:
      description: >
        Possible options for ordering the results of a contact list.

        Possible values are:
        
        - `alphabeticallyAsc`: Users are ordered by name (or whatever field is set to format users) in ascending order.
        
        - `alphabeticallyDesc`: Users are ordered by name (or whatever field is set to format users) in descending order.
        
        - `relevance`: This is the default if keywords are used. Best matching users come first.
      type: string
      enum:
        - alphabeticallyAsc
        - alphabeticallyDesc
        - relevance

    CustomFieldControlEnum:
      description: >
        The UI control (widget) type that should be used to render this field for edit. Most notably, the types that can have distinct controls are singleSelection, that could be rendered as a single selection widget or radio button group, and multi selection, which could be rendered as a multi selection widget or a checkbox group.

        Possible values are:
        
        - `checkbox`: A checkbox group
        
        - `entitySelection`: A widget to select a linked entity (for example, an auto-complete for users)
        
        - `multiSelection`: A multi-selection field
        
        - `radio`: A radio button group
        
        - `richEditor`: An HTML editor
        
        - `singleSelection`: A single-selection field
        
        - `text`: A single line text
        
        - `textarea`: A multi line text
        
        - `upload`: A widget to upload a file
      type: string
      enum:
        - checkbox
        - entitySelection
        - multiSelection
        - radio
        - richEditor
        - singleSelection
        - text
        - textarea
        - upload

    CustomFieldKind:
      description: >
        Determines the kind if a custom field

        Possible values are:
        
        - `contact`: Contact fields.
        
        - `contactInfo`: Additional contact information fields.
        
        - `custom_operation`: Custom operation fields.
        
        - `document`: Document fields.
        
        - `marketplace`: Advertisements field.
        
        - `record`: Record fields.
        
        - `transaction`: Transaction fields.
        
        - `user`: User profile fields.
      type: string
      enum:
        - contact
        - contactInfo
        - custom_operation
        - document
        - marketplace
        - record
        - transaction
        - user

    CustomFieldSizeEnum:
      description: >
        The size of the widget that should be rendered

        Possible values are:
        
        - `full`: The widget should occupy 100% of the available area
        
        - `large`: A large widget
        
        - `medium`: A medium widget
        
        - `small`: A small widget
        
        - `tiny`: A very small widget
      type: string
      enum:
        - full
        - large
        - medium
        - small
        - tiny

    CustomFieldTypeEnum:
      description: >
        The data type for the custom field

        Possible values are:
        
        - `boolean`: A boolean value
        
        - `date`: A date value
        
        - `decimal`: A decimal value
        
        - `dynamicSelection`: Single selection based on options generated by a custom script
        
        - `file`: Multiple binary files
        
        - `image`: Multiple images
        
        - `integer`: An integer value
        
        - `linkedEntity`: Another entity. Uses the `linkedEntityType` to define which kind of entity is it
        
        - `multiSelection`: Multiple enumerated values
        
        - `richText`: A multi line string formatted as HTML
        
        - `singleSelection`: A single enumerated value
        
        - `string`: A single line string
        
        - `text`: A multi line string
        
        - `url`: An URL
      type: string
      enum:
        - boolean
        - date
        - decimal
        - dynamicSelection
        - file
        - image
        - integer
        - linkedEntity
        - multiSelection
        - richText
        - singleSelection
        - string
        - text
        - url

    DateFormatEnum:
      description: >
        The format for dates

        Possible values are:
        
        - `dmyDash`: DD-MM-YYYY
        
        - `dmyPeriod`: DD.MM.YYYY
        
        - `dmySlash`: DD/MM/YYYY
        
        - `mdyDash`: MM-DD-YYYY
        
        - `mdyPeriod`: MM.DD.YYYY
        
        - `mdySlash`: MM/DD/YYYY
        
        - `ymdDash`: YYYY-MM-DD
        
        - `ymdPeriod`: YYYY.MM.DD
        
        - `ymdSlash`: YYYY/MM/DD
      type: string
      enum:
        - dmyDash
        - dmyPeriod
        - dmySlash
        - mdyDash
        - mdyPeriod
        - mdySlash
        - ymdDash
        - ymdPeriod
        - ymdSlash

    DeliveryMethodChargeTypeEnum:
      description: >
        How the price is determined on this delivery method

        Possible values are:
        
        - `fixed`: The delivery method price will be fixed.
        
        - `negotiated`: The delivery method price will be negotiated between the seller and the buyer.
      type: string
      enum:
        - fixed
        - negotiated

    DeviceConfirmationStatusEnum:
      description: >
        The possible status for a device confirmation

        Possible values are:
        
        - `approved`: The confirmation was approved through a trusted device
        
        - `pending`: The confirmation is pending for approval through a trusted device
        
        - `rejected`: The confirmation was rejected through a trusted device
      type: string
      enum:
        - approved
        - pending
        - rejected

    DeviceConfirmationTypeEnum:
      description: >
        Contains all possible device confirmation types

        Possible values are:
        
        - `acceptOrder`: A confirmation for accepting a pending order as buyer
        
        - `approveTicket`: A confirmation for approving a pending ticket as payer
        
        - `buyVouchers`: A confirmation for buying vouchers
        
        - `changeAccountLimits`: A confirmation for change the account limits of a user account
        
        - `chargeback`: A confirmation for transfer chargeback
        
        - `clientAction`: A confirmation for an action over an access client
        
        - `editProfile`: A confirmation for editing the profile of his own
        
        - `generatePassword`: A confirmation for generating a new password
        
        - `generateVouchers`: A confirmation for generating vouchers
        
        - `importPayments`: A confirmation for importin payments as admin
        
        - `importUserPayments`: A confirmation for batch payments as user
        
        - `manageAddress`: A confirmation for managing an user address of his own
        
        - `manageAuthorization`: A confirmation for managing a pending payment authorization
        
        - `manageContactInfo`: A confirmation for managing an additional contact information of his own
        
        - `manageExternalPayment`: A confirmation for managing an external payment
        
        - `manageFailedOccurrence`: A confirmation for managing a recurring payment failed occurrence
        
        - `manageInstallment`: A confirmation for managing a scheduled payment installment
        
        - `managePaymentRequest`: A confirmation for managing a payment request
        
        - `managePhone`: A confirmation for managing a phone of his own
        
        - `manageRecurringPayment`: A confirmation for managing a recurring payment
        
        - `manageScheduledPayment`: A confirmation for managing a scheduled payment
        
        - `manageVoucher`: A confirmation for managing a voucher
        
        - `performExternalPayment`: A confirmation for performing an external payment
        
        - `performPayment`: A confirmation for performing a payment
        
        - `personalizeNfc`: A confirmation for personalizing a NFC tag
        
        - `runOperation`: A confirmation for running a custom operation
        
        - `secondaryLogin`: A confirmation for the secondary login
        
        - `shoppingCartCheckout`: A confirmation for the cart checkout
      type: string
      enum:
        - acceptOrder
        - approveTicket
        - buyVouchers
        - changeAccountLimits
        - chargeback
        - clientAction
        - editProfile
        - generatePassword
        - generateVouchers
        - importPayments
        - importUserPayments
        - manageAddress
        - manageAuthorization
        - manageContactInfo
        - manageExternalPayment
        - manageFailedOccurrence
        - manageInstallment
        - managePaymentRequest
        - managePhone
        - manageRecurringPayment
        - manageScheduledPayment
        - manageVoucher
        - performExternalPayment
        - performPayment
        - personalizeNfc
        - runOperation
        - secondaryLogin
        - shoppingCartCheckout

    DistanceUnitEnum:
      description: >
        Determines the unit used to measure distances

        Possible values are:
        
        - `kilometer`: Kilometer(s)
        
        - `mile`: Mile(s)
      type: string
      enum:
        - kilometer
        - mile

    DocumentKind:
      description: >
        The kind of a document

        Possible values are:
        
        - `dynamic`: A shared dynamic document - the content is a HTML text obtained from a template and variables
        
        - `static`: A shared static document - the content is a downloaded file
        
        - `user`: An individual static document belonging to a specific user
      type: string
      enum:
        - dynamic
        - static
        - user

    DocumentRangeEnum:
      description: >
        The document range, either shared or individual

        Possible values are:
        
        - `individual`: A document belonging to a specific user
        
        - `shared`: Shared documents. They have a category, and are the same documents for all users
      type: string
      enum:
        - individual
        - shared

    ErrorKind:
      description: >
        Error types associated to the HTTP Status 500

        Possible values are:
        
        - `buyVoucher`: An error has occurred when buying a voucher
        
        - `forgottenPassword`: An error has occurred when changing a forgotten password.
        
        - `general`: An unexpected error has occurred
        
        - `initializeNfc`: An error has occurred when initializing a NFC token
        
        - `nested`: An error which has another internal error at a given property / index
        
        - `nfcAuth`: An error has occurred when making an external NFC authentication
        
        - `otp`: An error has occurred requesting an OTP
        
        - `payment`: An error has occurred when making a payment
        
        - `personalizeNfc`: An error has occurred when personalizing a NFC token
        
        - `pos`: An error has occurred when receiving a payment on a POS operation
        
        - `redeemVoucher`: An error has occurred when redeeming a voucher
        
        - `shoppingCart`: An error has occurred when interacting with a shopping cart.
        
        - `shoppingCartCheckout`: An error has occurred when checking out a shopping cart.
      type: string
      enum:
        - buyVoucher
        - forgottenPassword
        - general
        - initializeNfc
        - nested
        - nfcAuth
        - otp
        - payment
        - personalizeNfc
        - pos
        - redeemVoucher
        - shoppingCart
        - shoppingCartCheckout

    ExternalPaymentActionEnum:
      description: >
        Possible actions that could be confirmed with a device for an external payment

        Possible values are:
        
        - `cancel`: Cancel the external payment
      type: string
      enum:
        - cancel

    ExternalPaymentStatusEnum:
      description: >
        The status of an external payment

        Possible values are:
        
        - `canceled`: The external payment was canceled
        
        - `expired`: The external payment has expired without the destination user activation
        
        - `failed`: The external payment has failed processing
        
        - `pending`: The external payment is pending, awaiting the destination user to be activated in Cyclos
        
        - `processed`: The external payment was processed, and the destination payment was created
      type: string
      enum:
        - canceled
        - expired
        - failed
        - pending
        - processed

    FailedOccurrenceActionEnum:
      description: >
        Possible actions that could be confirmed with a device for a recurring payment failed occurrence

        Possible values are:
        
        - `process`: Process the recurring payment failed occurrence
      type: string
      enum:
        - process

    FileMimeTypeEnum:
      description: >
        Possible mime types for uploading files

        Possible values are:
        
        - `audio`: Audio
        
        - `html`: HTML document
        
        - `image`: Image
        
        - `ms_excel`: Microsoft Excel spreadsheet
        
        - `ms_powerpoint`: Microsoft PowerPoint presentation
        
        - `ms_word`: Microsoft Word document
        
        - `od_presentation`: OpenDocument presentation
        
        - `od_spreadsheet`: OpenDocument spreadsheet
        
        - `od_text`: OpenDocument text
        
        - `others`: Other types not included above
        
        - `pdf`: PDF document
        
        - `rtf`: RTF document
        
        - `text`: Plain text
        
        - `video`: Video
      type: string
      enum:
        - audio
        - html
        - image
        - ms_excel
        - ms_powerpoint
        - ms_word
        - od_presentation
        - od_spreadsheet
        - od_text
        - others
        - pdf
        - rtf
        - text
        - video

    ForbiddenErrorCode:
      description: >
        Error codes for 403 Forbidden HTTP status.

        Possible values are:
        
        - `devicePinRemoved`: The device pin was removed by exceeding the allowed attempts
        
        - `expiredPassword`: The password being used has expired
        
        - `illegalAction`: Attempt to perform an action that is not allowed on this context
        
        - `inaccessibleChannel`: This channel cannot be accessed by the user
        
        - `inaccessiblePrincipal`: The used identification method (principal type) cannot be used in this channel
        
        - `indefinitelyBlocked`: The password was indefinitely blocked by exceeding the allowed attempts
        
        - `invalidDeviceActivationCode`: The device activation code was no valid
        
        - `invalidDeviceConfirmation`: The device confirmation being used is invalid (normally as a confirmation password)
        
        - `invalidPassword`: The password being used is invalid (normally the confirmation password)
        
        - `operatorWithPendingAgreements`: The operator cannot access because his owner member has pending agreements
        
        - `pendingAgreements`: There is at least one agreement which needs to be accepted in order to access the system
        
        - `permissionDenied`: The operation was denied because a required permission was not granted
        
        - `resetPassword`: The password being used was manually reset
        
        - `temporarilyBlocked`: The password was temporarily blocked by exceeding the allowed attempts
      type: string
      enum:
        - devicePinRemoved
        - expiredPassword
        - illegalAction
        - inaccessibleChannel
        - inaccessiblePrincipal
        - indefinitelyBlocked
        - invalidDeviceActivationCode
        - invalidDeviceConfirmation
        - invalidPassword
        - operatorWithPendingAgreements
        - pendingAgreements
        - permissionDenied
        - resetPassword
        - temporarilyBlocked

    ForgottenPasswordErrorCode:
      description: >
        Application-specific error codes for a ForgottenPassword error.

        Possible values are:
        
        - `invalidSecurityAnswer`: if the answer for the security question was incorrect.
        
        - `unexpected`: An unexpected error has occurred.
      type: string
      enum:
        - invalidSecurityAnswer
        - unexpected

    GroupKind:
      description: >
        The possible kinds of group or group set

        Possible values are:
        
        - `adminGroup`: An administrator group
        
        - `brokerGroup`: A broker group
        
        - `groupSet`: A group set
        
        - `memberGroup`: A member (regular user) group
      type: string
      enum:
        - adminGroup
        - brokerGroup
        - groupSet
        - memberGroup

    IdentificationMethodEnum:
      description: >
        The way an user is identified to either perform or receive a payment

        Possible values are:
        
        - `autocomplete`: The client application should search for an user and pass in the id
        
        - `contacts`: The client application should access the contact list of the authenticated user and pass the id
        
        - `principalType`: The client application should pass in an identification (principal) of the user, such as login name, e-mail and so on
      type: string
      enum:
        - autocomplete
        - contacts
        - principalType

    ImageKind:
      description: >
        Determines the kind of an image

        Possible values are:
        
        - `contactInfo`: An image of an additional contact information
        
        - `customFieldValue`: An image used as custom field value
        
        - `marketplace`: Advertisement images are associated with an advertisement, be it simple or for web shop.
        
        - `marketplaceCategory`: An image of an advertisement (simple or webshop)
        
        - `profile`: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results.
        
        - `systemCustom`: System custom images are additional images an administrator that can be used on rich text contents.
        
        - `temp`: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement).
        
        - `userCustom`: User custom images are additional images that can be used on rich text contents.
        
        - `voucherType`: An image of a voucher type
      type: string
      enum:
        - contactInfo
        - customFieldValue
        - marketplace
        - marketplaceCategory
        - profile
        - systemCustom
        - temp
        - userCustom
        - voucherType

    ImageSizeEnum:
      description: >
        The possible sizes of images. The actual pixel size depends on the configuration in Cyclos

        Possible values are:
        
        - `large`: Full image size
        
        - `medium`: Medium thumbnail
        
        - `small`: Small thumbnail
      type: string
      enum:
        - large
        - medium
        - small

    InitializeNfcErrorCode:
      description: >
        Application-specific error codes for an initialize NFC error

        Possible values are:
        
        - `tokenInUse`: The token specified for initialization is already in use (exists and it is active)
        
        - `unexpected`: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.
      type: string
      enum:
        - tokenInUse
        - unexpected

    InputErrorCode:
      description: >
        Error codes for 422 Unprocessable entity HTTP status. It means there was an error with the input sent to the operation.

        Possible values are:
        
        - `aggregated`: Represents an aggregation of other input errors
        
        - `dataConversion`: Some data conversion has failed. For example, when sending a date with an invalid format
        
        - `fileUploadSize`: An uploaded file size exceeds the maximum allowed
        
        - `maxItems`: There was an attempt to create an item, but the maximum number of allowed items was exceeded
        
        - `missingParameter`: Missing a required request parameter
        
        - `queryParse`: A full-text query keywords contained an invalid text
        
        - `validation`: One or more of the fields sent contains invalid values
      type: string
      enum:
        - aggregated
        - dataConversion
        - fileUploadSize
        - maxItems
        - missingParameter
        - queryParse
        - validation

    InstallmentActionEnum:
      description: >
        Possible actions that could be confirmed with a device for a scheduled payment installment

        Possible values are:
        
        - `process`: Process the scheduled payment installment
        
        - `settle`: Settle the scheduled payment installment
      type: string
      enum:
        - process
        - settle

    InstallmentStatusEnum:
      description: >
        The status of a installment

        Possible values are:
        
        - `blocked`: The installment is blocked, and won't be automatically processed on its due date
        
        - `canceled`: The installment was canceled
        
        - `failed`: The installment processing failed, for example, because there was no funds in the source account
        
        - `processed`: The installment was processed, generating a transfer
        
        - `scheduled`: The installment is scheduled for a future date
        
        - `settled`: The installment was marked as settled by the receiver
      type: string
      enum:
        - blocked
        - canceled
        - failed
        - processed
        - scheduled
        - settled

    InvalidDeviceConfirmationEnum:
      description: >
        The possible results for an invalid device confirmation

        Possible values are:
        
        - `invalidConfirmation`: The confirmation being processed / checked was not found or not belongs to the authenticated user
        
        - `invalidDevice`: The trusted device used to approve / reject the confirmation was not found or is not associated to the authenticated user
        
        - `maxCheckAtemptsReached`: The maximum number of attempts to check for a processed (approved / rejected) device confirmation was reached. The logged user was blocked
      type: string
      enum:
        - invalidConfirmation
        - invalidDevice
        - maxCheckAtemptsReached

    LinkedEntityTypeEnum:
      description: >
        When the type is linkedEntity, indicates the entity type

        Possible values are:
        
        - `advertisement`: An advertisement
        
        - `record`: A record (user or system)
        
        - `transaction`: A transaction (payment, scheduled payment, payment request, etc)
        
        - `transfer`: A transfer
        
        - `user`: An user
      type: string
      enum:
        - advertisement
        - record
        - transaction
        - transfer
        - user

    MaturityPolicyEnum:
      description: >
        Indicates how a this payment type restricts payments based on the balance maturity

        Possible values are:
        
        - `always`: The payment can always be performed, regardless its maturity
        
        - `history`: It the balance maturity ever reached zero in the past, that balance can be used on payment. If later on the maturity went above zero, that new balance cannot be used. Is normally used in conjunction with the maturity table, so the user can pick the balance from past maturity
        
        - `zero`: The payment can only be performed if the current maturity is zero
      type: string
      enum:
        - always
        - history
        - zero

    MobileOperationEnum:
      description: >
        The possible operations the mobile application can perform

        Possible values are:
        
        - `acceptTicket`: Accepts a generated QR code for performing a payment
        
        - `activateNfcDevice`: Activate the phone as NFC device
        
        - `assignPos`: Assign an access client for POS mode
        
        - `boughtVouchers`: View bought vouchers
        
        - `buyVoucher`: Buy a voucher
        
        - `createTicket`: Generate a QR Code for receive payment
        
        - `deactivateNfcDevice`: Deactivate the phone as NFC device
        
        - `formatNfc`: Format NFC tags
        
        - `initializeNfc`: Initialize NFC tags
        
        - `makeSystemPayment`: Perform payments to system
        
        - `makeUserPayment`: Perform payments to other users
        
        - `manageContacts`: Manage own contacts
        
        - `manageOperators`: Manage own/user operators
        
        - `managePasswords`: Manage passwords
        
        - `mapDirectory`: View the user directory (map)
        
        - `paymentRequests`: Search and view payment requests
        
        - `personalizeNfc`: Personalize NFC tags
        
        - `personalizeNfcSelf`: Personalize NFC tags for the logged user or its operators
        
        - `purchases`: Search and view purchased webshops
        
        - `readNfc`: Read NFC tags
        
        - `receivePayment`: Receive payments from other users
        
        - `redeemVoucher`: Redeem vouchers
        
        - `registerUsersAsManager`: Register other users as user manager
        
        - `registerUsersAsMember`: Register other users as member or operator
        
        - `sendPaymentRequestToSystem`: Send payment requests to system
        
        - `sendPaymentRequestToUser`: Send payment requests to users
        
        - `unassignPos`: Unassign the current access client from POS mode
        
        - `usersSearch`: Search other users
        
        - `viewAccountInformation`: View own accounts
        
        - `viewAdvertisements`: Search and view advertisements and webshop
        
        - `viewRedeemed`: View redeemed vouchers
        
        - `viewUserProfile`: View the profile of other users
      type: string
      enum:
        - acceptTicket
        - activateNfcDevice
        - assignPos
        - boughtVouchers
        - buyVoucher
        - createTicket
        - deactivateNfcDevice
        - formatNfc
        - initializeNfc
        - makeSystemPayment
        - makeUserPayment
        - manageContacts
        - manageOperators
        - managePasswords
        - mapDirectory
        - paymentRequests
        - personalizeNfc
        - personalizeNfcSelf
        - purchases
        - readNfc
        - receivePayment
        - redeemVoucher
        - registerUsersAsManager
        - registerUsersAsMember
        - sendPaymentRequestToSystem
        - sendPaymentRequestToUser
        - unassignPos
        - usersSearch
        - viewAccountInformation
        - viewAdvertisements
        - viewRedeemed
        - viewUserProfile

    NfcAuthErrorCode:
      description: >
        Application-specific error codes for an NFC authentication error

        Possible values are:
        
        - `pos`: A POS exception has happened when trying to make an external authenticate. See the `posError` field for more details.
        
        - `unexpected`: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.
      type: string
      enum:
        - pos
        - unexpected

    NfcTagKeyEnum:
      description: >
        Represent the different keys stored on NFC tags

        Possible values are:
        
        - `appMaster`: The application master key. Not used for now (it could be used for application management).
        
        - `operational`: A key stored within the application that is used to guarantee the presence of the card in sensitive operations, such as receive payment (POS) or personalize the tag
        
        - `piccMaster`: The PICC master key, used to format the tag
      type: string
      enum:
        - appMaster
        - operational
        - piccMaster

    NotificationEntityTypeEnum:
      description: >
        The type of the entity referenced by the notification, if any.

        Possible values are:
        
        - `adQuestion`: The entity is an advertisement question
        
        - `errorLog`: The entity is an error log
        
        - `feedback`: The entity is a transaction feedback
        
        - `installment`: The entity is a scheduled payment installment
        
        - `marketplace`: The entity is a `simple` or `webshop` advertisement
        
        - `network`: The entity is a network
        
        - `occurrence`: The entity is a failed occurrence of a recurring payment
        
        - `order`: The entity is an order
        
        - `passwordType`: The entity is a password type
        
        - `reference`: The entity is an user reference
        
        - `systemAlert`: The entity is a system alert
        
        - `token`: The entity is a token (user identification)
        
        - `transaction`: The entity is a transaction
        
        - `transfer`: The entity is a transfer
        
        - `user`: The entity is an user
        
        - `userAlert`: The entity is an user alert
        
        - `userImportedFile`: The entity is an user imported file
        
        - `voucher`: The entity is a voucher
        
        - `voucherType`: The entity is a voucher type
      type: string
      enum:
        - adQuestion
        - errorLog
        - feedback
        - installment
        - marketplace
        - network
        - occurrence
        - order
        - passwordType
        - reference
        - systemAlert
        - token
        - transaction
        - transfer
        - user
        - userAlert
        - userImportedFile
        - voucher
        - voucherType

    NotificationKind:
      description: >
        Indicates a kind of notification

        Possible values are:
        
        - `accountAllNonSmsPerformedPayments`: A payment was performed
        
        - `accountAuthorizedPaymentCanceled`: The authorization process of a payment was canceled
        
        - `accountAuthorizedPaymentDenied`: A payment pending authorization was denied
        
        - `accountAuthorizedPaymentExpired`: The authorization process of a payment has expired
        
        - `accountAuthorizedPaymentSucceeded`: A payment pending authorization was processed
        
        - `accountBoughtVouchersAboutToExpire`: One or more bought vouchers are about to expire
        
        - `accountBoughtVouchersExpirationDateChanged`: The expiration date of a bought voucher was changed
        
        - `accountBoughtVouchersExpired`: One or more bought vouchers have expired
        
        - `accountExternalPaymentExpired`: A performed external payment has expired
        
        - `accountExternalPaymentPerformedFailed`: A performed external payment has failed
        
        - `accountExternalPaymentReceivedFailed`: A received external payment has failed
        
        - `accountIncomingRecurringPaymentCanceled`: An incoming recurring payment was canceled
        
        - `accountIncomingRecurringPaymentFailed`: An incoming recurring payment processing has failed
        
        - `accountIncomingRecurringPaymentReceived`: A recurring payment was received
        
        - `accountIncomingScheduledPaymentCanceled`: An incoming scheduled payment processing has canceled
        
        - `accountIncomingScheduledPaymentFailed`: An incoming scheduled payment processing has failed
        
        - `accountIncomingScheduledPaymentReceived`: A scheduled payment was received
        
        - `accountLimitChange`: The account balance limit was changed by the administration
        
        - `accountOperatorAuthorizedPaymentApprovedStillPending`: A payment performed by an operator was approved, but still needs administration authorization
        
        - `accountOperatorAuthorizedPaymentCanceled`: A payment performed by an operator had the authorization process canceled
        
        - `accountOperatorAuthorizedPaymentDenied`: A payment performed by an operator was denied
        
        - `accountOperatorAuthorizedPaymentExpired`: A payment performed by an operator had the authorization process expired
        
        - `accountOperatorAuthorizedPaymentSucceeded`: A payment performed by an operator was processed
        
        - `accountOperatorPaymentAwaitingAuthorization`: A payment performed by an operator needs my authorization
        
        - `accountPaymentAwaitingAuthorization`: A payment is awaiting my authorization
        
        - `accountPaymentReceived`: A payment was received
        
        - `accountPaymentRequestCanceled`: A sent payment request was canceled
        
        - `accountPaymentRequestDenied`: A sent payment request was denied
        
        - `accountPaymentRequestExpirationDateChanged`: An incoming payment request had its expiration date changed
        
        - `accountPaymentRequestExpired`: A sent payment request has expired
        
        - `accountPaymentRequestProcessed`: A sent payment request was processed
        
        - `accountPaymentRequestReceived`: A payment was requested
        
        - `accountRecurringPaymentFailed`: The processing of a recurring payment has failed
        
        - `accountRecurringPaymentOccurrenceProcessed`: A recurring payment processing was processed
        
        - `accountScheduledPaymentFailed`: The processing of a scheduled payment has failed
        
        - `accountScheduledPaymentInstallmentProcessed`: A scheduled payment was processed
        
        - `accountScheduledPaymentRequestFailed`: A scheduled payment request has failed and was reopened
        
        - `accountSentPaymentRequestExpirationDateChanged`: A sent payment request had its expiration date changed
        
        - `accountSmsPerformedPayment`: A payment was performed by SMS
        
        - `accountTicketWebhookFailed`: The webhook processing for a ticket has failed
        
        - `adminAdPendingAuthorization`: A new advertisement was created, and it is pending administrator authorization
        
        - `adminApplicationError`: A new application error was generated
        
        - `adminExternalPaymentExpired`: An external payment has expired without the destination user being registered
        
        - `adminExternalPaymentPerformedFailed`: An external payment has failed processing
        
        - `adminGeneratedVouchersAboutToExpire`: One or more generated vouchers are about to expire
        
        - `adminGeneratedVouchersExpired`: One or more generated vouchers have expired
        
        - `adminNetworkCreated`: A new network has been created
        
        - `adminPaymentAwaitingAuthorization`: A payment is awaiting the administrator authorization
        
        - `adminPaymentPerformed`: A payment was performed
        
        - `adminSystemAlert`: A new system alert was generated
        
        - `adminUserAlert`: A new user alert was generated
        
        - `adminUserImportRegistration`: An import of users has finished processing
        
        - `adminUserRegistration`: A new user has been registered
        
        - `adminVoucherBuyingAboutToExpire`: Buying in a voucher type is about to expire
        
        - `brokeringAdPendingAuthorization`: A new advertisement from an assigned member needs authorization
        
        - `brokeringMemberAssigned`: A new member was unassigned from me as broker
        
        - `brokeringMemberUnassigned`: A new member was assigned to me as broker
        
        - `buyerAdInterestNotification`: A new advertisement was published, matching one of my advertisement interests
        
        - `buyerAdQuestionAnswered`: An advertisement question I've asked was answered
        
        - `buyerOrderCanceled`: A web-shop order was canceled
        
        - `buyerOrderPaymentCanceled`: The payment for a web-shop purchase had the authorization process canceled
        
        - `buyerOrderPaymentDenied`: The payment for a web-shop purchase was denied authorization
        
        - `buyerOrderPaymentExpired`: The payment for a web-shop purchase was expired without being authorized
        
        - `buyerOrderPending`: A web-shop order is pending my approval
        
        - `buyerOrderPendingAuthorization`: A web-shop order is pending authorization
        
        - `buyerOrderPendingDeliveryData`: A web-shop order needs me to fill its delivery information
        
        - `buyerOrderProcessedBySeller`: A web-shop order was processed by the seller
        
        - `buyerOrderRejectedBySeller`: A web-shop order was rejected by the seller
        
        - `buyerSalePending`: A web-shop order is pending seller's approval
        
        - `buyerSaleRejectedBySeller`: A web-shop sale order was rejected by the seller
        
        - `feedbackChanged`: A feedback for a sale was changed
        
        - `feedbackCreated`: A feedback for a sale was created
        
        - `feedbackExpirationReminder`: Reminder to supply feedback for a purchase
        
        - `feedbackOptional`: I can optionally supply feedback for a purchase
        
        - `feedbackReplyCreated`: A feedback for a purchase was replied
        
        - `feedbackRequired`: I have to supply feedback for a purchase
        
        - `personalBrokerAssigned`: A broker was assigned to the user
        
        - `personalBrokerUnassigned`: A broker was unassigned from the user
        
        - `personalMaxSmsPerMonthReached`: The user has reached the maximum number of monthly SMS messages
        
        - `personalNewToken`: A new token (card) was assigned
        
        - `personalNewTokenPendingActivation`: a new token (card) is pending activation
        
        - `personalPasswordStatusChanged`: The status of a password has changed
        
        - `personalTokenStatusChanged`: The status of a token has changed
        
        - `personalUserStatusChanged`: The user status has changed
        
        - `referenceChanged`: A personal reference was changed
        
        - `referenceCreated`: A new personal reference was created
        
        - `sellerAdAuthorized`: An advertisement was authorized by the administration
        
        - `sellerAdExpired`: An advertisement publication period has expired
        
        - `sellerAdLowStock`: A web-shop advertisement's stock quantity is low
        
        - `sellerAdOutOfStock`: A given web-shop advertisement is out of stock
        
        - `sellerAdQuestionCreated`: A question to an advertisement was created
        
        - `sellerAdRejected`: An advertisement was rejected by the administration
        
        - `sellerOrderCanceled`: A web-shop order was canceled
        
        - `sellerOrderCreated`: A web-shop order was created
        
        - `sellerOrderPaymentCanceled`: The payment for a web-shop order had the authorization process canceled
        
        - `sellerOrderPaymentDenied`: The payment for a web-shop order was denied authorization
        
        - `sellerOrderPaymentExpired`: The payment for a web-shop order was expired without being authorized
        
        - `sellerOrderPendingAuthorization`: A web-shop order is pending authorization
        
        - `sellerOrderPendingDeliveryData`: A web-shop order is pending delivery information
        
        - `sellerOrderProcessedByBuyer`: A web-shop order was fulfilled by the buyer
        
        - `sellerOrderRejectedByBuyer`: A web-shop order was rejected by the buyer
        
        - `sellerSaleProcessedByBuyer`: A web-shop sale order was fulfilled by the buyer
      type: string
      enum:
        - accountAllNonSmsPerformedPayments
        - accountAuthorizedPaymentCanceled
        - accountAuthorizedPaymentDenied
        - accountAuthorizedPaymentExpired
        - accountAuthorizedPaymentSucceeded
        - accountBoughtVouchersAboutToExpire
        - accountBoughtVouchersExpirationDateChanged
        - accountBoughtVouchersExpired
        - accountExternalPaymentExpired
        - accountExternalPaymentPerformedFailed
        - accountExternalPaymentReceivedFailed
        - accountIncomingRecurringPaymentCanceled
        - accountIncomingRecurringPaymentFailed
        - accountIncomingRecurringPaymentReceived
        - accountIncomingScheduledPaymentCanceled
        - accountIncomingScheduledPaymentFailed
        - accountIncomingScheduledPaymentReceived
        - accountLimitChange
        - accountOperatorAuthorizedPaymentApprovedStillPending
        - accountOperatorAuthorizedPaymentCanceled
        - accountOperatorAuthorizedPaymentDenied
        - accountOperatorAuthorizedPaymentExpired
        - accountOperatorAuthorizedPaymentSucceeded
        - accountOperatorPaymentAwaitingAuthorization
        - accountPaymentAwaitingAuthorization
        - accountPaymentReceived
        - accountPaymentRequestCanceled
        - accountPaymentRequestDenied
        - accountPaymentRequestExpirationDateChanged
        - accountPaymentRequestExpired
        - accountPaymentRequestProcessed
        - accountPaymentRequestReceived
        - accountRecurringPaymentFailed
        - accountRecurringPaymentOccurrenceProcessed
        - accountScheduledPaymentFailed
        - accountScheduledPaymentInstallmentProcessed
        - accountScheduledPaymentRequestFailed
        - accountSentPaymentRequestExpirationDateChanged
        - accountSmsPerformedPayment
        - accountTicketWebhookFailed
        - adminAdPendingAuthorization
        - adminApplicationError
        - adminExternalPaymentExpired
        - adminExternalPaymentPerformedFailed
        - adminGeneratedVouchersAboutToExpire
        - adminGeneratedVouchersExpired
        - adminNetworkCreated
        - adminPaymentAwaitingAuthorization
        - adminPaymentPerformed
        - adminSystemAlert
        - adminUserAlert
        - adminUserImportRegistration
        - adminUserRegistration
        - adminVoucherBuyingAboutToExpire
        - brokeringAdPendingAuthorization
        - brokeringMemberAssigned
        - brokeringMemberUnassigned
        - buyerAdInterestNotification
        - buyerAdQuestionAnswered
        - buyerOrderCanceled
        - buyerOrderPaymentCanceled
        - buyerOrderPaymentDenied
        - buyerOrderPaymentExpired
        - buyerOrderPending
        - buyerOrderPendingAuthorization
        - buyerOrderPendingDeliveryData
        - buyerOrderProcessedBySeller
        - buyerOrderRejectedBySeller
        - buyerSalePending
        - buyerSaleRejectedBySeller
        - feedbackChanged
        - feedbackCreated
        - feedbackExpirationReminder
        - feedbackOptional
        - feedbackReplyCreated
        - feedbackRequired
        - personalBrokerAssigned
        - personalBrokerUnassigned
        - personalMaxSmsPerMonthReached
        - personalNewToken
        - personalNewTokenPendingActivation
        - personalPasswordStatusChanged
        - personalTokenStatusChanged
        - personalUserStatusChanged
        - referenceChanged
        - referenceCreated
        - sellerAdAuthorized
        - sellerAdExpired
        - sellerAdLowStock
        - sellerAdOutOfStock
        - sellerAdQuestionCreated
        - sellerAdRejected
        - sellerOrderCanceled
        - sellerOrderCreated
        - sellerOrderPaymentCanceled
        - sellerOrderPaymentDenied
        - sellerOrderPaymentExpired
        - sellerOrderPendingAuthorization
        - sellerOrderPendingDeliveryData
        - sellerOrderProcessedByBuyer
        - sellerOrderRejectedByBuyer
        - sellerSaleProcessedByBuyer

    NotificationLevelEnum:
      description: >
        Defines the severity level of a notification shown to users

        Possible values are:
        
        - `error`: An error message, when some operation went wrong
        
        - `information`: A general informative message
        
        - `warning`: A warning message, when special caution is required
      type: string
      enum:
        - error
        - information
        - warning

    NotificationTypeEnum:
      description: >
        The different notification types generated for for users / administrators.

        Possible values are:
        
        - `adAuthorized`: A notification generated if a notification created when an advertisement is authorized.
        
        - `adExpired`: A notification generated if a notification created when an advertisement expires.
        
        - `adInterestNotification`: A notification generated if a notification created by a new advertisement (Simple or Webshop).
        
        - `adPendingAuthorization`: A notification generated if an ad is pending by broker authorization.
        
        - `adPendingByAdminAuthorization`: An admin notification generated if an advertisement is pending for authorization.
        
        - `adQuestionAnswered`: A notification generated if a question answered to some AD (Simple or Webshop).
        
        - `adQuestionCreated`: A notification generated if a question created to some AD (Simple or Webshop).
        
        - `adRejected`: A notification generated if a notification created when an advertisement authorization is rejected.
        
        - `allNonSmsPerformedPayments`: A notification generated if a user performed a new payment through a channel that is not the SMS channel.
        
        - `applicationError`: An admin notification generated if an application error has occurred.
        
        - `articleOutOfStock`: A notification generated if a webshop product is out of stock.
        
        - `authorizedPaymentCanceled`: A notification generated if the authorization of a payment was canceled. This notification is to be sent to the payer.
        
        - `authorizedPaymentDenied`: A notification generated if the authorization of a payment was denied. This notification is to be sent to the payer.
        
        - `authorizedPaymentExpired`: A notification generated if the authorization of a payment has expired. This notification is to be sent to the payer.
        
        - `authorizedPaymentSucceeded`: A notification generated if the authorization of a payment succeeded (the payment went successfully through its final authorization and is now processed). This notification is to be sent to the payer.
        
        - `boughtVouchersAboutToExpire`: A notification generated if a one or more bought vouchers are about to expire.
        
        - `boughtVouchersExpirationDateChanged`: A notification generated if a bought voucher has new expiration date.
        
        - `boughtVouchersExpired`: A notification generated if one or more bought vouchers have expired.
        
        - `brokerAssigned`: A notification generated if a broker has been assigned to a user.
        
        - `brokerUnassigned`: A notification generated if a broker has been unassigned from a user.
        
        - `externalPaymentExpired`: A notification generated if the external payment has reached the expiration date.
        
        - `externalPaymentPerformedFailed`: A notification generated if the performed external payment has failed processing.
        
        - `externalPaymentReceivedFailed`: A notification generated if the received external payment has failed processing.
        
        - `externalUserPaymentExpired`: An admin notification generated if an external payment has expired.
        
        - `externalUserPaymentPerformedFailed`: An admin notification generated if an external payment failed processing.
        
        - `feedbackChanged`: A notification generated if a transaction feedback was modified.
        
        - `feedbackCreated`: A notification generated if a transaction feedback was created.
        
        - `feedbackExpirationReminder`: A notification generated if a transaction feedback is about to expire.
        
        - `feedbackOptional`: A notification generated if a performed payment can have an optional feedback.
        
        - `feedbackReplyCreated`: A notification generated if a transaction feedback was replied.
        
        - `feedbackRequired`: A notification generated if a performed payment needs to be given a feedback.
        
        - `generatedVouchersAboutToExpire`: An admin notification generated if a voucher will expire in a few days.
        
        - `generatedVouchersExpired`: An admin notification generated if a voucher has expired.
        
        - `incomingRecurringPaymentCanceled`: A notification generated if a recurring payment to a user has been canceled (only if the recurring payment is shown to receiver).
        
        - `incomingRecurringPaymentFailed`: A notification generated if a recurring payment to a user has failed (only if the recurring payment is shown to receiver).
        
        - `incomingRecurringPaymentReceived`: A notification generated if a recurring payment to a user was received (only if the recurring payment is shown to receiver).
        
        - `incomingScheduledPaymentCanceled`: A notification generated if a scheduled payment to a user has been canceled (only if the scheduled payment is shown to receiver).
        
        - `incomingScheduledPaymentFailed`: A notification generated if a scheduled payment to a user has failed (only if the scheduled payment is shown to receiver).
        
        - `incomingScheduledPaymentReceived`: A notification generated if a scheduled payment to a user was received (only if the scheduled payment is shown to receiver).
        
        - `limitChange`: A notification generated if a limit (lower/upper) has changed on an account.
        
        - `lowStockQuantity`: A notification generated if a product with stock quantity under limit.
        
        - `maxSmsPerMonthReached`: A notification generated if the maximum number of SMS messages per month has been reached.
        
        - `memberAssigned`: A notification generated if an user has been assigned to a broker.
        
        - `memberUnassigned`: A notification generated if an user has been unassigned from a broker.
        
        - `networkCreated`: An admin notification generated if a network is created.
        
        - `newToken`: A notification generated if a token / card has been created.
        
        - `newTokenPendingActivation`: A notification generated if a token / card has been created, but needs to be activated before being used.
        
        - `operatorAuthorizedPaymentApprovedStillPending`: A notification generated if a payment performed by an operator with authorization type `operator` was approved, but there is at least one authorization level.
        
        - `operatorAuthorizedPaymentCanceled`: A notification generated if a payment performed by an operator with authorization type `operator` was canceled.
        
        - `operatorAuthorizedPaymentDenied`: A notification generated if a payment performed by an operator with authorization type `operator` was denied.
        
        - `operatorAuthorizedPaymentExpired`: A notification generated if a payment performed by an operator with authorization type `operator` has expired.
        
        - `operatorAuthorizedPaymentSucceeded`: A notification generated if a payment performed by an operator with authorization type `operator` was approved and there was no further authorization.
        
        - `operatorPaymentAwaitingAuthorization`: A notification generated if a payment performed by an operator with authorization type `operator` is pending by authorization.
        
        - `orderCanceledBuyer`: A notification generated if a pending order has been canceled.
        
        - `orderCanceledSeller`: A notification generated if a pending order has been canceled.
        
        - `orderCreated`: A notification generated if a new web shop order created from a shopping cart checkout.
        
        - `orderPaymentCanceledBuyer`: A notification generated if an order payment was canceled by authorizer.
        
        - `orderPaymentCanceledSeller`: A notification generated if an order payment was canceled by authorizer.
        
        - `orderPaymentDeniedBuyer`: A notification generated if an order payment was denied by authorizer.
        
        - `orderPaymentDeniedSeller`: A notification generated if an order payment was denied by authorizer.
        
        - `orderPaymentExpiredBuyer`: A notification generated if an order payment has automatically expired.
        
        - `orderPaymentExpiredSeller`: A notification generated if an order payment has automatically expired.
        
        - `orderPendingAuthorizationBuyer`: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization.
        
        - `orderPendingAuthorizationSeller`: A notification generated if an order accepted by buyer/seller but the payment is pending for authorization.
        
        - `orderPendingBuyer`: A notification generated if an order pending buyer approval.
        
        - `orderPendingDeliveryDataBuyer`: A notification generated if an order buyer needs to fill in the delivery data.
        
        - `orderPendingDeliveryDataSeller`: A notification generated if an order seller needs to fill in the delivery data.
        
        - `orderRealizedBuyer`: A notification generated if an order accepted by buyer (sent to seller).
        
        - `orderRealizedSeller`: A notification generated if an order accepted by seller (sent to buyer).
        
        - `orderRejectedByBuyer`: A notification generated if an order rejected by buyer.
        
        - `orderRejectedBySeller`: A notification generated if an order rejected by seller.
        
        - `passwordStatusChanged`: A notification generated if a password status has changed.
        
        - `paymentAwaitingAdminAuthorization`: An admin notification generated if a payment is awaiting for authorization.
        
        - `paymentAwaitingAuthorization`: A notification generated if a user must authorize a pending payment.
        
        - `paymentPerformed`: An admin notification generated if a payment is performed.
        
        - `paymentReceived`: A notification generated if a user received a new payment.
        
        - `paymentRequestCanceled`: A notification generated if a payment request was canceled.
        
        - `paymentRequestDenied`: A notification generated if a payment request was denied.
        
        - `paymentRequestExpirationDateChanged`: A notification generated if the payment request's expiration date has changed.
        
        - `paymentRequestExpired`: A notification generated if a payment request has expired.
        
        - `paymentRequestProcessed`: A notification generated if a payment request was processed.
        
        - `paymentRequestReceived`: A notification generated if a payment request was received.
        
        - `recurringPaymentFailed`: A notification generated if a recurring payment from a user has failed (probably because of lack of funds).
        
        - `recurringPaymentOccurrenceProcessed`: A notification generated if an occurrence of an outgoing recurring payment was processed.
        
        - `referenceChanged`: A notification generated if a reference was modified.
        
        - `referenceCreated`: A notification generated if a reference has been set.
        
        - `salePendingBuyer`: A notification generated if a sale pending buyer approval.
        
        - `saleRealizedBuyer`: A notification generated if a sale accepted by buyer (sent to seller).
        
        - `saleRejectedSeller`: A notification generated if a sale rejected by seller.
        
        - `scheduledPaymentFailed`: A notification generated if a scheduled payment from a user has failed (probably because of lack of funds).
        
        - `scheduledPaymentInstallmentProcessed`: A notification generated if a scheduled payment to a user has been processed.
        
        - `scheduledPaymentRequestFailed`: A notification generated if a payment request which was scheduled has failed processing (probably because of lack of funds), and is being reopened.
        
        - `sentPaymentRequestExpirationDateChanged`: A notification generated if the payment request's expiration date has changed. This notification is to be sent to the sender.
        
        - `smsPerformedPayment`: A notification generated if a user performed a new payment through SMS.
        
        - `systemAlert`: An admin notification generated if a system alert as occurred.
        
        - `ticketWebhookFailed`: A notification generated if the invocation of a webhook after (a successful) ticket approval has failed.
        
        - `tokenStatusChanged`: A notification generated if a token / card status has changed.
        
        - `userAlert`: An admin notification generated if a member alert as occurred.
        
        - `userImport`: An admin notification generated if a user import has been done.
        
        - `userRegistration`: An admin notification generated if a new user has been registered.
        
        - `userStatusChanged`: A notification generated if a user status has changed.
        
        - `voucherBuyingAboutToExpire`: An admin notification generated if a voucher type allowing buy is about to expire.
      type: string
      enum:
        - adAuthorized
        - adExpired
        - adInterestNotification
        - adPendingAuthorization
        - adPendingByAdminAuthorization
        - adQuestionAnswered
        - adQuestionCreated
        - adRejected
        - allNonSmsPerformedPayments
        - applicationError
        - articleOutOfStock
        - authorizedPaymentCanceled
        - authorizedPaymentDenied
        - authorizedPaymentExpired
        - authorizedPaymentSucceeded
        - boughtVouchersAboutToExpire
        - boughtVouchersExpirationDateChanged
        - boughtVouchersExpired
        - brokerAssigned
        - brokerUnassigned
        - externalPaymentExpired
        - externalPaymentPerformedFailed
        - externalPaymentReceivedFailed
        - externalUserPaymentExpired
        - externalUserPaymentPerformedFailed
        - feedbackChanged
        - feedbackCreated
        - feedbackExpirationReminder
        - feedbackOptional
        - feedbackReplyCreated
        - feedbackRequired
        - generatedVouchersAboutToExpire
        - generatedVouchersExpired
        - incomingRecurringPaymentCanceled
        - incomingRecurringPaymentFailed
        - incomingRecurringPaymentReceived
        - incomingScheduledPaymentCanceled
        - incomingScheduledPaymentFailed
        - incomingScheduledPaymentReceived
        - limitChange
        - lowStockQuantity
        - maxSmsPerMonthReached
        - memberAssigned
        - memberUnassigned
        - networkCreated
        - newToken
        - newTokenPendingActivation
        - operatorAuthorizedPaymentApprovedStillPending
        - operatorAuthorizedPaymentCanceled
        - operatorAuthorizedPaymentDenied
        - operatorAuthorizedPaymentExpired
        - operatorAuthorizedPaymentSucceeded
        - operatorPaymentAwaitingAuthorization
        - orderCanceledBuyer
        - orderCanceledSeller
        - orderCreated
        - orderPaymentCanceledBuyer
        - orderPaymentCanceledSeller
        - orderPaymentDeniedBuyer
        - orderPaymentDeniedSeller
        - orderPaymentExpiredBuyer
        - orderPaymentExpiredSeller
        - orderPendingAuthorizationBuyer
        - orderPendingAuthorizationSeller
        - orderPendingBuyer
        - orderPendingDeliveryDataBuyer
        - orderPendingDeliveryDataSeller
        - orderRealizedBuyer
        - orderRealizedSeller
        - orderRejectedByBuyer
        - orderRejectedBySeller
        - passwordStatusChanged
        - paymentAwaitingAdminAuthorization
        - paymentAwaitingAuthorization
        - paymentPerformed
        - paymentReceived
        - paymentRequestCanceled
        - paymentRequestDenied
        - paymentRequestExpirationDateChanged
        - paymentRequestExpired
        - paymentRequestProcessed
        - paymentRequestReceived
        - recurringPaymentFailed
        - recurringPaymentOccurrenceProcessed
        - referenceChanged
        - referenceCreated
        - salePendingBuyer
        - saleRealizedBuyer
        - saleRejectedSeller
        - scheduledPaymentFailed
        - scheduledPaymentInstallmentProcessed
        - scheduledPaymentRequestFailed
        - sentPaymentRequestExpirationDateChanged
        - smsPerformedPayment
        - systemAlert
        - ticketWebhookFailed
        - tokenStatusChanged
        - userAlert
        - userImport
        - userRegistration
        - userStatusChanged
        - voucherBuyingAboutToExpire

    NumberFormatEnum:
      description: >
        The format for numbers

        Possible values are:
        
        - `commaAsDecimal`: 9.999,99
        
        - `periodAsDecimal`: 9,999.99
      type: string
      enum:
        - commaAsDecimal
        - periodAsDecimal

    OperationPageContextEnum:
      description: >
        DEPRECATED: Use `exportFormat` instead. The context an operation with `resultType` is `resultPage` runs

        Possible values are:
        
        - `csv`: Export results as Comma-Separated-Values (CSV)
        
        - `page`: Normal search, returning the data as rows in the result
        
        - `pdf`: Export results as printable PDF
      type: string
      enum:
        - csv
        - page
        - pdf

    OperationResultTypeEnum:
      description: >
        The kind of data a custom operation execution is expected to return

        Possible values are:
        
        - `externalRedirect`: The main execution returns an URL for another service.
        Then a second execution is expected when this other service redirects the client back to Cyclos
        
        - `fileDownload`: Returns a file, which can be downloaded
        
        - `notification`: Returns a text to be displayed as a simple notification
        
        - `plainText`: Returns a plain text to be displayed in a page, and optionally printed
        
        - `resultPage`: Returns a page or list of results, which should be displayed in a table like any other search / list
        
        - `richText`: Returns an HTML formatted text to be displayed in a page, and optionally printed
        
        - `url`: The result should be an URL to which the client should be redirected to
      type: string
      enum:
        - externalRedirect
        - fileDownload
        - notification
        - plainText
        - resultPage
        - richText
        - url

    OperationRowActionEnum:
      description: >
        The action that should be performed when the user clicks a row in the results table

        Possible values are:
        
        - `location`: Navigate to a standard Cyclos location
        
        - `operation`: Run an internal custom operation, which is set on the custom operation itself
        
        - `url`: Navigate to an arbitrary URL, which is set in the custom operation itself
      type: string
      enum:
        - location
        - operation
        - url

    OperationScopeEnum:
      description: >
        The scope determines where does a custom operation can be executed

        Possible values are:
        
        - `advertisement`: A custom operation which is executed over an advertisement
        
        - `bulkAction`: A custom operation executed over a set of users (one at a time)
        
        - `contact`: A custom operation which is executed over a contact in a user's contact list
        
        - `contactInfo`: A custom operation which is executed over an additional contact information, which is part of the user profile
        
        - `internal`: A custom operation which is executed by another custom operation
        
        - `menu`: A custom operation which is visible in a custom menu item
        
        - `record`: A custom operation which is executed over a record
        
        - `system`: A general, system custom operation
        
        - `transfer`: A custom operation which is executed over a transfer
        
        - `user`: A custom operation over a single user
      type: string
      enum:
        - advertisement
        - bulkAction
        - contact
        - contactInfo
        - internal
        - menu
        - record
        - system
        - transfer
        - user

    OperatorGroupAccountAccessEnum:
      description: >
        How an owner account can be accessed by operators

        Possible values are:
        
        - `full`: The account is fully visible
        
        - `incoming`: All incoming and own payments are visible
        
        - `none`: The account is not visible
        
        - `outgoing`: All outgoing and own payments are visible
        
        - `own`: Only payments performed / received by the operators are visible
      type: string
      enum:
        - full
        - incoming
        - none
        - outgoing
        - own

    OrderStatusEnum:
      description: >
        The possible statuses for an order

        Possible values are:
        
        - `completed`: The order was accepted by the seller and/or buyer and the related payment was done.
        
        - `disposed`: The order was marked as disposed because the seller and/or buyer were removed or they do not have any account in the order's currency.
        
        - `draft`: The order has been created by the seller, but has not yet been sent to the buyer for approval
        
        - `paymentCanceled`: The related payment was not done because was canceled after finish the authorization process.
        
        - `paymentDenied`: The related payment was not done because was denied.
        
        - `paymentExpired`: The related payment was not done because the pending authorization has expired.
        
        - `paymentPending`: The order was accepted by the seller and/or buyer and the related payment is waiting for authorization.
        
        - `pendingBuyer`: The order is pending by the buyer's action.
        
        - `pendingSeller`: The order is pending by the seller's action.
        
        - `rejectedByBuyer`: The order was rejected by the buyer.
        
        - `rejectedBySeller`: The order was rejected by the seller.
      type: string
      enum:
        - completed
        - disposed
        - draft
        - paymentCanceled
        - paymentDenied
        - paymentExpired
        - paymentPending
        - pendingBuyer
        - pendingSeller
        - rejectedByBuyer
        - rejectedBySeller

    OtpErrorCode:
      description: >
        Application-specific error codes for an OTP error.

        Possible values are:
        
        - `errorSendingSms`: An error has occurred trying to send the OTP through SMS.
        
        - `unexpected`: An unexpected error has occurred.
      type: string
      enum:
        - errorSendingSms
        - unexpected

    OutboundSmsStatusEnum:
      description: >
        Statuses for an outbound SMS message sent to an user.

        Possible values are:
        
        - `gatewayUreachable`: Network problem, or gateway server down
        
        - `invalid`: The parameters for sending an SMS message were invalid
        
        - `maxMessagesReached`: The maximum SMS messages for the user (or guest) have been reached
        
        - `rejected`: The gateway has rejected the SMS message
        
        - `success`: The SMS message was successfully sent
        
        - `timeout`: Timeout while connecting or waiting for a gateway server reply
        
        - `unexpected`: An unexpected error has occurred
      type: string
      enum:
        - gatewayUreachable
        - invalid
        - maxMessagesReached
        - rejected
        - success
        - timeout
        - unexpected

    PasswordInputMethodEnum:
      description: >
        Determines how passwords should be visually entered by users

        Possible values are:
        
        - `textBox`: A simple string should be requested
        
        - `virtualKeyboard`: A series of buttons should be presented to allow enter the password.
      type: string
      enum:
        - textBox
        - virtualKeyboard

    PasswordModeEnum:
      description: >
        Indicates how a password is handled

        Possible values are:
        
        - `generated`: Passwords are always generated
        
        - `manual`: Passwords are manually typed by users
        
        - `otp`: One Time Passwords. are always generated and can be used only once
        
        - `script`: Passwords are not stored in Cyclos, but handed-over for a script to verify them. 
        Is normally used to implement single-sign-on with other apps.
      type: string
      enum:
        - generated
        - manual
        - otp
        - script

    PasswordStatusEnum:
      description: >
        The password status

        Possible values are:
        
        - `active`: The password is active and valid
        
        - `disabled`: The password has been manually disabled
        
        - `expired`: The password is expired
        
        - `indefinitelyBlocked`: The password is blocked by exceeding the maximum attempts until it is manually unblocked
        
        - `neverCreated`: The password has never been created for the user
        
        - `pending`: The password was manually allowed (by admins) for the user to generate it, but it was not yet generated (never used for manual passwords)
        
        - `reset`: The password has been reset (can be used for login but must then be changed)
        
        - `temporarilyBlocked`: The password is temporarily blocked by exceeding the maximum attempts
      type: string
      enum:
        - active
        - disabled
        - expired
        - indefinitelyBlocked
        - neverCreated
        - pending
        - reset
        - temporarilyBlocked

    PaymentErrorCode:
      description: >
        Application-specific error codes for a payment error

        Possible values are:
        
        - `dailyAmountExceeded`: The maximum amount allowed per day was exceeded.
        
        - `dailyPaymentsExceeded`: The maximum count of payments allowed per day was exceeded.
        
        - `destinationUpperLimitReached`: The upper balance limit of the destination account was exceeded.
        
        - `insufficientBalance`: The account selected for the payment does not have enough balance
        
        - `monthlyAmountExceeded`: The maximum amount allowed per month was exceeded.
        
        - `monthlyPaymentsExceeded`: The maximum count of payments allowed per month was exceeded.
        
        - `paymentAmountExceeded`: The maximum amount allowed in the payment type was exceeded.
        
        - `pos`: A POS exception has happened when performing this payment. See the `posError` field for more details.
        
        - `timeBetweenPaymentsNotMet`: The minimum time between payments was not met.
        
        - `unexpected`: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.
        
        - `weeklyAmountExceeded`: The maximum amount allowed per week was exceeded.
        
        - `weeklyPaymentsExceeded`: The maximum count of payments allowed per week was exceeded.
        
        - `yearlyAmountExceeded`: The maximum amount allowed per year was exceeded.
      type: string
      enum:
        - dailyAmountExceeded
        - dailyPaymentsExceeded
        - destinationUpperLimitReached
        - insufficientBalance
        - monthlyAmountExceeded
        - monthlyPaymentsExceeded
        - paymentAmountExceeded
        - pos
        - timeBetweenPaymentsNotMet
        - unexpected
        - weeklyAmountExceeded
        - weeklyPaymentsExceeded
        - yearlyAmountExceeded

    PaymentRequestActionEnum:
      description: >
        Possible actions that could be confirmed with a device for a payment request

        Possible values are:
        
        - `accept`: Accept the payment request as the payer
        
        - `cancel`: Cancel the payment request as the payer
        
        - `changeExpiration`: Change the expiration date of the payment request as the payer
        
        - `deny`: Deny the payment request as the payer
        
        - `reschedule`: Reschedule the payment request as the payer
      type: string
      enum:
        - accept
        - cancel
        - changeExpiration
        - deny
        - reschedule

    PaymentRequestSchedulingEnum:
      description: >
        Determines how the generated payment of a payment request is scheduled. When not specified, the generated payment is processed directly.

        Possible values are:
        
        - `direct`: The generated payment won't be scheduled, but paid directly
        
        - `recurring`: The generated payment will be recurring
        
        - `scheduled`: The generated payment will be scheduled, once accepting, triggering a given number of installments
      type: string
      enum:
        - direct
        - recurring
        - scheduled

    PaymentRequestStatusEnum:
      description: >
        The status of a payment request

        Possible values are:
        
        - `canceled`: The payment request was canceled
        
        - `denied`: The payment request was denied by the receiver
        
        - `expired`: The payment request has expired - the received did not respond until the expiration date
        
        - `open`: The payment request is open and can be accepted
        
        - `processed`: The payment request was processed, and either a direct or scheduled payment was created from it
        
        - `scheduled`: The payment request has been accepted, and scheduled for processing on a future date
      type: string
      enum:
        - canceled
        - denied
        - expired
        - open
        - processed
        - scheduled

    PaymentSchedulingEnum:
      description: >
        Determines how a payment is scheduled. When not specified, direct payments are performed.

        Possible values are:
        
        - `direct`: The payment won't be scheduled, but paid directly
        
        - `recurring`: The payment will be recurring, repeated either by a limited number of occurrences or until cancel
        
        - `scheduled`: The payment will be scheduled, either to a single future date or multiple installments
      type: string
      enum:
        - direct
        - recurring
        - scheduled

    PersonalizeNfcErrorCode:
      description: >
        Application-specific error codes for a personalize NFC error

        Possible values are:
        
        - `tokenInUse`: The token specified for personalization is already in use (exists and it is active)
        
        - `unexpected`: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.
      type: string
      enum:
        - tokenInUse
        - unexpected

    PhoneKind:
      description: >
        Type of phone

        Possible values are:
        
        - `landLine`: A landline phone
        
        - `mobile`: A mobile phone
      type: string
      enum:
        - landLine
        - mobile

    PhysicalTokenTypeEnum:
      description: >
        The possible physical type for tokens. Determines how applications interact with hardware in order to read the token value.

        Possible values are:
        
        - `barcode`: A 1d barcode printed on a card
        
        - `nfcTag`: A NFC tag, normally a DESFire NFC card
        
        - `other`: Other
        
        - `qrCode`: A QR-code
        
        - `swipe`: A swipe card
      type: string
      enum:
        - barcode
        - nfcTag
        - other
        - qrCode
        - swipe

    PosErrorCode:
      description: >
        Application-specific error codes for a POS operation error

        Possible values are:
        
        - `payerInaccessiblePrincipal`: The specified payer cannot use the given identification method (principal type) in the POS channel.
        
        - `payerNotInChannel`: The specified payer user does not participate on the POS channel.
        
        - `payerNotOperative`: The specified payer has some restriction that renders he/she inoperative for POS operations. An example of such case is when the user has pending agreements.
        
        - `unexpected`: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.
      type: string
      enum:
        - payerInaccessiblePrincipal
        - payerNotInChannel
        - payerNotOperative
        - unexpected

    PrincipalTypeKind:
      description: >
        The kind of a principal type (user identification method)

        Possible values are:
        
        - `accessClient`: An access client token (remote application) identifies the user
        
        - `accountNumber`: An account number identifies the user
        
        - `customField`: A unique custom field identifies the user
        
        - `email`: The email identifies the user
        
        - `mobilePhone`: A mobile phone number identifies the user
        
        - `token`: A token identifies the user
        
        - `username`: The username identifies the user
      type: string
      enum:
        - accessClient
        - accountNumber
        - customField
        - email
        - mobilePhone
        - token
        - username

    ProductAssignmentActionEnum:
      description: >
        A possible action regarding product assignment / unassignment

        Possible values are:
        
        - `assing`: The product was assigned
        
        - `unassing`: The product was unassigned
      type: string
      enum:
        - assing
        - unassing

    ProductKind:
      description: >
        Kind of product

        Possible values are:
        
        - `administrator`: An administrator product
        
        - `broker`: A broker
        
        - `member`: A member product
      type: string
      enum:
        - administrator
        - broker
        - member

    PushNotificationEventKind:
      description: >
        Kind of events that can be triggered on push notifications

        Possible values are:
        
        - `accountStatus`: The account status (balance, reserved amount, etc) has changed
        
        - `deviceConfirmation`: A device confirmation was approved / rejected
        
        - `loggedOut`: The current session has been invalidated
        
        - `newMessage`: New message on the user's inbox
        
        - `newNotification`: New received notification
        
        - `ticket`: A ticket status has changed
      type: string
      enum:
        - accountStatus
        - deviceConfirmation
        - loggedOut
        - newMessage
        - newNotification
        - ticket

    RecordKind:
      description: >
        The possible kinds of a record, which can either belong to system or to an user

        Possible values are:
        
        - `system`: The record belongs to the system, and is unrelated to an user
        
        - `user`: The record belongs to a specific user
      type: string
      enum:
        - system
        - user

    RecordLayoutEnum:
      description: >
        The layout this record should be presented

        Possible values are:
        
        - `list`: Should show a regular search filters / list
        
        - `single`: There should be a single record, with the form directly
        
        - `tiled`: Should show the record list with a form to quickly add a new
      type: string
      enum:
        - list
        - single
        - tiled

    RecurringPaymentActionEnum:
      description: >
        Possible actions that could be confirmed with a device for a recurring payment

        Possible values are:
        
        - `cancel`: Cancel the recurring payment
      type: string
      enum:
        - cancel

    RecurringPaymentStatusEnum:
      description: >
        The status of a recurring payment

        Possible values are:
        
        - `canceled`: The recurring payment was manually canceled
        
        - `closed`: The recurring payment is closed, as the last scheduled occurrence was processed
        
        - `open`: The recurring payment is open, as there are more future occurrences
      type: string
      enum:
        - canceled
        - closed
        - open

    RedeemVoucherErrorCode:
      description: >
        Possible errors when redeeming a voucher

        Possible values are:
        
        - `notAllowedForUser`: This user cannot redeem this voucher
        
        - `notAllowedForVoucher`: This voucher cannot be redeemed
        
        - `notAllowedToday`: This voucher cannot be redeemed today
        
        - `notAllowedYet`: The redeem period for this voucher has not arrived yet
        
        - `payment`: There was an error when performing the payment
        
        - `unexpected`: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.
        
        - `userBlocked`: The user has been blocked by exceeding redeem tries
      type: string
      enum:
        - notAllowedForUser
        - notAllowedForVoucher
        - notAllowedToday
        - notAllowedYet
        - payment
        - unexpected
        - userBlocked

    ReferenceDirectionEnum:
      description: >
        The reference direction in relation to a given user

        Possible values are:
        
        - `given`: The reference was given from the given user to another user
        
        - `received`: The reference was received by the given user from another user
      type: string
      enum:
        - given
        - received

    ReferenceLevelEnum:
      description: >
        The reference level represents the satisfaction level

        Possible values are:
        
        - `bad`: Unsatisfied
        
        - `good`: Satisfied
        
        - `neutral`: Neutral
        
        - `veryBad`: Very unsatisfied
        
        - `veryGood`: Very satisfied
      type: string
      enum:
        - bad
        - good
        - neutral
        - veryBad
        - veryGood

    RoleEnum:
      description: >
        The main role the user has.

        Possible values are:
        
        - `administrator`: A user who can manage the system and other users.
        
        - `broker`: A user who can manage other users.
        
        - `member`: A regular user who can manage operators.
        
        - `operator`: A "sub-user" created by a member to manage his data.
      type: string
      enum:
        - administrator
        - broker
        - member
        - operator

    RunOperationResultColumnTypeEnum:
      description: >
        The data type for a custom operation column

        Possible values are:
        
        - `boolean`: Each cell value is a boolean
        
        - `currencyAmount`: Each cell value is an object with 2 properties: amount (number represented as string) and currency (of type `Currency`)
        
        - `date`: Each cell value is a date represented as string
        
        - `number`: Each cell value is a number, but may be represented as string
        
        - `string`: Each cell value is a string
      type: string
      enum:
        - boolean
        - currencyAmount
        - date
        - number
        - string

    ScheduledPaymentActionEnum:
      description: >
        Possible actions that could be confirmed with a device for a scheduled payment

        Possible values are:
        
        - `block`: Block the scheduled payment
        
        - `cancel`: Cancel the scheduled payment
        
        - `settle`: Settle the scheduled payment
        
        - `unblock`: Unblock the scheduled payment
      type: string
      enum:
        - block
        - cancel
        - settle
        - unblock

    ScheduledPaymentStatusEnum:
      description: >
        The status of a scheduled payment

        Possible values are:
        
        - `blocked`: The scheduled payment is blocked - won't have any installment processed until being unblocked again
        
        - `canceled`: The scheduled payment, as well as all open installments were canceled
        
        - `closed`: The scheduled payment is closed
        
        - `open`: The scheduled payment has open installments
      type: string
      enum:
        - blocked
        - canceled
        - closed
        - open

    SendMediumEnum:
      description: >
        Mediums used to send information to the user (e.g: a confirmation code)

        Possible values are:
        
        - `email`: The user will receive an email with the information
        
        - `sms`: The user will receive a sms with the information (only if there is at least one phone enabled for sms)
      type: string
      enum:
        - email
        - sms

    ShoppingCartCheckoutErrorCode:
      description: >
        Possible errors when checking out a shopping cart.

        Possible values are:
        
        - `insufficientBalance`: The origin account of the selected payment type used to make the amount reservation does not have enough balance.
        
        - `products`: There was an error related to the products contained in he shopping cart.
        
        - `unexpected`: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.
      type: string
      enum:
        - insufficientBalance
        - products
        - unexpected

    ShoppingCartErrorCode:
      description: >
        Possible errors when interacting with a shopping cart.

        Possible values are:
        
        - `canNotBuyFromSeller`: The authenticated user is not visible by the webshop's seller
        
        - `notEnoughStock`: There is not enough stock of the webshop ad to fulfill the requested quantity
        
        - `unexpected`: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information.
      type: string
      enum:
        - canNotBuyFromSeller
        - notEnoughStock
        - unexpected

    ShoppingCartItemAvailabilityEnum:
      description: >
        The possible status of a webshop advertisement in relation to its availability

        Possible values are:
        
        - `available`: The webshop advertisement is available and can be purchased
        
        - `outOfStock`: The webshop advertisement is now out of stock
        
        - `unavailable`: The webshop advertisement has been made unavailable and cannot be purchased anymore
      type: string
      enum:
        - available
        - outOfStock
        - unavailable

    ShoppingCartItemQuantityAdjustmentEnum:
      description: >
        The possible adjustments to a quantity-limited product added to shopping cart

        Possible values are:
        
        - `max`: The quantity was reduced to honor the maximum allowed quantity
        
        - `min`: The quantity was raised to honor the minimum allowed quantity
        
        - `stock`: The quantity was reduced to the maximum available stock quantity
      type: string
      enum:
        - max
        - min
        - stock

    SystemAlertTypeEnum:
      description: >
        The type of system alert

        Possible values are:
        
        - `accountFeeChargedNoFailures`: An account fee charge has finished without any failures
        
        - `accountFeeChargedWithFailures`: An account fee charge has finished with at least one failure
        
        - `applicationRestarted`: The application has been restarted, or started for the first time
        
        - `custom`: Custom alerts thrown by scripts
        
        - `maxGlobalSmsReached`: The groups under a certain configuration have run out of SMS messages
        
        - `maxIncorrectLoginAttempts`: Someone tried for a given number of tries to login with an invalid username
      type: string
      enum:
        - accountFeeChargedNoFailures
        - accountFeeChargedWithFailures
        - applicationRestarted
        - custom
        - maxGlobalSmsReached
        - maxIncorrectLoginAttempts

    TempImageTargetEnum:
      description: >
        The possible targets for a temporary image

        Possible values are:
        
        - `advertisement`: The image will be used for an advertisement of a specific user
        
        - `contactInfo`: The image will be used for an additional contact information of a specific user
        
        - `customValue`: The image will be used for a value of a specific custom field
        
        - `userProfile`: The image will be used as a profile image for an existing user
        
        - `userRegistration`: The image will be used as a profile image for a newly registered user
      type: string
      enum:
        - advertisement
        - contactInfo
        - customValue
        - userProfile
        - userRegistration

    TicketStatusEnum:
      description: >
        The status of a ticket

        Possible values are:
        
        - `approved`: The ticket was approved by the payer and is waiting to be processed by the receiver to generate the payment
        
        - `canceled`: The ticket was canceled by the receiver before being approved
        
        - `expired`: The ticket has expired without being approved by a payer or canceled by the receiver until the expiration date
        
        - `open`: The ticket was created, but not approved yet
        
        - `processed`: The ticket was approved and processed and the payment was generated
      type: string
      enum:
        - approved
        - canceled
        - expired
        - open
        - processed

    TimeFieldEnum:
      description: >
        Determines a time field, such as seconds, hours or months

        Possible values are:
        
        - `days`: Day(s)
        
        - `hours`: Hour(s)
        
        - `millis`: Millisecond(s)
        
        - `minutes`: Minute(s)
        
        - `months`: Month(s)
        
        - `seconds`: Second(s)
        
        - `weeks`: Week(s)
        
        - `years`: Year(s)
      type: string
      enum:
        - days
        - hours
        - millis
        - minutes
        - months
        - seconds
        - weeks
        - years

    TimeFormatEnum:
      description: >
        The format for times

        Possible values are:
        
        - `h12`: 12-hour with AM/PM indicator
        
        - `h24`: 24-hour
      type: string
      enum:
        - h12
        - h24

    TokenStatusEnum:
      description: >
        The possible statuses for a token

        Possible values are:
        
        - `activationExpired`: The token has exceeded the activation deadline.
        
        - `active`: The token is active and can be used.
        
        - `blocked`: The token is blocked from being used.
        
        - `canceled`: The token is canceled and cannot be used.
        
        - `expired`: The token has exceeded the expiration date.
        
        - `pending`: The token has been assigned to an user, but it's still pending for activation.
        
        - `unassigned`: The token is not assigned to an user.
      type: string
      enum:
        - activationExpired
        - active
        - blocked
        - canceled
        - expired
        - pending
        - unassigned

    TokenTypeEnum:
      description: >
        The kind of a token principal type.

        Possible values are:
        
        - `barcode`: A barcode with the token
        
        - `nfcDevice`: A device (e.g. cell phone) with support for NFC
        
        - `nfcTag`: A NFC tag/card
        
        - `other`: Any other type containing a token
        
        - `qrcode`: A QR code containing a token
        
        - `swipe`: A swipe/magnetic card containing the token
      type: string
      enum:
        - barcode
        - nfcDevice
        - nfcTag
        - other
        - qrcode
        - swipe

    TransOrderByEnum:
      description: >
        Contains the possible 'order by' values when searching for transfers / transactions

        Possible values are:
        
        - `amountAsc`: The result is ordered by amount descendant
        
        - `amountDesc`: The result is ordered by amount descendant
        
        - `dateAsc`: The result is ordered by date ascendant
        
        - `dateDesc`: The result is ordered by date descendant
      type: string
      enum:
        - amountAsc
        - amountDesc
        - dateAsc
        - dateDesc

    TransactionAuthorizationActionEnum:
      description: >
        An action performed when a transaction was pending authorization

        Possible values are:
        
        - `authorized`: The transaction was authorized
        
        - `canceled`: The authorization process was canceled by the payer/admin
        
        - `denied`: The transaction was denied (rejected)
        
        - `expired`: The authorization process has expired by system
      type: string
      enum:
        - authorized
        - canceled
        - denied
        - expired

    TransactionAuthorizationStatusEnum:
      description: >
        The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.

        Possible values are:
        
        - `authorized`: The transaction was fully authorized and is processed
        
        - `canceled`: The authorization submission was canceled by the submitter
        
        - `denied`: The authorization was denied
        
        - `expired`: The pending authorization has expired
        
        - `pending`: The transaction is pending authorization
      type: string
      enum:
        - authorized
        - canceled
        - denied
        - expired
        - pending

    TransactionAuthorizationTypeEnum:
      description: >
        Defines which kind of authorization a transaction is through. Only returned if the `kind` is either `payment`, `scheduledPayment` or `recurringPayment` and the transaction is pending for authorization.

        Possible values are:
        
        - `level`: A transaction is going through some authorization level
        
        - `operator`: An operator performed a payment that needs to be authorized by his member or other operators
      type: string
      enum:
        - level
        - operator

    TransactionKind:
      description: >
        The kind of a transaction

        Possible values are:
        
        - `chargeback`: Chargeback of a given transfer
        
        - `externalPayment`: A payment to an external user
        
        - `import`: An imported transaction
        
        - `order`: Transaction generated by confirming an order
        
        - `payment`: A direct payment
        
        - `paymentRequest`: A request for another user to accept a payment
        
        - `recurringPayment`: A payment which is processed again periodically
        
        - `scheduledPayment`: A scheduled payment which is either a payment scheduled for a future date or has multiple installments
        
        - `ticket`: A payment whose the payer is unknown
      type: string
      enum:
        - chargeback
        - externalPayment
        - import
        - order
        - payment
        - paymentRequest
        - recurringPayment
        - scheduledPayment
        - ticket

    TransactionSubjectsEnum:
      description: >
        Reference to none, one of (from or to) or both subjects of a transaction (or transfer)

        Possible values are:
        
        - `both`: Reference to both from and to subjects of the transaction
        
        - `from`: Reference to the transaction from
        
        - `none`: Reference to none of the transaction subjects
        
        - `to`: Reference to the transaction to
      type: string
      enum:
        - both
        - from
        - none
        - to

    TransferDirectionEnum:
      description: >
        Indicates whether from an account POV a transfer is a credit or debit

        Possible values are:
        
        - `credit`: The transfer impacts the balance positively
        
        - `debit`: The transfer impacts the balance negatively
      type: string
      enum:
        - credit
        - debit

    TransferKind:
      description: >
        Indicates the reason the transfer was created

        Possible values are:
        
        - `accountFee`: A transfer generated by an account fee charge
        
        - `chargeback`: A transfer which is a chargeback of another transfer
        
        - `import`: An imported transfer
        
        - `initialCredit`: A transfer which is the initial credit for a newly created account
        
        - `installment`: A transfer generated when processing a scheduled / recurring payment installment / occurrence
        
        - `payment`: A transfer generated by a direct payment or accepting a webshop order
        
        - `transferFee`: A transfer generated by a transfer fee charge
      type: string
      enum:
        - accountFee
        - chargeback
        - import
        - initialCredit
        - installment
        - payment
        - transferFee

    UiKind:
      description: >
        Indicates the type of user interface

        Possible values are:
        
        - `custom`: A custom front-end application. Has no headers, footers or theme
        
        - `main`: The main web user interface
        
        - `mobile`: The mobile application user interface
        
        - `pay`: The Ticket / Easy invoice confirmation application user interface
      type: string
      enum:
        - custom
        - main
        - mobile
        - pay

    UnauthorizedErrorCode:
      description: >
        Error codes for 401 Unauthorized HTTP status.

        Possible values are:
        
        - `blockedAccessClient`: The access client used for access is blocked
        
        - `invalidAccessClient`: The access client used for access is invalid
        
        - `invalidChannelUsage`: Attempt to login on a stateless-only channel, or use stateless in a stateful-only channel, or invoke as guest in a channel configuration which is only for users
        
        - `invalidNetwork`: Attempt to access a network that has been disabled
        
        - `loggedOut`: The session token used for access is invalid
        
        - `login`: Either user identification (principal) or password are invalid. May have additional information, such as the user / password status
        
        - `missingAuthorization`: Attempt to access an operation as guest, but the operation requires authentication
        
        - `remoteAddressBlocked`: The IP address being used for access has been blocked by exceeding tries with invalid users
        
        - `unauthorizedAddress`: The user cannot access the system using an IP address that is not white-listed
        
        - `unauthorizedUrl`: The user's configuration demands access using a specific URL, and this access is being done using another one
      type: string
      enum:
        - blockedAccessClient
        - invalidAccessClient
        - invalidChannelUsage
        - invalidNetwork
        - loggedOut
        - login
        - missingAuthorization
        - remoteAddressBlocked
        - unauthorizedAddress
        - unauthorizedUrl

    UserAddressResultEnum:
      description: >
        Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times.

        Possible values are:
        
        - `all`: All addresses are returned.
        
        - `nearest`: The nearest address from the reference location is returned. Only usable if a reference coordinate (`latitude` and `longitude`)
        
        - `none`: Addresses are not returned.
        
        - `primary`: The primary (default) user address is returned
      type: string
      enum:
        - all
        - nearest
        - none
        - primary

    UserAlertTypeEnum:
      description: >
        The type of user alert

        Possible values are:
        
        - `custom`: Custom alerts thrown by scripts
        
        - `givenVeryBadRefs`: A user has exceeded the maximum number of given very bad references
        
        - `insufficientBalanceForInitialCredit`: A user account's initial credit couldn't be granted because the source account lacked funds
        
        - `maxDeviceActivationAttemptsReached`: A user has reached the maximum number of attempts to activate a device by code
        
        - `maxDeviceConfirmationCheckAttemptsReached`: A user has reached the maximum number of attempts to check for a processed device confirmation
        
        - `maxTokenActivationAttemptsReached`: A user has reached the maximum number of attempts to activate a token
        
        - `maxUserLocalizationAttemptsReached`: A user has reached the maximum number of attempts to find other users
        
        - `maxVoucherRedeemAttemptsReached`: A user has reached the maximum number of attempts to redeem a voucher
        
        - `moveUserAutomaticallyFailed`: A user couldn't be moved automatically to another group
        
        - `passwordDisabledByTries`: A user password has been disabled by exceeding the wrong attempts
        
        - `passwordTemporarilyBlocked`: A user password has been temporarily blocked by exceeding the wrong attempts
        
        - `receivedVeryBadRefs`: A user has exceeded the maximum number of received very bad references
        
        - `scheduledPaymentFailed`: An scheduled payment has failed
      type: string
      enum:
        - custom
        - givenVeryBadRefs
        - insufficientBalanceForInitialCredit
        - maxDeviceActivationAttemptsReached
        - maxDeviceConfirmationCheckAttemptsReached
        - maxTokenActivationAttemptsReached
        - maxUserLocalizationAttemptsReached
        - maxVoucherRedeemAttemptsReached
        - moveUserAutomaticallyFailed
        - passwordDisabledByTries
        - passwordTemporarilyBlocked
        - receivedVeryBadRefs
        - scheduledPaymentFailed

    UserImageKind:
      description: >
        Determines the kind of an user image

        Possible values are:
        
        - `custom`: User custom images are additional images that can be used on rich text contents.
        
        - `profile`: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results.
      type: string
      enum:
        - custom
        - profile

    UserMenuEnum:
      description: >
        Which user menu should a data be displayed

        Possible values are:
        
        - `banking`: Banking / accounts
        
        - `community`: Interaction with other users
        
        - `marketplace`: Marketplace / advertisements
        
        - `personal`: Personal data
      type: string
      enum:
        - banking
        - community
        - marketplace
        - personal

    UserOrderByEnum:
      description: >
        Possible options for ordering the results of an user search.

        Possible values are:
        
        - `alphabeticallyAsc`: Users are ordered by name (or whatever field is set to format users) in ascending order.
        
        - `alphabeticallyDesc`: Users are ordered by name (or whatever field is set to format users) in descending order.
        
        - `creationDate`: Newly registered users are returned first.
        
        - `distance`: Only useful when providing a location, will return nearer advertisements first.
        
        - `random`: Users will be randomly returned
        
        - `relevance`: This is the default if keywords are used. Best matching users come first.
      type: string
      enum:
        - alphabeticallyAsc
        - alphabeticallyDesc
        - creationDate
        - distance
        - random
        - relevance

    UserRegistrationStatusEnum:
      description: >
        The status of the user after the registration

        Possible values are:
        
        - `active`: The user is initially active
        
        - `emailValidation`: The user has received an e-mail, with a link to verify the e-mail address. Once verified, the registration will be complete
        
        - `inactive`: The user is initially inactive, and an administrator needs to manually activate the user
      type: string
      enum:
        - active
        - emailValidation
        - inactive

    UserRelationshipEnum:
      description: >
        How the authenticated user is related to a given user

        Possible values are:
        
        - `administrator`: The authenticated user is an administrator that manages the given user
        
        - `broker`: The authenticated user is a broker of the given user
        
        - `brokered`: The authenticated user is a member managed by the given broker
        
        - `none`: There is no special relation between the authenticated user and the given user
        
        - `owner`: The given user is an operator of the authenticated user
        
        - `sameOwner`: Both the given user and the authenticated user are operators of the same owner
        
        - `self`: The given user is the authenticated user
      type: string
      enum:
        - administrator
        - broker
        - brokered
        - none
        - owner
        - sameOwner
        - self

    UserStatusEnum:
      description: >
        The possible statuses for an user

        Possible values are:
        
        - `active`: The user is active and can use the system normally.
        
        - `blocked`: The user has been blocked from accessing the system. Other users still see him/her.
        
        - `disabled`: The user has been disabled - he/she cannot access the system and is invisible by other users.
        
        - `pending`: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users.
        
        - `purged`: The user was permanently removed and had all his private data removed. Only transactions are kept for historical reasons.
        
        - `removed`: The user was permanently removed. It's profile is kept for historical purposes.
      type: string
      enum:
        - active
        - blocked
        - disabled
        - pending
        - purged
        - removed

    UsersWithBalanceOrderByEnum:
      description: >
        Contains the possible 'order by' values when searching for users with balances

        Possible values are:
        
        - `alphabeticallyAsc`: Users are ordered by name (or whatever field is set to format users) in ascending order.
        
        - `alphabeticallyDesc`: Users are ordered by name (or whatever field is set to format users) in descending order.
        
        - `balanceAsc`: User are ordered by balance, lower balances first.
        
        - `balanceDesc`: User are ordered by balance, higher balances first.
      type: string
      enum:
        - alphabeticallyAsc
        - alphabeticallyDesc
        - balanceAsc
        - balanceDesc

    VoucherActionEnum:
      description: >
        Possible actions that could be confirmed with a device for a voucher

        Possible values are:
        
        - `cancel`: Cancel the voucher
        
        - `changeExpiration`: Change the expiration date of a voucher
      type: string
      enum:
        - cancel
        - changeExpiration

    VoucherCancelActionEnum:
      description: >
        Indicates what happens if a voucher is canceled, if it can be canceled

        Possible values are:
        
        - `cancelAndRefund`: A single bought voucher is canceled and the amount is refunded
        
        - `cancelGenerated`: Cancels a single generated voucher
        
        - `cancelPendingPack`: Cancels more than one bought vouchers whose buy payment is pending authorization
        
        - `cancelPendingSingle`: Cancels a single bought vouchers whose buy payment is pending authorization
      type: string
      enum:
        - cancelAndRefund
        - cancelGenerated
        - cancelPendingPack
        - cancelPendingSingle

    VoucherCreationTypeEnum:
      description: >
        Indicates how a voucher was created

        Possible values are:
        
        - `bought`: The voucher was bought by an user
        
        - `generated`: The voucher was generated by an administrator
      type: string
      enum:
        - bought
        - generated

    VoucherOrderByEnum:
      description: >
        The voucher search result order

        Possible values are:
        
        - `creationDateAsc`: Order by creation date, ascending
        
        - `creationDateDesc`: Order by creation date, descending (default)
        
        - `expirationDateAsc`: Order by expiration date, ascending
        
        - `expirationDateDesc`: Order by expiration date, descending
        
        - `redeemDateAsc`: Order by redeem date, ascending, then expiration date, ascending
        
        - `redeemDateDesc`: Order by redeem date, descending, then expiration date, descending
      type: string
      enum:
        - creationDateAsc
        - creationDateDesc
        - expirationDateAsc
        - expirationDateDesc
        - redeemDateAsc
        - redeemDateDesc

    VoucherRelationEnum:
      description: >
        The ways a voucher is related to an user

        Possible values are:
        
        - `bought`: A voucher the user has bought
        
        - `redeemed`: A voucher the user has redeemed
      type: string
      enum:
        - bought
        - redeemed

    VoucherStatusEnum:
      description: >
        The voucher statuses

        Possible values are:
        
        - `canceled`: The voucher was canceled, and cannot be further used
        
        - `expired`: The voucher has expired without being redeemed
        
        - `open`: The voucher has been generated / bought, and is open
        
        - `pending`: The voucher has been bought, and the corresponding payment is pending for authorization
        
        - `redeemed`: The voucher has been redeemed, and the corresponding payment was done
      type: string
      enum:
        - canceled
        - expired
        - open
        - pending
        - redeemed

    WeekDayEnum:
      description: >
        The days of the week

        Possible values are:
        
        - `fri`: Friday
        
        - `mon`: Monday
        
        - `sat`: Saturday
        
        - `sun`: Sunday
        
        - `thu`: Thursday
        
        - `tue`: Tuesday
        
        - `wed`: Wednesday
      type: string
      enum:
        - fri
        - mon
        - sat
        - sun
        - thu
        - tue
        - wed

    AcceptOrReschedulePaymentRequest:
      description: >-
        Parameters for accepting or rescheduling payment requests.
      type: object
      properties:
        comments:
          description: >-
            A comment the payer can set.
          type: string
        processDate:
          description: >-
            The date the payment request must be processed.
          type: string
          format: date-time

    AcceptOrderByBuyer:
      description: >-
        Parameters used to accept an order by the buyer.
      allOf:
        - $ref: '#/components/schemas/BaseOrderAction'
        - type: object
          properties:
            paymentType:
              description: >-
                Either the internal name or id of the selected payment type (if
                any).
              type: string

    AcceptOrderBySeller:
      description: >-
        Parameters used to accept an order by the seller.
      allOf:
        - $ref: '#/components/schemas/BaseOrderAction'
        - type: object

    Account:
      description: >-
        Contains basic data for an account
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            number:
              description: >-
                The account number
              type: string
            type:
              description: >-
                Reference to the account type
              allOf:
                - $ref: '#/components/schemas/EntityReference'

    AccountBalanceEntry:
      description: >-
        Contains the balance on a given date
      type: object
      properties:
        date:
          description: >-
            The balance date
          type: string
          format: date-time
        amount:
          description: >-
            The balance
          type: string
          format: number

    AccountBalanceHistoryResult:
      description: >-
        The result for an account balance history request
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            account:
              $ref: '#/components/schemas/AccountWithHistoryStatus'
            interval:
              description: >-
                The actually used interval between data points. Specially useful
                when no interval is passed as parameter, and one is assumed.
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            balances:
              description: >-
                Each data point
              type: array
              items:
                $ref: '#/components/schemas/AccountBalanceEntry'

    AccountBalanceLimitsData:
      description: >-
        Data regarding the lower and upper limits of a user account.
      allOf:
      - $ref: '#/components/schemas/BaseAccountBalanceLimits'
      - type: object
        properties:
          account:
            $ref: '#/components/schemas/AccountWithCurrency'
          user:
            $ref: '#/components/schemas/User'
          editable:
            description: >-
              Can the authenticated user manage the limits of this account?
            type: boolean
          defaultCreditLimit:
            description: The default credit limit from the user products.
            type: string
            format: number
          defaultUpperCreditLimit:
            description: The default upper credit limit from the user products.
            type: string
            format: number
          history:
            description: The history of balance limit changes.
            type: array
            items:
              $ref: '#/components/schemas/AccountBalanceLimitsLog'
          confirmationPasswordInput:
            description: >-
              If a confirmation password is used, contains the definitions on how to
              request that password from the user. This confirmation password is required
              when performing sensible actions. Sometimes this is dynamic, for example,
              the confirmation might be configured to be used only once per session, or
              operations like payments may have a limit per day to be without confirmation
              (pinless).
            allOf:
              - $ref: '#/components/schemas/PasswordInput'


    AccountBalanceLimitsLog:
      description: >-
        Log of a balance limits change
      allOf:
      - $ref: '#/components/schemas/BaseAccountBalanceLimits'
      - type: object
        properties:
          by:
            $ref: '#/components/schemas/User'
          date:
            description: >-
              The date the limit change was performed
            type: string
            format: date-time
          comment:
            description: >-
              Comments supplied by the manager that performed the limit change.
            type: string

    AccountBalanceLimitsQueryFilters:
      description: Parameters for searching account balance limits
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            kind:
              $ref: '#/components/schemas/BalanceLimitKind'
            currency:
              description: >-
                Either id or internal name of the currency
              type: string
            accountType:
              description: >-
                Either id or internal name of the account type
              type: string
            groups:
              description: >-
                Either the ids or internal names of user group
              type: array
              items:
                type: string
            broker:
              description: >-
                DEPRECATED: Use `brokers` instead. Will be removed in 4.14.
                Either the ids or identification methods of users' broker
              deprecated: true
              x-remove-version: 4.14
              type: string
            brokers:
              description: >-
                Either the ids or identification methods of users' broker
              type: array
              items:
                type: string
            user:
              description: Either the id or identifier of the account owner
              type: string
            by:
              description: >-
                Either the id or identifier of the user that performed the change
              type: string
            customLimit:
              description: >-
                When set, returns only accounts that have a custom (if true) or
                have default (false) lower limit.
              type: boolean
            customLimitRange:
              description: >-
                The minimum / maximum customized limit. Is only used when
                `customLimit` is set to true.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: number
            customUpperLimit:
              description: >-
                When set, returns only accounts that have a custom (if true) or
                have default (false) upper limit.
              type: boolean
            customUpperLimitRange:
              description: >-
                The minimum / maximum customized upper limit. Is only used when
                `customUpperLimit` is set to true.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: number

    AccountBalanceLimitsResult:
      description: >-
        Result for the list of user account balance limits
      allOf:
      - $ref: '#/components/schemas/BaseAccountBalanceLimits'
      - type: object
        properties:
          account:
            $ref: '#/components/schemas/AccountWithCurrency'

    AccountHistoryQueryFilters:
      description: >-
        Parameters for searching an account's history
      allOf:
        - $ref: '#/components/schemas/BaseTransferQueryFilters'
        - type: object
          properties:
            customFields:
              type: array
              items:
                type: string
              description: >-
                Transaction custom field values used as filters. Is a
                comma-separated array, where each part consists in two parts:
                the internal name (or custom field id) of the field, and a value,
                both separated by : (colon).  For example,
                `customFields=field1:value1,field2:value2`. Sometimes
                multiple values are accepted. In this case, the multiple values are
                separated by pipes. For example,
                customFields=field1:valueA|valueB. Enumerated fields accept
                multiple values, while numeric and date fields also accept ranges,
                which are two values, pipe-separated. For example,
                `customFields=rank:bronze|silver,documentDate:2000-01-01|2001-12-31`
                would match results whose custom field with internal name `rank` is
                either `bronze` or `silver`, and whose `documentDate` is between
                January 1, 2000 and December 31, 2001. To specify a single bound in
                ranges (like birth dates before December 31, 2001), use a pipe in
                one of the values, like `customFields=documentDate:|2001-12-31`.

                A note for dynamic custom fields: If a script is used to
                generate possible values for search, the list will be returned in
                the  corresponding data, and it is sent as a pipe-separated list of
                values (not labels). For example:
                `customFields=dynamic:a|b|c`. However, it is also possible to
                perform a partial-match search using the dynamic value label. In
                this case a single value, prefixed or enclosed by single quotes
                should be used. For example:
                `customFields=dynamic:'business` or
                `customFields=dynamic:'business'`.
            direction:
              $ref: '#/components/schemas/TransferDirectionEnum'

    AccountHistoryResult:
      description: >-
        Represents a balance transfer between accounts, as viewed from the
        point-of-view account of a a specific account. This means that credits will
        have a positive amount, while debits will be negative.
      allOf:
        - $ref: '#/components/schemas/TransResult'
        - type: object
          properties:
            relatedAccount:
              description: >-
                The account that either received / sent the balance
              allOf:
                - $ref: '#/components/schemas/AccountWithOwner'
            relatedName:
              description: >-
                Contains an optional custom from / to name, which can be set when
                the transaction is performed.
              type: string
            customValues:
              type: object
              description: >-
                Holds the custom field values, keyed by field internal name or id.
                The format of the value depends on the custom field type. In order
                to lookup the custom fields, use the `GET
                /{owner}/accounts/{accountType}/data-for-history` operation, and
                lookup each field by either internal name (if configured) or id.
                Example: `{..., "customValues": {"linkedAccount":
                "123456789"}}`
              additionalProperties:
                type: string
            transaction:
              description: >-
                If this balance transfer was originated from a transaction (like a
                payment or scheduled payment), contains the a simple reference to
                this transaction.

                WARNING: The only fields that will be filled-in are `id`,
                `transactionNumber` and `kind`.
              allOf:
                - $ref: '#/components/schemas/Transaction'
            statuses:
              description: >-
                contains the current status internal name or id, keyed by the flow
                internal name or id
              type: object
              additionalProperties:
                type: string

    AccountHistoryStatus:
      description: >-
        Contains instant status information, as inherited from
        `AccountStatus`,  plus status that depend on an account history query
        parameters
      allOf:
        - $ref: '#/components/schemas/AccountStatus'
        - type: object
          properties:
            beginDate:
              description: >-
                The reference begin date
              type: string
              format: date-time
            balanceAtBegin:
              description: >-
                The raw balance at the beginning of the informed period
              type: string
              format: number
            endDate:
              description: >-
                The reference end date
              type: string
              format: date-time
            balanceAtEnd:
              description: >-
                The raw balance at the end of the informed period
              type: string
              format: number
            incoming:
              description: >-
                The summary of incoming transfers
              allOf:
                - $ref: '#/components/schemas/AmountSummary'
            outgoing:
              description: >-
                The summary of outgoing transfers
              allOf:
                - $ref: '#/components/schemas/AmountSummary'
            netInflow:
              description: >-
                The raw difference between incoming and outgoing transfers in the
                informed period
              type: string
              format: number

    AccountNotificationSettings:
      description: >-
        Settings regarding notifications for a given account
      type: object
      properties:
        paymentAmount:
          description: >-
            The minimum / maximum amount for payment notifications to be sent
          allOf:
            - $ref: '#/components/schemas/DecimalRange'


    AccountNotificationSettingsView:
      description: >-
        Settings regarding notifications for a given account
      allOf:
        - $ref: '#/components/schemas/AccountNotificationSettings'
        - type: object
          properties:
            accountType:
              $ref: '#/components/schemas/AccountType'

    AccountPermissions:
      description: >-
        Permissions over an account
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountWithCurrency'
        visible:
          description: >-
            Whether the account also is visible for the logged user or, if false
            means it is only accessible. A non visible account still is operative,
            i.e the user could make/receive payments from/to it (i.e is
            accessible) but can not make a transfers history search for it.
          type: boolean
        viewStatus:
          description: >-
            Indicates whether the logged user can see the account status for this
            account. Some restricted operators can view the account history, but
            not the account status (balance and so on).
          type: boolean
        systemPayments:
          description: >-
            Payment types allowed to be performed to system accounts.
          type: array
          items:
            $ref: '#/components/schemas/RelatedTransferType'
        userPayments:
          description: >-
            Payment types allowed to be performed to other users
          type: array
          items:
            $ref: '#/components/schemas/RelatedTransferType'
        selfPayments:
          description: >-
            Payment types allowed to be performed to other self accounts. Only
            returned for user accounts.
          type: array
          items:
            $ref: '#/components/schemas/RelatedTransferType'
        posPayments:
          description: >-
            Payment types allowed to be used on POS (receive payments from other
            users). Only returned for user accounts.
          type: array
          items:
            $ref: '#/components/schemas/RelatedTransferType'

    AccountStatus:
      description: >-
        Status information for an account
      type: object
      properties:
        balance:
          description: >-
            The raw account balance
          type: string
          format: number
        creditLimit:
          description: >-
            The maximum negative balance an account may get
          type: string
          format: number
        upperCreditLimit:
          description: >-
            The maximum positive balance an account may get
          type: string
          format: number
        reservedAmount:
          description: >-
            The reserved amount is part of the raw balance, but cannot be used for
            payments because of some other events, like payments pending
            authorization, confirmed webshop orders, scheduled payments (when
            configured to reserve the total amount) and so on.
          type: string
          format: number
        availableBalance:
          description: >-
            The available balance to be used, taking into account the raw balance,
            credit limit and reserved amount
          type: string
          format: number
        negativeSince:
          description: >-
            If the account is negative, contains the date since it became so
          type: string
          format: date-time
        aRate:
          description: >-
            The balance aging counter
          type: string
          format: number
        dRate:
          description: >-
            The balance maturity
          type: string
          format: number
        rateBalanceCorrection:
          type: string
          format: number
        virtualRatedBalance:
          type: string
          format: number

    AccountType:
      description: >-
        A reference for the account type, together with its currency
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            currency:
              $ref: '#/components/schemas/Currency'

    AccountWithCurrency:
      description: >-
        Contains account data, plus currency reference
      allOf:
        - $ref: '#/components/schemas/Account'
        - type: object
          properties:
            currency:
              $ref: '#/components/schemas/Currency'

    AccountWithHistoryStatus:
      description: >-
        Account data plus account history status information
      allOf:
        - $ref: '#/components/schemas/AccountWithOwnerAndCurrency'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/AccountHistoryStatus'

    AccountWithOwner:
      description: >-
        Contains account data, plus account owner reference
      allOf:
        - $ref: '#/components/schemas/Account'
        - type: object
          properties:
            user:
              description: >-
                Only returned if `kind` is `user`. Is a reference to the owner user.
              allOf:
                - $ref: '#/components/schemas/User'
            kind:
              $ref: '#/components/schemas/AccountKind'

    AccountWithOwnerAndCurrency:
      description: >-
        Contains account data, plus owner and currency reference
      allOf:
        - $ref: '#/components/schemas/AccountWithOwner'
        - type: object
          properties:
            currency:
              $ref: '#/components/schemas/Currency'

    AccountWithStatus:
      description: >-
        Account data plus status information
      allOf:
        - $ref: '#/components/schemas/AccountWithCurrency'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/AccountStatus'

    ActivateClientResult:
      description: >-
        Data about an access client activation
      type: object
      properties:
        token:
          description: >-
            The generated access client token. It should be passed using the
            `Access-Client-Token` header. If a prefix was informed on activation, it
            will not be returned, here, but should be sent prepending the returned
            token
          type: string
        accessClient:
          description: >-
            A reference to the activated access client
          allOf:
            - $ref: '#/components/schemas/EntityReference'
        accessClientType:
          description: >-
            A reference to the access client type
          allOf:
            - $ref: '#/components/schemas/EntityReference'

    Ad:
      description: >-
        A advertisement is a structured data stored either for a user or for system
        (a general advertisement, unrelated to a user).
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            image:
              description: >-
                The primary advertisement image
              allOf:
                - $ref: '#/components/schemas/Image'
            kind:
              $ref: '#/components/schemas/AdKind'

    AdBasicData:
      description: >-
        Contains data shared by both AdDataForNew and AdDataForEdit
      type: object
      properties:
        customFields:
          description: >-
            The possible editable advertisement custom fields
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        requiresAuthorization:
          description: >-
            Indicates whether advertisements require an authorization from the
            administration in order to be published for other users to see
          type: boolean
        canCreateNew:
          description: >-
            Indicates whether the user can create a new advertisement (if not reached max setting)
          type: boolean
        maxCategoriesPerAd:
          description: >-
            Indicates if user can select single or multiples categories per advertisement
          type: integer
        maxImages:
          description: >-
            Indicates the maximum amount of images the user can upload for an advertisement
          type: integer
        categories:
          description: >-
            The advertisement categories each with its children, forming a tree
          type: array
          items:
            $ref: '#/components/schemas/AdCategoryWithChildren'
        addresses:
          description: >-
            The addresses of the advertisement owner, so specific ones can be linked
            to the advertisement.
          type: array
          items:
            $ref: '#/components/schemas/Address'
        currencies:
          description: >-
            The currencies the authenticated user may use to specify the advertisement price
          type: array
          items:
            $ref: '#/components/schemas/Currency'
        kind:
          description: >-
            The advertisement kind this data is related to.
          allOf:
            - $ref: '#/components/schemas/AdKind'
        owner:
           description: >-
             The owner of the advertisement.
           allOf:
             - $ref: '#/components/schemas/User'


    AdCategoryWithChildren:
      description: >-
        An advertisement category, together with its children
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            image:
              $ref: '#/components/schemas/Image'
            children:
              description: >-
                The child categories
              type: array
              items:
                $ref: '#/components/schemas/AdCategoryWithChildren'

    AdCategoryWithParent:
      description: >-
        An advertisement category, together with its parent
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            parent:
              $ref: '#/components/schemas/AdCategoryWithParent'

    AdDataForEdit:
      description: >-
        Contains data for editing a new advertisement
      allOf:
        - $ref: '#/components/schemas/AdBasicData'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/AdStatusEnum'
            edit:
              type: boolean
              description: >-
                Indicates whether the current ad can be edited by the currently
                authenticated used.
            remove:
              type: boolean
              description: >-
                Indicates whether the current ad can be edited by the currently
                authenticated used.
            creationDate:
              description: >-
                The creation date the advertisement was created
              type: string
              format: date-time
            advertisement:
              description: >-
                The advertisement that is being edited
              allOf:
                - $ref: '#/components/schemas/AdEdit'
            binaryValues:
              description: >-
                Holds the current values for file / image custom fields as lists of
                `StoredFile`s / `Image`s.
              allOf:
                - $ref: '#/components/schemas/CustomFieldBinaryValues'

    AdDataForNew:
      description: >-
        Contains data for creating a new advertisement
      allOf:
        - $ref: '#/components/schemas/AdBasicData'
        - type: object
          properties:
            advertisement:
              description: >-
                The advertisement that is being created
              allOf:
                - $ref: '#/components/schemas/AdNew'

    AdDataForSearch:
      description: >-
        Data for a general search of advertisements
      allOf:
        - $ref: '#/components/schemas/BaseAdDataForSearch'
        - type: object
          properties:
            groups:
              description: >-
                The groups the authenticated user can use to filter users. Admins
                can always filter by groups, while users depend on a permission,
                which can be to only view group sets, only groups or none.
              type: array
              items:
                $ref: '#/components/schemas/Group'
            defaultGroups:
              description: >-
                Use the groups returned in the query instead.



                The internal names (or ids, if missing) of the groups which should
                be presented by default on user search
              deprecated: true
              x-remove-version: 4.14
              type: array
              items:
                type: string
            hidePrice:
              description: >-
                Indicates whether show or not the advertisements price to guests
              type: boolean
            hideOwner:
              description: >-
                Indicates whether show or not the advertisements owner to guests
              type: boolean
            query:
              description: >-
                Default query filters to search advertisements
              allOf:
                - $ref: '#/components/schemas/AdQueryFilters'

    AdDetailed:
      x-abstract: true
      description: >-
        Contains data which is common for `AdResult` and `AdView`
      allOf:
        - $ref: '#/components/schemas/BaseAdDetailed'
        - type: object
          properties:
            description:
              description: >-
                The advertisement description content, formatted as HTML
              type: string
            owner:
              $ref: '#/components/schemas/User'
            publicationPeriod:
              $ref: '#/components/schemas/DatePeriod'
            price:
              description: >-
                The regular price.
              type: string
              format: number
            stockQuantity:
              description: >-
                The stock disponibility. Only if `unlimitedStock` is false and
                the  'Stock type' was not marked as 'Not available' (through the
                web  interface).
              type: string
              format: number
            unlimitedStock:
              description: >-
                If true then it means there is always disponibility of the webshop
                ad.
              type: boolean
            maxAllowedInCart:
              description: >-
                The maximum quantity that can be specified in the shopping cart.
              type: string
              format: number
            minAllowedInCart:
              description: >-
                The minimum quantity that can be specified in the shopping cart.
              type: string
              format: number

    AdEdit:
      description: >-
        Parameters for editing an existing advertisement
      allOf:
        - $ref: '#/components/schemas/AdManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    AdInterest:
      description: >-
        Reference to an advertisement interest
      allOf:
        - $ref: '#/components/schemas/NamedEntity'

    AdInterestBasicData:
      description: >-
        Contains data shared by both AdInterestDataForNew and
        AdInterestDataForEdit
      type: object
      properties:
        user:
          description: >-
            Reference to the owner of the advertisement interest
          allOf:
            - $ref: '#/components/schemas/User'
        categories:
          description: >-
            Contains the list of possible categories for the advertisement interest
          type: array
          items:
            $ref: '#/components/schemas/AdCategoryWithChildren'
        currencies:
          description: >-
            Contains the list of possible currencies for the advertisement interest
          type: array
          items:
            $ref: '#/components/schemas/Currency'

    AdInterestDataForEdit:
      description: >-
        Contains data for editing an exinsting advertisement interest
      allOf:
        - $ref: '#/components/schemas/AdInterestBasicData'
        - type: object
          properties:
            edit:
              description: >-
                Can the authenticated user edit this advertisement interest?
              type: boolean
            remove:
              description: >-
                Can the authenticated user remove this advertisement interest?
              type: boolean
            adInterest:
              description: >-
                The advertisement interest populated with the current fields. This value
                can be modified and sent back on `PUT /marketplace-interest/{id}`.
              allOf:
                - $ref: '#/components/schemas/AdInterestEdit'

    AdInterestDataForNew:
      description: >-
        Contains data for creating a new advertisement interest
      allOf:
        - $ref: '#/components/schemas/AdInterestBasicData'
        - type: object
          properties:
            adInterest:
              description: >-
                The advertisement interest populated with the default fields. This value
                can be modified and sent back on `POST /{user}/marketplace-interest`.
              allOf:
                - $ref: '#/components/schemas/AdInterestNew'

    AdInterestEdit:
      description: >-
        Fields for modifying an advertisement interest.
      allOf:
        - $ref: '#/components/schemas/AdInterestManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    AdInterestManage:
      description: >-
        Common fields for either creating or editing an advertisement interest
      type: object
      x-abstract: true
      properties:
        name:
          description: >-
            The name identifying this advertisement interest.
          type: string
        kind:
          description: >-
            The kind of advertisements.
          allOf:
            - $ref: '#/components/schemas/AdKind'
        category:
          description: >-
            Either internal name or id of the advertisements category.
          type: string
        keywords:
          type: array
          items:
            type: string
          description: >-
            A set of keywords to match advertisements.
        currency:
          description: >-
            Either internal name or id of the currency for price range.
          type: string
        minPrice:
          description: >-
            Minimum price for advertisements.
          type: string
          format: number
        maxPrice:
          description: >-
            Maximum price for advertisements.
          type: string
          format: number
        user:
          description: >-
            Either internal id or other accepted identification (username,
            e-mail, etc) for the user to watch advertisements
          type: string

    AdInterestNew:
      description: >-
        Fields for a new advertisement interest.
      allOf:
        - $ref: '#/components/schemas/AdInterestManage'

    AdInterestView:
      description: >-
        Details of an advertisement interest
      allOf:
        - $ref: '#/components/schemas/AdInterest'
        - type: object
          properties:
            kind:
              description: >-
                The kind of advertisements.
              allOf:
                - $ref: '#/components/schemas/AdKind'
            category:
              description: >-
                The advertisements category.
              allOf:
                - $ref: '#/components/schemas/AdCategoryWithParent'
            keywords:
              type: array
              items:
                type: string
              description: >-
                Set of keywords to match advertisements.
            currency:
              description: >-
                Currency for the price range.
              allOf:
                - $ref: '#/components/schemas/Currency'
            minPrice:
              description: >-
                Minimum price for advertisements.
              type: string
              format: number
            maxPrice:
              description: >-
                Maximum price for advertisements.
              type: string
              format: number
            user:
              description: >-
                Owner of advertisements
              allOf:
                - $ref: '#/components/schemas/User'
            edit:
              description: >-
                Can the authenticated user edit this advertisement interest?
              type: boolean
            remove:
              description: >-
                Can the authenticated user remove this advertisement interest?
              type: boolean


    AdManage:
      description: >-
        Common fields for either creating or editing a advertisement
      type: object
      x-abstract: true
      properties:
        name:
          description: >-
            The advertisement title
          type: string
        description:
          description: >-
            The advertisement description content, formatted as HTML
          type: string
        publicationPeriod:
          $ref: '#/components/schemas/DatePeriod'
        categories:
          description: >-
            Either internal name or id of categories this advertisement belongs to.
            In most cases an advertisement will have a single category, but this
            depends on the Cyclos configuration.
          type: array
          items:
            type: string
        currency:
          description: >-
            Either internal name or id of the advertisement's price currency
          type: string
        price:
          description: >-
            The regular price
          type: string
          format: number
        promotionalPrice:
          description: >-
            The promotional price, if any
          type: string
          format: number
        promotionalPeriod:
          description: >-
            The promotional period, the one when `promotionalPrice` is valid
          allOf:
            - $ref: '#/components/schemas/DatePeriod'
        customValues:
          type: object
          description: >-
            Holds the custom field values, keyed by field internal name or id. The
            format of the value depends on the custom field type. Example:
            `{..., "customValues": {"gender": "male", "birthDate":
            "1980-10-27"}}`
          additionalProperties:
            type: string
        addresses:
          description: >-
            Ids of addresses (belonging to the advertisement owner) this
            advertisement is available at.
          type: array
          items:
            type: string

    AdNew:
      description: >-
        Parameters for creating a new advertisement
      allOf:
        - $ref: '#/components/schemas/AdManage'
        - type: object
          properties:
            submitForAuthorization:
              description: >-
                Only useful when authorization is required
                (`AdDataForNew`/`AdDataForEdit`.`requiresAuthorization` flag is
                `true`). Indicates whether the advertisement will be initially
                submitted for authorization (status = `pending`)
                or kept in the `draft` status.
              type: boolean
            hidden:
              description: >-
                Only useful when authorization is not required
                (`AdDataForNew`/`AdDataForEdit`.`requiresAuthorization` flag is
                `false`). Indicates whether the initial status for the advertisement
                should be `hidden` (when `true`) or
                `active` (when `false`).
              type: boolean
            images:
              type: array
              items:
                type: string
              description: >-
                The ids of previously uploaded user temporary images to be initially
                used as advertisement images
            kind:
              description: >-
                The advertisement kind to be created. Currently only
                `simple` advertisements can be managed through this
                API. The default is `simple`.
              allOf:
                - $ref: '#/components/schemas/AdKind'

    AdQueryFilters:
      description: >-
        Definitions for a general advertisements search
      allOf:
        - $ref: '#/components/schemas/BasicAdQueryFilters'
        - type: object
          properties:
            owner:
              type: string
              description: >-
                Either id or an identification, such as login name, e-mail, etc, for
                the advertisement owner. The allowed identification methods are
                those the authenticated user can use on keywords search.
            broker:
              type: string
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `brokers` instead.
            brokers:
              type: array
              items:
                type: string
              description: >-
                Either ids or an identifications, such as login name, e-mail, etc,
                for the brokers of the advertisement owner.
                Can only be used when searching with a broker himself or admin.
            groups:
              type: array
              items:
                type: string
              description: >-
                Array of either id or internal names of user groups the
                advertisement owner must belong to
            returnEditable:
              type: boolean
              description: >-
                Whether to return the editable property. Passing `true` will impact
                the performance a bit, as for each returned advertisement some
                statuses and permissions need to be checked.

    AdQuestion:
      description: >-
        A question asked for an advertisement.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            question:
              description: >-
                The question text.
              type: string
            questionDate:
              description: >-
                The question date and time.
              type: string
              format: date-time
            answer:
              description: >-
                The answer for the question (if any).
              type: string
            answerDate:
              description: >-
                The answer date and time.
              type: string
              format: date-time

    AdQuestionView:
      description: >-
        A question asked for an advertisement.
      allOf:
        - $ref: '#/components/schemas/AdQuestion'
        - type: object
          properties:
            user:
              description: >-
                The user which asked the question
              allOf:
                - $ref: '#/components/schemas/User'

    AdResult:
      description: >-
        Contains data returned when searching for advertisements
      allOf:
        - $ref: '#/components/schemas/AdDetailed'
        - type: object
          properties:
            promotionalPrice:
              description: >-
                The promotional price, only returned if there is a promotional price
                set and the promotional period is active
              type: string
              format: number
            address:
              description: >-
                Address to be placed on map. Is only returned when the search result
                type is `map`.
              allOf:
                - $ref: '#/components/schemas/Address'
            distance:
              description: >-
                Only returned when there is a base location to calculate the
                distance from. The unit (kilometers or miles) depends on
                configuration.
              type: number
              format: double
            categories:
              description: >-
                Either internal name or id of categories this advertisement belongs
                to. In most cases an advertisement will have a single category, but
                this depends on the Cyclos configuration.
              type: array
              items:
                type: string
            currency:
              description: >-
                Either internal name or id of the advertisement's price currency
              type: string
            editable:
              description: >-
                Indicates if the advertisement can be edited according to the logged
                user's permissions and advertisement status.
              type: boolean
            canAddToCart:
              description: >-
                Indicates if the advertisement can be added to the cart.
              type: boolean

    AdView:
      description: >-
        Detailed information when viewing an advertisement
      allOf:
        - $ref: '#/components/schemas/AdDetailed'
        - type: object
          properties:
            categories:
              description: >-
                Either internal name or id of categories this advertisement belongs
                to. In most cases an advertisement will have a single category, but
                this depends on the Cyclos configuration.
              type: array
              items:
                $ref: '#/components/schemas/AdCategoryWithParent'
            customValues:
              description: >-
                The list of custom field values this advertisement has
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldValue'
            currency:
              $ref: '#/components/schemas/Currency'
            promotionalPrice:
              description: >-
                The promotional price, to be applied on the promotional period is
                active
              type: string
              format: number
            promotionalPeriod:
              description: >-
                The promotional period, the one when `promotionalPrice` is valid
              allOf:
                - $ref: '#/components/schemas/DatePeriod'
            promotionalPeriodActive:
              description: >-
                Indicates whether the promotional period is active at the moment
                this data is returned
              type: boolean
            canManage:
              description: >-
                Use `canEdit` or `canRemove` instead.



                Indicates if the authenticated user manage this advertisement
              deprecated: true
              x-remove-version: 4.15
              type: boolean
            canEdit:
              description: >-
                Indicates if the authenticated user can edit this advertisement
              type: boolean
            canRemove:
              description: >-
                Indicates if the authenticated user can remove this advertisement. The owner of the ad with manage
                permissions can remove the advertisement regardless the ad status.
              type: boolean
            canBuy:
              description: >-
                Indicates if the authenticated user can buy this webshop ad.
              type: boolean
            canAsk:
              description: >-
                Indicates if the authenticated user can ask questions about this
                advertisement.
              type: boolean
            canHide:
              description: >-
                Indicates if the authenticated user can hide this advertisement.
              type: boolean
            canUnhide:
              description: >-
                Indicates if the authenticated user can unhide this advertisement.
              type: boolean
            canSetAsDraft:
              description: >-
                Indicates if the authenticated user can set as draft an already authorized (published) advertisement.
              type: boolean
            canRequestAuthorization:
              description: >-
                Indicates if the authenticated user can request for authorization for this advertisement.
              type: boolean
            canApprove:
              description: >-
                Indicates if the authenticated user can authorize this advertisement (user managers only).
              type: boolean
            canReject:
              description: >-
                Indicates if the authenticated user can reject this advertisement (user managers only).
              type: boolean
            questionsEnabled:
              description: >-
                Indicates if the questions are anabled for the given advertisement.
              type: boolean
            lastAuthorizationComments:
              description: >-
                The last comments set by a manager when rejecting or set as draft this advertisement.
                Only send if the advertisement requires authorization and the authenticated user can view the comments.
              type: string
            additionalImages:
              type: array
              items:
                $ref: '#/components/schemas/Image'
              description: >-
                Holds the images other than the primary image, which is returned in
                the `image` field
            userAddresses:
              description: >-
                The addresses (belonging to the advertisement's owner) where
                this  advertisement is available.
              type: array
              items:
                $ref: '#/components/schemas/Address'
            adAddresses:
              description: >-
                The custom addresses where this advertisement is available.
              type: array
              items:
                $ref: '#/components/schemas/Address'
            questions:
              description: >-
                The list of questions this advertisement has.
              type: array
              items:
                $ref: '#/components/schemas/AdQuestionView'
            allowDecimal:
              description: >-
                if true then this webshop ad can be ordered specifying the quantity
                as a decimal number.
              type: boolean
            deliveryMethods:
              description: >-
                The available delivery methods for this webshop ad.
              type: array
              items:
                $ref: '#/components/schemas/DeliveryMethod'
            productNumber:
              description: >-
                The product number according to the webshop settings.
              type: string
            operations:
              description: >-
                List of runnable custom operations.
              type: array
              items:
                $ref: '#/components/schemas/Operation'
            hidePrice:
              description: >-
                Indicates whether show or not this advertisement price to guests
              type: boolean
            hideOwner:
              description: >-
                Indicates whether show or not this advertisement owner to guests
              type: boolean

    Address:
      description: >-
        An address reference. The actually used fields depend on the user
        configuration
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          x-implements: IAddress
          properties:
            addressLine1:
              type: string
              description: >-
                The first line of the descriptive address
            addressLine2:
              type: string
              description: >-
                The second line of the descriptive address
            street:
              type: string
              description: >-
                The street name
            buildingNumber:
              type: string
              description: >-
                The numeric identifier for a land parcel, house, building or other
            complement:
              type: string
              description: >-
                The complement (like apartment number)
            zip:
              type: string
              description: >-
                A zip code that identifies a specific geographic (postal) delivery area
            poBox:
              type: string
              description: >-
                The post-office box, is an uniquely addressable box
            neighborhood:
              type: string
              description: >-
                The neighborhood name
            city:
              type: string
              description: >-
                The city name
            region:
              type: string
              description: >-
                The region or state
            country:
              type: string
              description: >-
                The country, represented as 2-letter, uppercase, ISO 3166-1 code
            location:
              description: >-
                The geolocation of the current address
              allOf:
                - $ref: '#/components/schemas/GeographicalCoordinate'

    AddressBasicData:
      description: >-
        Contains data shared by both AddressDataForNew and AddressDataForEdit
      allOf:
        - $ref: '#/components/schemas/AddressConfiguration'
        - type: object
          properties:
            managePrivacy:
              type: boolean
              description: >-
                Can the authenticated user manage the privacy of this address?
            confirmationPasswordInput:
              description: >-
                If a confirmation password is used, contains the definitions on how to
                request that password from the user. This confirmation password is required
                when performing sensible actions. Sometimes this is dynamic, for example,
                the confirmation might be configured to be used only once per session, or
                operations like payments may have a limit per day to be without confirmation
                (pinless).
              allOf:
                - $ref: '#/components/schemas/PasswordInput'

    AddressConfiguration:
      description: >-
        Contains configuration information related to addresses
      type: object
      properties:
        useMap:
          description: >-
            Indicates whether maps are enabled in Cyclos
          type: boolean
        enabledFields:
          description: >-
            Contains the address fields that are enabled in Cyclos
          type: array
          items:
            $ref: '#/components/schemas/AddressFieldEnum'
        requiredFields:
          description: >-
            Contains the address fields that are required in Cyclos
          type: array
          items:
            $ref: '#/components/schemas/AddressFieldEnum'

    AddressConfigurationForUserProfile:
      description: >-
        Contains extended address configuration used on user registration
      allOf:
        - $ref: '#/components/schemas/AddressConfiguration'
        - type: object
          properties:
            address:
              description: >-
                Contains the default values for a new address
              allOf:
                - $ref: '#/components/schemas/AddressNew'
            edit:
              type: boolean
              description: >-
                Can edit addresses?
            managePrivacy:
              type: boolean
              description: >-
                Can manage the privacy of addresses?
            maxAddresses:
              type: integer
              description: >-
                The maximum number of addresses the user can own
            availability:
              $ref: '#/components/schemas/AvailabilityEnum'

    AddressDataForEdit:
      description: >-
        Contains data for editing an existing address
      allOf:
        - $ref: '#/components/schemas/AddressBasicData'
        - type: object
          properties:
            address:
              description: >-
                The address that is being edited. This value can be modified and
                sent back on `PUT /addresses/{id}`.
              allOf:
                - $ref: '#/components/schemas/AddressEdit'
            edit:
              type: boolean
              description: >-
                Can the authenticated user edit this address?
            remove:
              type: boolean
              description: >-
                Can the authenticated user remove this address?

    AddressDataForNew:
      description: >-
        Contains data for creating a new address
      allOf:
        - $ref: '#/components/schemas/AddressBasicData'
        - type: object
          properties:
            address:
              description: >-
                The address populated with the default fields. This value can be
                modified and sent back on `POST /{user}/addresses`.
              allOf:
                - $ref: '#/components/schemas/AddressNew'

    AddressEdit:
      description: >-
        Fields for editing an address. The actually used and required fields depend
        on the user configuration.
      allOf:
        - $ref: '#/components/schemas/AddressManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    AddressEditWithId:
      description: >-
        Parameters for editing an existing address
      allOf:
        - $ref: '#/components/schemas/AddressEdit'
        - type: object
          properties:
            id:
              type: string
              description: >-
                The internal entity identifier

    AddressManage:
      description: >-
        Common fields for either creating or editing an address
      type: object
      x-implements: IAddress
      x-abstract: true
      properties:
        name:
          type: string
          description: >-
            The address name
        addressLine1:
          type: string
          description: >-
            The first line of the descriptive address
        addressLine2:
          type: string
          description: >-
            The second line of the descriptive address
        street:
          type: string
          description: >-
            The street name
        buildingNumber:
          type: string
          description: >-
            The numeric identifier for a land parcel, house, building or other
        complement:
          type: string
          description: >-
            The complement (like apartment number)
        zip:
          type: string
          description: >-
            A zip code that identifies a specific geographic (postal) delivery area
        poBox:
          type: string
          description: >-
            The post-office box, is an uniquely addressable box
        neighborhood:
          type: string
          description: >-
            The neighborhood name
        city:
          type: string
          description: >-
            The city name
        region:
          type: string
          description: >-
            The region or state
        country:
          type: string
          description: >-
            The country, represented as 2-letter, uppercase, ISO 3166-1 code
        location:
          description: >-
            The geolocation of the current address
          allOf:
            - $ref: '#/components/schemas/GeographicalCoordinate'
        defaultAddress:
          type: boolean
          description: >-
            Indicates whether this is the default address for the user
        hidden:
          type: boolean
          description: >-
            Whether this address should be hidden for other users

    AddressNew:
      description: >-
        Fields for a new address. The actually used and required fields depend on
        the user configuration.
      allOf:
        - $ref: '#/components/schemas/AddressManage'

    AddressResult:
      description: >-
        Information of an address as returned on list
      allOf:
        - $ref: '#/components/schemas/Address'
        - type: object
          properties:
            defaultAddress:
              type: boolean
              description: >-
                Indicates whether this is the default address for the user
            hidden:
              description: >-
                Indicates whether this address is hidden for other users. It always
                returns false if the authenticated user doesn't manage the owner of
                this address.
              type: boolean

    AddressView:
      description: >-
        Detailed information when viewing an address
      allOf:
        - $ref: '#/components/schemas/AddressResult'
        - type: object
          properties:
            user:
              description: >-
                The user which owns this address
              allOf:
                - $ref: '#/components/schemas/User'
            editable:
              description: >-
                Can the authenticated user edit / remove this address?
              type: boolean

    Agreement:
      description: >-
        An agreement the user must accept in order to use the system
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            content:
              type: string
              description: >-
                The HTML formatted content of the agreement
            contentVersion:
              type: integer
              description: >-
                The content version (when updated, the version changes)

    AgreementContent:
      description: >-
        Contains the content of a user agreement
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            content:
              description: >-
                The agreement content, formatted as HTML text
              type: string

    Alert:
      description: >-
        Common alert data
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            date:
              description: The alert date
              type: string
              format: date-time
            text:
              description: The alert text
              type: string


    AlertsPermissions:
      description: >-
        Permissions related to user alerts
      type: object
      properties:
        view:
          description: >-
            Whether the logged user can view user alerts or not
          type: boolean


    AmountSummary:
      description: >-
        Contains summarized statistics over amounts
      type: object
      properties:
        count:
          description: >-
            The number of entries
          type: integer
        sum:
          description: >-
            The amount sum
          type: string
          format: number
        average:
          description: >-
            The amount average
          type: string
          format: number

    Auth:
      description: >-
        Contains information for the currently authenticated user
      allOf:
        - $ref: '#/components/schemas/BaseAuth'
        - type: object
          properties:
            pinInput:
              description: >-
                Returned when a PIN can be defined. Contains the information
                for defining it.
              allOf:
                - $ref: '#/components/schemas/PinInput'
            configuration:
              description: >-
                The current configuration version
              allOf:
                - $ref: '#/components/schemas/VersionedEntity'

    BadRequestError:
      description: >-
        Error returned when the request format / body is not in the expected format
      type: object
      properties:
        message:
          description: >-
            A (technical) message explaining the problem
          type: string
        line:
          description: >-
            The request body line that shows the problem
          type: integer
        column:
          description: >-
            The request body column that shows the problem
          type: integer
        code:
          $ref: '#/components/schemas/BadRequestErrorCode'

    BankingPermissions:
      description: >-
        Permissions for banking
      type: object
      properties:
        accounts:
          description: >-
            Permissions over each owned account
          type: array
          items:
            $ref: '#/components/schemas/AccountPermissions'
        payments:
          description: >-
            Payments permissions
          allOf:
            - $ref: '#/components/schemas/PaymentsPermissions'
        authorizations:
          description: >-
            Transaction authorization permissions
          allOf:
            - $ref: '#/components/schemas/TransactionAuthorizationsPermissions'
        scheduledPayments:
          description: >-
            Scheduled payments permissions
          allOf:
            - $ref: '#/components/schemas/ScheduledPaymentsPermissions'
        recurringPayments:
          deprecated: true
          x-remove-version: 4.15
          description: >-
            DEPRECATED: Recurring payment permissions are no longer separated from
            scheduled payment permissions. Use `scheduledPayments` instead.


            Recurring payments permissions
          allOf:
            - $ref: '#/components/schemas/ScheduledPaymentsPermissions'
        externalPayments:
          description: >-
            External payments permissions
          allOf:
            - $ref: '#/components/schemas/ExternalPaymentsPermissions'
        paymentRequests:
          description: >-
            Payment requests permissions
          allOf:
            - $ref: '#/components/schemas/PaymentRequestsPermissions'
        tickets:
          description: >-
            Tickets permissions
          allOf:
            - $ref: '#/components/schemas/TicketsPermissions'

        searchGeneralTransfers:
          description: >-
            Can the authenticated admin / broker perform a general transfers
            search (all visible transfers, regardless of the user / account)?
          type:
            boolean
        searchUsersWithBalances:
          description: >-
            Can the authenticated admin / broker search managed users together
            with their account balances?
          type:
            boolean
        searchGeneralBalanceLimits:
          description: >-
            Can the authenticated admin / broker perform a general account
            balance limit search, for all visible accounts?
          type:
            boolean


    BaseAccountBalanceLimits:
      x-abstract: true
      description: >-
        Basic data regarding the lower and upper limits of a user account.
      type: object
      properties:
        creditLimit:
          description: The lower (negative) credit limit.
          type: string
          format: number
        customCreditLimit:
          description: >-
            Indicates whether the credit limit is customized for this account or
            if it is the default value.
          type: boolean
        upperCreditLimit:
          description: >-
            The upper (positive) credit limit. When this value is `null` the
            account has no upper limit (is unlimited).
          type: string
          format: number
        customUpperCreditLimit:
          description: >-
            Indicates whether the upper credit limit is customized for this account
            or if it is the default value.
          type: boolean

    BaseActivationCodeRequest:
      x-abstract: true
      description: >-
        Base parameters for sending / resending a device activation code.
      type: object
      properties:
        mobilePhoneId:
          type: string
          description: >-
            The identifier of the mobile phone where the code must be sent. Only
            required if medium is `sms`.
        medium:
          description: >-
            The medium the user wants to receive the activation code.
          allOf:
            - $ref: '#/components/schemas/SendMediumEnum'

    BaseAdDataForSearch:
      description: >-
        Common definitions for searching advertisements
      x-abstract: true
      type: object
      properties:
        categories:
          description: >-
            The advertisement categories each with its children, forming a tree
          type: array
          items:
            $ref: '#/components/schemas/AdCategoryWithChildren'
        customFields:
          description: >-
            The list of custom fields that are either to be used as search filter
            (if its internal name is present on either  `fieldsInBasicSearch` or
            `fieldsInAdvancedSearch`) and / or in the result list (if its internal
            name is present on `fieldsInList`).
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        fieldsInBasicSearch:
          description: >-
            The internal names of the custom fields that should be used as search
            filters in the basic section (separated fields, not keywords)
          type: array
          items:
            type: string
        fieldsInAdvancedSearch:
          description: >-
            The internal names of the custom fields that should be used as search
            filters in the advanced section (separated fields, not keywords)
          type: array
          items:
            type: string
        fieldsInList:
          description: >-
            The internal names of the custom fields that will be returned together
            with each advertisement, and should be shown in the result list. This
            feature is planned, but not yet available.
          type: array
          items:
            type: string
        basicProfileFields:
          description: >-
            The list of basic user profile fields that can be used as search
            filters. Only returned if searching user advertisements.
          type: array
          items:
            $ref: '#/components/schemas/BasicProfileFieldInput'
        customProfileFields:
          description: >-
            The list of custom user profile fields that can be used as search
            filters. Only returned if searching user advertisements.
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        currencies:
          description: >-
            The currencies the authenticated user may use to filter by price
          type: array
          items:
            $ref: '#/components/schemas/Currency'
        searchByDistanceData:
          $ref: '#/components/schemas/SearchByDistanceData'
        categoriesDisplay:
          description: >-
            The category view configured for the logged user.
          allOf:
            - $ref: '#/components/schemas/AdCategoriesDisplayEnum'
        visibleKinds:
          description: >-
            The advertisement kinds that can be searched by the authenticated user
          type: array
          items:
            $ref: '#/components/schemas/AdKind'
        addressFieldsInSearch:
          type: array
          items:
            $ref: '#/components/schemas/AddressQueryFieldEnum'

    BaseAdDetailed:
      description: >-
        Contains shared information of an ad.
      allOf:
        - $ref: '#/components/schemas/Ad'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/AdStatusEnum'

    BaseAuth:
      description: >-
        Contains relevant information for the authenticated user and his granted
        permissions.
      type: object
      x-abstract: true
      properties:
        user:
          description: >-
            The authenticated user, if any.
          allOf:
            - $ref: '#/components/schemas/User'
        language:
          description: >-
            The current language version
          allOf:
            - $ref: '#/components/schemas/VersionedEntity'
        global:
          description: >-
            Indicates whether this user belongs to global mode. Only returned if
            there is an authenticated user.
          type: boolean
        systemAdministrator:
          description: >-
            Indicates whether this user is a system administrator, that is, either
            belongs to the global system administrators group or to the network
            system administrators group. Only returned if `role` is
            `administrator`.
          type: boolean
        aliasOperator:
          description: >-
            Indicates whether this user is an operator which is an alias of his
            owner member, that is, has all member permissions, and is not restricted
            to an operator group. Only returned if `role` is
            `operator`.
          type: boolean
        permissions:
          description: >-
            The granted permissions for the authenticated user or guest
          allOf:
            - $ref: '#/components/schemas/Permissions'
        sessionToken:
          description: >-
            A token that must be passed in on the Session-Token header on subsequent
            requests instead of the login name and password. Only returned if using
            a session authentication.
          type: string
        trustedSession:
          description: >-
            Whether the current session is a trusted one or not. If trusted then no
            confirmation password (if any) will be required for subsequent requests
            in the same session. Only returned if using a session authentication.
          type: boolean
        accessClient:
          description: >-
            Only returned when authenticated as access client, contains information
            about it
          allOf:
            - $ref: '#/components/schemas/EntityReference'
        principalType:
          description: >-
            Returns a reference to the principal type used for authentication. May
            be some of the built-in types (login name, e-mail, mobile phone or
            account number), a profile field, a token type or an access client type
          allOf:
            - $ref: '#/components/schemas/EntityReference'
        principal:
          description: >-
            The principal (user identification) used on authentication. Can be the
            value of the login name, e-mail, account number, custom field or token
            used on authentication or at the moment of login. Is not returned when
            the authentication was performed via access client.
          type: string
        passwordType:
          description: >-
            Returns a reference to the password type used on this channel.
          allOf:
            - $ref: '#/components/schemas/PasswordType'
        secondaryPasswordType:
          description: >-
            Returns a reference to the login confirmation password type used on this
            channel, if any.
          allOf:
            - $ref: '#/components/schemas/PasswordType'
        expiredPassword:
          description: >-
            Returns whether the current access password is expired. If so, the user
            will have to change the password, or all other actions will be denied.
          type: boolean
        pendingAgreements:
          description: >-
            Returns whether the current user has some agreements pending accept. If
            so, a call to `GET /agreements/pending` should be performed to get the
            content of the pending agreements, and then a `POST
            /agreements/pending{id_or_internal_name}` to accept each agreement.
          type: boolean
        expiredSecondaryPassword:
          description: >-
            Returns whether the current secondary access password is expired. If so,
            the user will have to change the password, or all other actions will be
            denied.
          type: boolean
        pendingSecondaryPassword:
          description: >-
            Returns whether the current session requires a secondary password. If
            so, the user will have to validate it using its secondary access
            password, otherwise, all other actions will be denied.
          type: boolean
        allowPin:
          description: >-
            Returns whether the configuration for the current channel has device PIN enabled.
          type: boolean
        role:
          description: >-
            The main user role. Only returned if there is an authenticated user.
          allOf:
            - $ref: '#/components/schemas/RoleEnum'

    BaseCustomFieldValue:
      x-abstract: true
      description: >-
        Holds detailed information about a custom field value. The actual value
        should be read from a property depending on the field type:



        - If the type is either `string`,
          `text`,
          `richText` or
          `url`, the property is on `stringValue`;


        - If the type is `integer`, the property is
          `integerValue`; - If the type is `decimal`,
          the property is `decimalValue`;


        - If the type is `date`, the property is
          `dateValue`; - If the type
        is `boolean`, the property is `booleanValue`;


        - If the type is either `singleSelection` or
          `multiSelection`, the property is
          `possibleValues`;


        - If the type is `dynamicSelection`, the
          property is `dynamicValue`;


        - If the type is `file`, the property is
          `fileValues`;


        - If the type is `image`, the property is
          `imageValues`;


        - Finally, if the type is `linkedEntity`, it
          depends on the value of the field's `linkedEntityType`:


          - If the entity type is `user`, the property
            is `userValue`;


          - If the entity type is `record`, the
            property is `recordValue`;


          - If the entity type is `transaction`, the
            property is `transactionValue`;


          - If the entity type is `transfer`, the
            property is `transferValue`;


          - If the entity type is `advertisement`, the
            property is `adValue`.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            stringValue:
              description: >-
                The field value if the field type is either
                `string`,
                `text`,
                `richText` or
                `url`.
              type: string
            dateValue:
              description: >-
                The field value if the field type is
                `date`.
              type: string
              format: date-time
            booleanValue:
              description: >-
                The field value if the field type is
                `boolean`.
              type: boolean
            integerValue:
              description: >-
                The field value if the field type is
                `integer`.
              type: integer
            decimalValue:
              description: >-
                The field value if the field type is
                `decimal`.
              type: string
              format: number
            enumeratedValues:
              description: >-
                The field value if the field type is either
                `singleSelection` or
                `multiSelection`. For single selections
                will either be an empty array or an array with a single element
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldPossibleValue'
            dynamicValue:
              description: >-
                The field value if the field type is
                `dynamicSelection`.
              allOf:
                - $ref: '#/components/schemas/CustomFieldDynamicValue'
            fileValues:
              description: >-
                The field value if the field type is
                `file`
              type: array
              items:
                $ref: '#/components/schemas/StoredFile'
            imageValues:
              description: >-
                The field value if the field type is
                `image`
              type: array
              items:
                $ref: '#/components/schemas/Image'
            adValue:
              description: >-
                The field value if the field type is
                `linkedEntity` and the linked entity type
                is `advertisement`. If the currently set
                record is not accessible by the logged user, only the `name` field
                is sent, which contains the advertisement title.
              allOf:
                - $ref: '#/components/schemas/Ad'
            transactionValue:
              description: >-
                The field value if the field type is
                `linkedEntity` and the linked entity type
                is `transaction`. If the currently set
                transaction is not accessible by the logged user, only the `display`
                field is sent.
              allOf:
                - $ref: '#/components/schemas/Transaction'
            transferValue:
              description: >-
                The field value if the field type is
                `linkedEntity` and the linked entity type
                is `transfer`. If the currently set
                transfer is not accessible by the logged user, only the `display`
                field is sent.
              allOf:
                - $ref: '#/components/schemas/Transfer'
            recordValue:
              description: >-
                The field value if the field type is
                `linkedEntity` and the linked entity type
                is `record`. If the currently set record
                is not accessible by the logged user, only the `display` field is
                sent.
              allOf:
                - $ref: '#/components/schemas/Record'
            userValue:
              description: >-
                The field value if the field type is
                `linkedEntity` and the linked entity type
                is `user`. If the currently set user is
                not accessible by the logged user, only a limited set of fields is
                sent, namely `display` and `shortDisplay`.
              allOf:
                - $ref: '#/components/schemas/User'

    BaseInstallmentDataForSearch:
      x-abstract: true
      description: >-
        Contains common data used to search installments for a given owner
      type: object
      properties:
        exportFormats:
          description: >-
            The formats which the search results can be exported.
          type: array
          items:
            $ref: '#/components/schemas/ExportFormat'
        groups:
          description: >-
            Groups that can be used to filter entries, so that only transfers from
            or to users of those groups are returned on search. Is only returned if
            the authenticated user is an administrator.
          type: array
          items:
            $ref: '#/components/schemas/Group'
        accountTypes:
          description: >-
            Visible account types from the given owner
          type: array
          items:
            $ref: '#/components/schemas/AccountType'
        canViewAuthorized:
          description: >-
            Can the authenticated user view authorized transactions of this
            owner?
          type: boolean
        visibleKinds:
          description: >-
            Contains the transaction kinds the authenticated user can view over
            this owner. Only kinds that allow installments are returned.
          type: array
          items:
            $ref: '#/components/schemas/TransactionKind'

    BaseInstallmentQueryFilters:
      x-abstract: true
      description: >-
        Base query filters for installments
      allOf:
        - $ref: '#/components/schemas/BaseTransactionOrInstallmentQueryFilters'
        - type: object
          properties:
            statuses:
              description: >-
                Possible statuses for installments.
              type: array
              items:
                $ref: '#/components/schemas/InstallmentStatusEnum'


    BaseInstallmentResult:
      description: >-
        Base fields for an installment result
      type: object
      properties:
        status:
          description: >-
            The installment status.
          allOf:
            - $ref: '#/components/schemas/InstallmentStatusEnum'
        number:
          description: >-
            The installment number
          type: integer
        totalInstallments:
          description: >-
            The total number of installments in the transaction.
            Only not returned if the installment belongs to a recurring payment
            with an unbound number of occurrences (until cancel).
          type: integer
        dueDate:
          description: >-
            The installment due date
          type: string
          format: date-time
        amount:
          description: >-
            The installment amount.
          type: string
          format: number
        transactionNumber:
          description: >-
            When processed, is the transaction number of the generated transfer.
          type: string
        transferDate:
          description: >-
            When processed, is the date of the generated transfer.
          type: string
          format: date-time
        transferId:
          description: >-
            When processed, is the id of the generated transfer.
          type: string

    BaseNfcError:
      description: >-
        Base Error when work with a NFC card
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            token:
              $ref: '#/components/schemas/TokenDetailed'

    BaseNotificationSettings:
      description: >-
        Contains common data among `NotificationSettingsView` and
        `NotificationSettingsDataForEdit`.
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        role:
          $ref: '#/components/schemas/RoleEnum'
        editable:
          description: >-
            Indicates whether the logged user can manage the notitification
            settings of this user.
          type: boolean
        emailAllowed:
          description: >-
            Indicates whether e-mail notifications are allowed
          type: boolean
        smsAllowed:
          description: >-
            Indicates whether SMS notifications are allowed
          type: boolean
        maxSmsPerMonth:
          description: >-
            The maximum number of allowed SMS messages per month
          type: integer
        smsCountThisMonth:
          description: >-
            The number of SMS messages already sent this month
          type: integer

        forwardMessagesAllowed:
          description: >-
            Indicates whether it can be configured to forward received internal
            messages to the user's e-mail.
            Only applicable for users (members / brokers), not administrators.
          type: boolean
        forwardMessages:
          description: >-
            Indicates whether to forward received internal messages to the
            user's e-mail.
            Only applicable for users (members / brokers), not administrators.
          type: boolean

    BaseOrder:
      description: >-
        Contains basic data shared by other related models.
      allOf:
        - $ref: '#/components/schemas/Entity'

    BaseOrderAction:
      description: >-
        Commont data for order actions.
      type: object
      properties:
        remarks:
          description: >-
            Optional comments by the authenticated user.
          type: string

    BaseOrderItem:
      description: >-
        An item containing a quantity.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            quantity:
              description: >-
                It represents how much of the product was ordered.  It could be a
                decimal number only if it's allowed by the  product (i.e the webshop
                ad).
              type: string
              format: number
            product:
              $ref: '#/components/schemas/WebshopAd'

    BaseRecordDataForSearch:
      description: >-
        Common definitions for searching records
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/RecordBasePermissions'
        - type: object
          properties:
            customFields:
              description: >-
                The list of record fields that are either to be used as search
                filter (if its internal name is present on `fieldsInSearch`) and /
                or in the result list (if its internal name is present on
                `fieldsInList`)
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldDetailed'
            fieldsInSearch:
              description: >-
                The internal names of the record fields that should be used as
                search filters (separated fields, not keywords)
              type: array
              items:
                type: string
            fieldsInList:
              description: >-
                The internal names of the record fields that will be returned
                together with each record, and should be shown in the result list
              type: array
              items:
                type: string
            basicProfileFields:
              description: >-
                The list of basic user profile fields that can be used as search
                filters. Only returned if searching user records.
              type: array
              items:
                $ref: '#/components/schemas/BasicProfileFieldInput'
            customProfileFields:
              description: >-
                The list of custom user profile fields that can be used as search
                filters. Only returned if searching user records.
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldDetailed'
            addressFieldsInSearch:
              type: array
              items:
                $ref: '#/components/schemas/AddressQueryFieldEnum'
            exportFormats:
              description: >-
                The formats which the data can be exported
              type: array
              items:
                $ref: '#/components/schemas/ExportFormat'


    BaseReferenceDataForSearch:
      description: >-
        Configuration data for searching references
      type: object
      x-abstract: true
      properties:
        manage:
          description: >-
            Can the authenticated user manage returned references?
          type: boolean

    BaseReferenceQueryFilters:
      description: >-
        common query filters for references
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            period:
              description: >-
                The minimum / maximum reference date
              type: array
              items:
                type: string
                format: date-time
            levels:
              description: >-
                The levels to filter
              type: array
              items:
                $ref: '#/components/schemas/ReferenceLevelEnum'

    BaseShoppingCart:
      description: >-
        Contains basic data shared by other shopping cart related models.
      allOf:
        - $ref: '#/components/schemas/BaseOrder'
        - type: object
          properties:
            currency:
              $ref: '#/components/schemas/Currency'
            seller:
              $ref: '#/components/schemas/User'
            insufficientBalance:
              type: boolean
              description: >-
                Flag in `true` if there isn't any account in that currency with
                enough available balance to be able to fulfill the order from the
                shopping cart.

    BaseTransDataForSearch:
      description: >-
        Contains basic information used to search for transfers / transactions
      x-abstract: true
      type: object
      properties:
        transferFilters:
          description: >-
            References for transfer filters, which can be used to filter entries by
            transfer type
          type: array
          items:
            $ref: '#/components/schemas/TransferFilter'
        channels:
          description: >-
            References for channels which can be used to filter entries by transfers
            generated on a specific channel. Is only returned if the authenticated
            user is an administrator.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        groups:
          description: >-
            Groups that can be used to filter entries, so that only transfers from
            or to users of those groups are returned on search. Is only returned if
            the authenticated user is an administrator.
          type: array
          items:
            $ref: '#/components/schemas/Group'
        preselectedPeriods:
          description: >-
            Contains the pre-selected period filter ranges according to the Cyclos
            configuration
          type: array
          items:
            $ref: '#/components/schemas/PreselectedPeriod'
        exportFormats:
          description: >-
            The formats which the search results can be exported.
          type: array
          items:
            $ref: '#/components/schemas/ExportFormat'

    BaseTransQueryFilters:
      description: >-
        Base definitions for searching either transactions or transfers
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            datePeriod:
              description: >-
                The minimum / maximum transfer date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            transferFilters:
              description: >-
                Reference to the transfer filters, which filters transfers by type.
                May be either the internal id or qualified transfer filter internal
                name, in the format `accountType.transferFilter`.
              type: array
              items:
                type: string
            transferTypes:
              description: >-
                Reference to the transfer types for filter. May be either the
                internal id or qualified transfer type internal name, in the format
                `accountType.transferType`.
              type: array
              items:
                type: string
            transactionNumber:
              description: >-
                The transaction number of the matching transfer
              type: string
            user:
              description: >-
                Reference a user that should have either received / performed the
                transfer.
              type: string
            groups:
              description: >-
                Reference to the user group used to perform / receive the transfer.
                Only taken into account if authenticated as administrator.
              type: array
              items:
                type: string
            by:
              description: >-
                Reference to the user that was authenticated when the transfer was
                performed. Is only taken into account if authenticated as
                administrator.
              type: string
            broker:
              description: >-
                DEPRECATED: Use `brokers` instead.


                Reference to the broker of users involved in transfers. Is only
                taken into account if authenticated as administrator.
              deprecated: true
              x-remove-version: 4.15
              type: string
            brokers:
              description: >-
                Reference to the broker of users involved in transfers. Is only
                taken into account if authenticated as administrator.
              type: array
              items:
                type: string
            channels:
              description: >-
                Reference to the channel used to perform / receive the transfer.
                Only taken into account if authenticated as administrator.
              type: array
              items:
                type: string
            excludedIds:
              description: >-
                List of transfers ids to be excluded from the result.
              type: array
              items:
                type: string
            accessClients:
              description: >-
                References to access clients (id or token) used to perform / receive
                the transfer.
              type: array
              items:
                type: string
            includeGeneratedByAccessClient:
              description: >-
                Flag indicating whether to include or not the generated transfer.
                Only valid if there is at least one access client specified. For
                example if a `ticket` or `paymentRequest` was processed then a new
                transfer will be generated.
              type: boolean
            fromCurrentAccessClient:
              description: >-
                Flag indicating whether to include only transfers by the current
                access client.
              type: boolean
            amountRange:
              description: >-
                The minimum / maximum amount.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: number
            orderBy:
              $ref: '#/components/schemas/TransOrderByEnum'

    BaseTransactionDataForSearch:
      description: >-
        Contains data used to search transactions, either as an owner
        point of view or as overview.
      allOf:
        - $ref: '#/components/schemas/BaseTransDataForSearch'
        - type: object
          properties:
            accountTypes:
              description: >-
                Visible account types from the given owner
              type: array
              items:
                $ref: '#/components/schemas/AccountType'
            canViewAuthorized:
              description: >-
                Can the authenticated user view authorized transactions of this
                owner?
              type: boolean
            visibleKinds:
              description: >-
                Contains the transaction kinds the authenticated user can view over
                this owner.
              type: array
              items:
                $ref: '#/components/schemas/TransactionKind'

    BaseTransactionOrInstallmentQueryFilters:
      description: >-
        Base query filters for either transactions or installments
      allOf:
        - $ref: '#/components/schemas/BaseTransQueryFilters'
        - type: object
          properties:
            kinds:
              type: array
              items:
                $ref: '#/components/schemas/TransactionKind'

            authorized:
              description: >-
                When set, will only return transactions that went through the
                authorization process (if true) or that never went through it
                (when false).
                In either case, only kinds that can go through authorization are
                returned (`payment`,
                `order`,
                `recurringPayment` or
                `scheduledPayment`).
              type: boolean
            authorizationStatuses:
              description: >-
                Authorization statuses used as search criteria.
                When set, only kinds that can go through authorization are
                returned (`payment`,
                `order`,
                `recurringPayment` or
                `scheduledPayment`).
              type: array
              items:
                $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
            authorizationPerformedBy:
              description: >-
                Id or other identifier (login name, email, etc) of the user
                that performed an authorization action (authorize, deny or cancel).
              type: string

    BaseTransactionQueryFilters:
      description: >-
        Base query filters for transactions
      allOf:
        - $ref: '#/components/schemas/BaseTransactionOrInstallmentQueryFilters'
        - type: object
          properties:
            ticketStatuses:
              description: >-
                Statuses used as search criteria applied only to transactions of
                kind `ticket`.
              type: array
              items:
                $ref: '#/components/schemas/TicketStatusEnum'

            recurringPaymentStatuses:
              description: >-
                Statuses used as search criteria applied only to transactions of
                kind `recurringPayment`.
                If this filter is not empty then pending recurring payments will be excluded from the result. Pending
                recurring payments does not have a status.
              type: array
              items:
                $ref: '#/components/schemas/RecurringPaymentStatusEnum'

            scheduledPaymentStatuses:
              description: >-
                Statuses used as search criteria applied only to transactions of
                kind `scheduledPayment`.
                If this filter is not empty then pending scheduled payments will be excluded from the result. Pending
                scheduled payments does not have a status.
              type: array
              items:
                $ref: '#/components/schemas/ScheduledPaymentStatusEnum'

            paymentRequestStatuses:
              description: >-
                Statuses used as search criteria applied only to transactions of
                kind `paymentRequest`.
              type: array
              items:
                $ref: '#/components/schemas/PaymentRequestStatusEnum'
            paymentRequestExpiration:
              description: >-
                The minimum / maximum date for payment request expiration.
                Only affects payment requests.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time

            externalPaymentStatuses:
              description: >-
                Statuses used as search criteria applied only to transactions of
                kind `externalPayment`.
              type: array
              items:
                $ref: '#/components/schemas/ExternalPaymentStatusEnum'

    BaseTransactionResult:
      description: >-
        Base fields for transaction result
      allOf:
        - $ref: '#/components/schemas/TransResult'
        - type: object
          properties:
            kind:
              description: >-
                The transaction kind. For example, if the front end has distinct
                views for a regular payment, scheduled payment and so on, this
                information is useful to determine the actual view.
              allOf:
                - $ref: '#/components/schemas/TransactionKind'
            authorizationStatus:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'
            currency:
              description: >-
                Either internal name or id of the transaction currency.
              type: string
            expirationDate:
              description: >-
                Only returned if the `kind` is either `paymentRequest`,
                `externalPayment` or `ticket`. The deadline for the payment to be
                processed.  In case of `externalPayment` if no user is registered
                with either e-mail or mobile phone matching, it is canceled. The
                same is done in case of `ticket` if it is not accepted by any user.
              type: string
              format: date-time

            scheduledPaymentStatus:
              description: >-
                The scheduled payment status. Only returned if `kind` is
                `scheduledPayment`.
              allOf:
                - $ref: '#/components/schemas/ScheduledPaymentStatusEnum'
            installmentCount:
              description: >-
                The total number of installments. Only returned if `kind` is
                `scheduledPayment`.
              type: integer
            processedInstallments:
              description: >-
                The number of processed installments. Only returned if `kind` is
                `scheduledPayment`.
              type: integer
            firstInstallment:
              description: >-
                A reference to the first installment of this scheduled payment. Only
                returned if `kind` is `scheduledPayment`.
              allOf:
                - $ref: '#/components/schemas/Installment'
            firstOpenInstallment:
              description: >-
                A reference to the first installment which is still open. Only
                returned if `kind` is `scheduledPayment`.
              allOf:
                - $ref: '#/components/schemas/Installment'

            recurringPaymentStatus:
              description: >-
                The recurring payment status. Only returned if `kind` is
                `recurringPayment`.
              allOf:
                - $ref: '#/components/schemas/RecurringPaymentStatusEnum'
            occurrencesCount:
              description: >-
                The total number of occurrences to process. When null will be
                processed until manually canceled.
                Only returned if `kind` is `recurringPayment`.
              type: integer
            nextOccurrenceDate:
              description: >-
                When the next recurring payment occurrence will be processed.
                Only returned if `kind` is `recurringPayment`.
              type: string
              format: date-time
            lastOccurrenceNumber:
              description: >-
                The number of the last processed occurrence
              type: integer

            externalPaymentStatus:
              description: >-
                The external payment status. Only returned if `kind` is
                `externalPayment`.
              allOf:
                - $ref: '#/components/schemas/ExternalPaymentStatusEnum'
            toPrincipalType:
              description: >-
                The principal type an external payment was sent to. Only returned if
                `kind` is `externalPayment`.
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            toPrincipalValue:
              description: >-
                The principal to which an external payment was sent to. Only
                returned if `kind` is `externalPayment`.
              type: string

            paymentRequestStatus:
              description: >-
                The payment request status. Only returned if `kind` is
                `paymentRequest`.
              allOf:
                - $ref: '#/components/schemas/PaymentRequestStatusEnum'

            ticketStatus:
              description: >-
                The ticket status. Only returned if `kind` is
                `ticket`.
              allOf:
                - $ref: '#/components/schemas/TicketStatusEnum'

    BaseTransferDataForSearch:
      description: >-
        Contains basic information used to search for transfers
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/BaseTransDataForSearch'
        - type: object
          properties:
            transferStatusFlows:
              description: >-
                References to the allowed transfer status flows for this account
              type: array
              items:
                $ref: '#/components/schemas/TransferStatusFlow'

    BaseTransferQueryFilters:
      description: >-
        Base definitions for searching transfers
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/BaseTransQueryFilters'
        - type: object
          properties:
            chargedBack:
              description: >-
                When set to either `true` will only return transfers that were
                charged-back. When set to `false`, will only return transfers that
                were not charged-back. When left blank will not filter by this
                creterion.
              type: boolean
            statuses:
              type: array
              items:
                type: string
              description: >-
                Transfer statuses used as search criteria. Each array element should
                be either the identifier or the status qualified internal name,
                composed by flow internal name, a dot, and the status internal name.
                For example, `loan.open` would be a valid internal name.
            kinds:
              description: >-
                The kind of transfers to return
              type: array
              items:
                $ref: '#/components/schemas/TransferKind'
            transferKinds:
              description: >-
                DEPRECATED: Use `kinds` instead
              deprecated: true
              x-remove-version: 4.15
              type: array
              items:
                $ref: '#/components/schemas/TransferKind'

    BaseUserDataForSearch:
      description: >-
        Contains basic data used to search users in distinct contexts
      x-abstract: true
      type: object
      properties:
        allowKeywords:
          description: >-
            Indicates whether using keywords is allowed
          type: boolean
        fieldsInSearch:
          description: >-
            The internal names of either basic or custom profile fields which can be
            used as search filters (separated fields, not keywords).
          type: array
          items:
            type: string
        basicFields:
          description: >-
            The list of basic profile fields that can be used either as search
            filters (if the internal names are present in the `fieldsInSearch`
            property) or on the result list (if the internal names are present in
            the `fieldsInList` property).
          type: array
          items:
            $ref: '#/components/schemas/BasicProfileFieldInput'
        customFields:
          description: >-
            The list of custom profile fields that can be used either as search
            filters (if the internal names are present in the `fieldsInSearch`
            property) or on the result list (if the internal names are present in
            the `fieldsInList` property)
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        groups:
          description: >-
            The groups the authenticated user can use to filter users. Admins can
            always filter by groups, while users depend on a permission, which can
            be to only view group sets, only groups or none.
          type: array
          items:
            $ref: '#/components/schemas/Group'
        searchByDistanceData:
          $ref: '#/components/schemas/SearchByDistanceData'
        addressFieldsInSearch:
          type: array
          items:
            $ref: '#/components/schemas/AddressQueryFieldEnum'
        exportFormats:
          description: >-
            The formats which the search results can be exported.
          type: array
          items:
            $ref: '#/components/schemas/ExportFormat'


    BasicAdQueryFilters:
      description: >-
        Basic definitions for a advertisements search
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/FullTextWithDistanceQueryFilters'
        - type: object
          properties:
            customFields:
              type: array
              items:
                type: string
              description: >-
                Advertisement custom field values used as filters. Is a
                comma-separated array, where each part consists in two parts:
                the internal name (or custom field id) of the field, and a value,
                both separated by : (colon).  For example,
                `customFields=field1:value1,field2:value2`. Sometimes
                multiple values are accepted. In this case, the multiple values are
                separated by pipes. For example,
                customFields=field1:valueA|valueB. Enumerated fields accept
                multiple values, while numeric and date fields also accept ranges,
                which are two values, pipe-separated. For example,
                `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31`
                would match results whose custom field with internal name
                `tradeType` is either `offer` or `search`, and whose `extraDate` is
                between January 1, 2000 and December 31, 2001. To specify a single
                bound in ranges (like birth dates before December 31, 2001), use a
                pipe in one of the values, like
                `customFields=extraDate:|2001-12-31`.

                A note for dynamic custom fields: If a script is used to
                generate possible values for search, the list will be returned in
                the  corresponding data, and it is sent as a pipe-separated list of
                values (not labels). For example:
                `customFields=dynamic:a|b|c`. However, it is also possible to
                perform a keywords-like (full-text) search using the dynamic value
                label. In this case a single value, prefixed by single quotes should
                be used. For example: `customFields=dynamic:'business`.
            category:
              type: string
              description: >-
                Either id or internal name of a category
            currency:
              type: string
              description: >-
                Either id or internal name of a currency for the price
            priceRange:
              description: >-
                The minumum / maximum price. Used only if a currency is specified.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: number
            productNumber:
              type: string
              description: >-
                Textual search for a product number for webshop only.
            hasImages:
              type: boolean
              description: >-
                When set to `true` only advertisements with images are returned
            publicationPeriod:
              description: >-
                The minimum / maximum publication date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            expirationPeriod:
              description: >-
                The minimum / maximum expiration date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            kind:
              $ref: '#/components/schemas/AdKind'
            statuses:
              type: array
              items:
                $ref: '#/components/schemas/AdStatusEnum'
            orderBy:
              $ref: '#/components/schemas/AdOrderByEnum'
            addressResult:
              $ref: '#/components/schemas/AdAddressResultEnum'

    BasicFullProfileEditResult:
      description: >-
        Result of saving the full profile at once
      type: object
      properties:
        createdLandLinePhones:
          description: >-
            Identifiers of created land-line phones
          type: array
          items:
            type: string
        createdMobilePhones:
          description: >-
            Identifiers of created mobile phones
          type: array
          items:
            type: string

    BasicOperatorQueryFilters:
      description: >-
        Basic definitions for operators search filters
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            creationPeriod:
              description: >-
                The minimum / maximum user creation date. Only taken into account if
                searching as administrator or managing broker.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            statuses:
              type: array
              items:
                $ref: '#/components/schemas/UserStatusEnum'

    BasicProfileFieldInput:
      description: >-
        Definitions to input a basic profile field
      type: object
      properties:
        mask:
          description: >-
            If this field has a mask used for input, contains this mask. Currently
            only the account number can (optionally) have one.
          type: string
        example:
          description: >-
            If this field has an example value, holds that example
          type: string
        field:
          description: >-
            The basic field this refers to
          allOf:
            - $ref: '#/components/schemas/BasicProfileFieldEnum'

    BasicUserDataForNew:
      description: >-
        Contains basic data to register either a user or operator
      allOf:
        - $ref: '#/components/schemas/UserBasicData'
        - type: object
          properties:
            allowSetSendActivationEmail:
              description: >-
                Whether the current user is allowed to skip the activateion e-mail
              type: boolean
            generatedUsername:
              description: >-
                Indicates whether the login name is generated
              type: boolean
            phoneConfiguration:
              $ref: '#/components/schemas/PhoneConfigurationForUserProfile'
            passwordTypes:
              description: >-
                The password types that should be registered together with the user
              type: array
              items:
                $ref: '#/components/schemas/PasswordTypeRegistration'

    BasicUserManage:
      description: >-
        Contains the common fields for either creating or modifying a user / operator
      type: object
      x-implements: IUser
      x-abstract: true
      properties:
        name:
          type: string
          description: >-
            The user's full name
        username:
          type: string
          description: >-
            The user's login name
        email:
          type: string
          description: >-
            The user's e-mail
        customValues:
          type: object
          description: >-
            Holds the custom field values, keyed by field internal name or id. The
            format of the value depends on the custom field type. In order to lookup
            the custom fields, use either the `GET /users/data-for-new` (when
            creating) or `GET /users/{user}/data-for-edit` (when modifying) a user,
            and lookup each field by either internal name. Example: `{...,
            "customValues": {"gender": "male", "birthDate":
            "1980-10-27"}}`
          additionalProperties:
            type: string

    BasicUserQueryFilters:
      description: >-
        Base definitions for user search filters
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/FullTextWithDistanceQueryFilters'
        - type: object
          properties:
            usersToExclude:
              type: array
              items:
                type: string
              description: >-
                Indicated the users to be excluded from the result
            usersToInclude:
              type: array
              items:
                type: string
              description: >-
                Indicated the users to be included in the result.  Any other user
                not present in this list will be excluded from the result.
            activationPeriod:
              description: >-
                The minimum / maximum user activation date. Only taken into account
                if searching as administrator or managing broker.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            creationPeriod:
              description: >-
                The minimum / maximum user creation date. Only taken into account if
                searching as administrator or managing broker.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            lastLoginPeriod:
              description: >-
                The minimum / maximum user last login date. Only taken into account
                if searching as administrator or managing broker.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            groups:
              type: array
              items:
                type: string
              description: >-
                Either id or internal names of groups / group sets
            brokers:
              type: array
              items:
                type: string
              description: >-
                Either id or a principal (login name, e-mail, etc) for brokers
            mainBrokerOnly:
              type: boolean
              description: >-
                When set to `true`, will match only users that have the brokers as
                set in the `brokers` parameter as main broker.
            includeGroup:
              type: boolean
              description: >-
                When set to `true` and the logged user has permission to view user
                groups, will return the `group` property on users.
            includeGroupSet:
              type: boolean
              description: >-
                When set to `true` and the logged user has permission to view user
                group sets, will return the `groupSet` property on users.
            addressResult:
              $ref: '#/components/schemas/UserAddressResultEnum'

    BrokerDataForAdd:
      description: >-
        Data for adding a new broker to a user.
      type: object
      properties:
        user:
          description: The user
          allOf:
            - $ref: '#/components/schemas/User'
        brokers:
          description: The current user's brokers
          type: array
          items:
            $ref: '#/components/schemas/User'
        brokerGroups:
          description: >-
            The broker groups that can be used when searching for the new broker
          type: array
          items:
            $ref: '#/components/schemas/Group'

    BrokerView:
      description: >-
        Contains data about a brokerage relationship
      type: object
      properties:
        mainBroker:
          type: boolean
          description: >-
            Indicates whether this broker is the main or not.
        since:
          type: string
          format: date-time
          description: >-
            Indicates when the brokerage relationship began.
        broker:
          description: >-
            The broker user.
          allOf:
            - $ref: '#/components/schemas/User'

    Brokering:
      description: >-
        A brokering relationship with a specific broker
      type: object
      properties:
        broker:
          description: The broker user
          allOf:
            - $ref: '#/components/schemas/User'
        main:
          description: Indicates if this is the user's main broker
          type: boolean
        since:
          description: The date the brokering relation started
          type: string
          format: date-time

    BrokeringLog:
      type: object
      properties:
        broker:
          description: The broker
          allOf:
            - $ref: '#/components/schemas/User'
        by:
          description: The user that performed the action
          allOf:
            - $ref: '#/components/schemas/User'
        action:
          $ref: '#/components/schemas/BrokeringActionEnum'
        date:
          description: The action date
          type: string
          format: date-time

    BrokeringView:
      description: >-
        Details of a brokering relationship
      allOf:
        - $ref: '#/components/schemas/Brokering'
        - type: object
          properties:
            user:
              description: The user
              allOf:
                - $ref: '#/components/schemas/User'

    BuyVoucher:
      description: >-
        Parameters for buying vouchers
      type: object
      properties:
        count:
          description: >-
            The number of vouchers to buy. Defaults to 1.
          type: integer
        amount:
          description: >-
            The amount per voucher
          type: string
          format: number
        type:
          description: >-
            Either the `id` or `internalName` of the voucher type
          type: string
        customValues:
          type: object
          description: >-
            Holds the payment custom field values, keyed by field internal name or
            id. The format of the value depends on the custom field type.
          additionalProperties:
            type: string

    BuyVoucherError:
      description: >-
        Error when buying a voucher
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            currency:
              description: >-
                Currency reference. Only if `code` is
                `maxAmountForPeriod` or
                `maxTotalOpenAmount`
              allOf:
                - $ref: '#/components/schemas/Currency'
            amountLeftForBuying:
              description: >-
                Indicates the maximum amount the user can buy this time without
                exceeding the maximum. Only if `code` is
                `maxAmountForPeriod`.
              type: string
              format: number
            dateAllowedAgain:
              description: >-
                Indicates the date this user will be able to buy vouchers again for
                this type. Only if `code` is
                `maxAmountForPeriod`.
              type: string
              format: date-time
            currentOpenAmount:
              description: >-
                Indicates the current total amount that is open. Only if `code` is
                `maxOpenAmount` or
                `maxTotalOpenAmount`.
              type: string
              format: number
            maxOpenAmount:
              description: >-
                Indicates the maximum total open amount. Only if `code` is
                `maxOpenAmount` or
                `maxTotalOpenAmount`.
              type: string
              format: number
            paymentError:
              description: >-
                The `PaymentError` generated when the voucher payment was being
                created. Only if `code` is `payment`.
              allOf:
                - $ref: '#/components/schemas/PaymentError'
            code:
              $ref: '#/components/schemas/BuyVoucherErrorCode'

    CaptchaResponse:
      description: >-
        Data sent to the server containing the response of a user to a captcha
        challenge
      type: object
      properties:
        challenge:
          type: string
          description: >-
            The captcha challenge identifier
        response:
          type: string
          description: >-
            The captcha response, as informed by the user

    ChangeForgottenPassword:
      description: >-
        The parameters for confirming a forgotten password reset
      type: object
      properties:
        key:
          description: >-
            The key received by e-mail on the forgotten password reset request
          type: string
        securityAnswer:
          description: >-
            When a security question is asked, this is the answer, and is required.
          type: string
        newPassword:
          description: >-
            The new password value. Required when the password is manual.
          type: string
        checkConfirmation:
          type: boolean
          description: >-
            Depending on the client, if a confirm password field is shown to users,
            it might be useful to check the confirmation password value on the
            server. This way, if there are other validation exceptions, they are all
            shown together. In this case, this field should be set to `true` and the
            `confirmationValue` should be passed in with the user input. However, in
            cases where clients just want to register a user with a password non
            interactively (like in a bulk registration), passing the password value
            twice is not desirable. In such cases, this field can be left empty (or
            set to `false`), and the `newPasswordConfirmation` will be ignored.
        newPasswordConfirmation:
          type: string
          description: >-
            The new password confirmation value. Is ignored unless
            `checkConfirmation` is set to `true`.

    ChangeGroupMembershipParams:
      description: >-
        Parameters for changing a user / operator group
      type: object
      properties:
        group:
          description: >-
            The new group id or internal name
          type: string
        comment:
          description: >-
            Comments for this group change
          type: string

    ChangePassword:
      description: >-
        Contains fields used as parameters when changing a user's password
      type: object
      properties:
        oldPassword:
          description: >-
            The current password value. Required when the user is changing his own
            password. Not used when admins / brokers are changing the password of a
            user they manage.
          type: string
        newPassword:
          description: >-
            The new password value. Required.
          type: string
        checkConfirmation:
          type: boolean
          description: >-
            Depending on the client, if a confirm password field is shown to users,
            it might be useful to check the confirmation password value on the
            server. This way, if there are other validation exceptions, they are all
            shown together. In this case, this field should be set to `true` and the
            `confirmationValue` should be passed in with the user input. However, in
            cases where clients just want to register a user with a password non
            interactively (like in a bulk registration), passing the password value
            twice is not desirable. In such cases, this field can be left empty (or
            set to `false`), and the `newPasswordConfirmation` will be ignored.
        newPasswordConfirmation:
          type: string
          description: >-
            The new password confirmation value. Is ignored unless
            `checkConfirmation` is set to `true`.
        forceChange:
          description: >-
            Indicates whether the new password needs to be changed on the next
            login. Only used when admins / brokers are changing the password of a
            user they manage.
          type: boolean

    ChangePaymentRequestExpirationDate:
      description: >-
        Parameters for changing the payment request expiration date.
      type: object
      properties:
        comments:
          description: >-
            A comment the payee can set.
          type: string
        newExpirationDate:
          description: >-
            The new payment request expiration date.
          type: string
          format: date-time

    ChangeUserStatusParams:
      description: >-
        Parameters for changing a user status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/UserStatusEnum'
        comment:
          description: >-
            Comments for this status change
          type: string

    ChangeVoucherExpirationDate:
      description: >-
        Parameters for changing the voucher expiration date.
      type: object
      properties:
        comments:
          description: >-
            A comment that can be set.
          type: string
        newExpirationDate:
          description: >-
            The new voucher expiration date.
          type: string
          format: date-time

    ClientView:
      description: >-
        Details on an access client
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            activationDate:
              description: >-
                The date the client was activated
              type: string
              format: date-time
            confirmationPasswordInput:
              description: >-
                If a confirmation password is used, contains the definitions on how to
                request that password from the user. This confirmation password is required
                when performing sensible actions. Sometimes this is dynamic, for example,
                the confirmation might be configured to be used only once per session, or
                operations like payments may have a limit per day to be without confirmation
                (pinless).
              allOf:
                - $ref: '#/components/schemas/PasswordInput'
            canGetActivationCode:
              description: >-
                Can the authenticated user get the activation code, to later
                activate (assign) this client?
              type: boolean
            canUnassign:
              description: >-
                Can the authenticated user unassign this client?
              type: boolean
            canBlock:
              description: >-
                Can the authenticated user block this client?
              type: boolean
            canUnblock:
              description: >-
                Can the authenticated user unblock this client?
              type: boolean
            status:
              $ref: '#/components/schemas/ClientStatusEnum'

    ConflictError:
      description: >-
        Error returned when there was a conflict with some expected status vs the
        actual database status
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ConflictErrorCode'

    Contact:
      description: >-
        A contact is a relation between 2 users: the contact owner and the
        contact user. It can also contain custom fields.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            contact:
              description: >-
                The contact user (not the contact owner)
              allOf:
                - $ref: '#/components/schemas/User'

    ContactBasicData:
      description: >-
        Contains data shared by both ContactDataForNew and ContactDataForEdit
      type: object
      properties:
        customFields:
          description: >-
            The contact custom fields
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        contactUser:
          description: >-
            The contact user details
          allOf:
            - $ref: '#/components/schemas/User'

    ContactDataForEdit:
      description: >-
        Contains data for editing an existing contact
      allOf:
        - $ref: '#/components/schemas/ContactBasicData'
        - type: object
          properties:
            editableFields:
              description: >-
                The internal names of custom fields that can be edited
              type: array
              items:
                type: string
            contact:
              description: >-
                The contact that is being edited. This value can be modified and
                sent back to `PUT /contact/{id}`
              allOf:
                - $ref: '#/components/schemas/ContactEdit'

            binaryValues:
              description: >-
                Holds the current values for file / image custom fields as lists of
                `StoredFile`s / `Image`s.
              allOf:
                - $ref: '#/components/schemas/CustomFieldBinaryValues'

    ContactDataForNew:
      description: >-
        Contains data for creating a new contact
      allOf:
        - $ref: '#/components/schemas/ContactBasicData'
        - type: object
          properties:
            contact:
              description: >-
                The contact populated with the default fields. This value can be
                modified and sent back to `POST /{owner}/contacts/{contactUser}`.
              allOf:
                - $ref: '#/components/schemas/ContactNew'

    ContactEdit:
      description: >-
        Parameters for editing an existing contact
      allOf:
        - $ref: '#/components/schemas/ContactManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    ContactInfo:
      description: >-
        An additional contact information reference
      x-implements: IContactInfo
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            email:
              type: string
              description: >-
                The e-mail for this additional contact information
            mobilePhone:
              type: string
              description: >-
                The formatted mobile phone for this additional contact information
            landLinePhone:
              type: string
              description: >-
                The formatted landline phone for this additional contact information
            landLineExtension:
              type: string
              description: >-
                The landline phone extension for this additional contact information
            normalizedMobilePhone:
              type: string
              description: >-
                The mobile phone, normalized to the E.164 format
            normalizedLandLinePhone:
              type: string
              description: >-
                The land-line phone, normalized to the E.164 format
            address:
              $ref: '#/components/schemas/Address'
            image:
              $ref: '#/components/schemas/Image'

    ContactInfoBasicData:
      description: >-
        Contains data shared by both ContactInfoDataForNew and
        ContactInfoDataForEdit
      type: object
      properties:
        customFields:
          description: >-
            The additional contact information custom fields
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        addresses:
          description: >-
            The available user addresses, which can be referenced by id
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phoneConfiguration:
          $ref: '#/components/schemas/PhoneConfiguration'
        confirmationPasswordInput:
          description: >-
            If a confirmation password is used, contains the definitions on how to
            request that password from the user. This confirmation password is required
            when performing sensible actions. Sometimes this is dynamic, for example,
            the confirmation might be configured to be used only once per session, or
            operations like payments may have a limit per day to be without confirmation
            (pinless).
          allOf:
            - $ref: '#/components/schemas/PasswordInput'

    ContactInfoBinaryValuesForUserProfile:
      description: >-
        Holds the current additional contact image and binary field values
      allOf:
        - $ref: '#/components/schemas/CustomFieldBinaryValues'
        - type: object
          properties:
            image:
              $ref: '#/components/schemas/Image'

    ContactInfoConfigurationForUserProfile:
      description: >-
        User additional contacts data sent when editing the full profile
      type: object
      properties:
        contactInfo:
          description: >-
            Contains the default values for a new additional contact
          allOf:
            - $ref: '#/components/schemas/ContactInfoNew'
        customFields:
          description: >-
            The custom fields for additional contact informations
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        edit:
          type: boolean
          description: >-
            Can the authenticated user edit additional contacts?
        managePrivacy:
          type: boolean
          description: >-
            Can the authenticated user manage the privacy of additional contacts?
        maxContactInfos:
          type: integer
          description: >-
            The maximum number of additional contacts the user can own
        availability:
          $ref: '#/components/schemas/AvailabilityEnum'

    ContactInfoDataForEdit:
      description: >-
        Contains data for editing an existing additional contact information
      allOf:
        - $ref: '#/components/schemas/ContactInfoBasicData'
        - type: object
          properties:
            contactInfo:
              description: >-
                The additional contact information that is being edited. This value
                can be modified and sent back on `PUT /contactInfos/{id}`.
              allOf:
                - $ref: '#/components/schemas/ContactInfoEdit'
            edit:
              type: boolean
              description: >-
                Indicates whether the current contact info can be edited by the
                currently authenticated used.
            remove:
              type: boolean
              description: >-
                Indicates whether the current contact info can be removed by the
                currently authenticated used.
            image:
              $ref: '#/components/schemas/Image'
            binaryValues:
              description: >-
                Holds the current values for file / image custom fields as lists of
                `StoredFile`s / `Image`s.
              allOf:
                - $ref: '#/components/schemas/CustomFieldBinaryValues'

    ContactInfoDataForNew:
      description: >-
        Contains data for creating a new additional contact information
      allOf:
        - $ref: '#/components/schemas/ContactInfoBasicData'
        - type: object
          properties:
            contactInfo:
              description: >-
                The additional contact information populated with the default
                fields. This value can be modified and sent back on `POST
                /{user}/contactInfos`.
              allOf:
                - $ref: '#/components/schemas/ContactInfoNew'

    ContactInfoDetailed:
      description: >-
        Contains extra details of an additional contact information
      allOf:
        - $ref: '#/components/schemas/ContactInfo'
        - type: object
          properties:
            customValues:
              description: >-
                The list of custom field values on this additional contact
                information
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldValue'
            operations:
              description: >-
                The list of custom operations the logged user can run over this
                additional contact information
              type: array
              items:
                $ref: '#/components/schemas/Operation'

    ContactInfoEdit:
      description: >-
        Fields for editing an additional contact information
      allOf:
        - $ref: '#/components/schemas/ContactInfoManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    ContactInfoEditWithId:
      description: >-
        Parameters for editing an existing additional contact
      allOf:
        - $ref: '#/components/schemas/ContactInfoEdit'
        - type: object
          properties:
            id:
              type: string
              description: >-
                The internal entity identifier

    ContactInfoManage:
      description: >-
        Common fields for either creating or editing an additional contact
        information
      type: object
      x-implements: IContactInfo
      x-abstract: true
      properties:
        name:
          type: string
          description: >-
            The address name
        email:
          type: string
          description: >-
            The e-mail for this additional contact information
        mobilePhone:
          type: string
          description: >-
            The formatted mobile phone for this additional contact information
        landLinePhone:
          type: string
          description: >-
            The formatted landline phone for this additional contact information
        landLineExtension:
          type: string
          description: >-
            The landline phone extension for this additional contact information
        image:
          type: string
          description: >-
            The identifier of either an uploaded temporary image, or an existing
            additional contact image.
        address:
          type: string
          description: >-
            The identifier for the user address to be used as address of this
            additional contact information
        hidden:
          type: boolean
          description: >-
            Whether this additional contact information should be hidden for other
            users
        customValues:
          type: object
          description: >-
            Holds the custom field values, keyed by field internal name or id. The
            format of the value depends on the custom field type. Example:
            `{..., "customValues": {"gender": "male", "birthDate":
            "1980-10-27"}}`
          additionalProperties:
            type: string

    ContactInfoNew:
      description: >-
        Fields for a new additional contact information
      allOf:
        - $ref: '#/components/schemas/ContactInfoManage'

    ContactInfoResult:
      description: >-
        An additional contact information as a result item
      allOf:
        - $ref: '#/components/schemas/ContactInfo'
        - type: object
          properties:
            hidden:
              type: boolean
              description: >-
                Indicates whether this additional contact information is hidden for
                other users.
            customValues:
              type: object
              description: >-
                Holds the values for custom fields, keyed by field internal name or
                id. The format of the value depends on the custom field type.
                Example: `{..., "customValues": {"gender": "male",
                "birthDate": "1980-10-27"}}`
              additionalProperties:
                type: string

    ContactInfoView:
      description: >-
        Contains details of an additional contact information
      allOf:
        - $ref: '#/components/schemas/ContactInfoDetailed'
        - type: object
          properties:
            user:
              description: >-
                The user which owns this additional contact information
              allOf:
                - $ref: '#/components/schemas/User'
            editable:
              type: boolean
              description: >-
                Indicates whether the logged user can remove / edit this
                additional contact information
            hidden:
              type: boolean
              description: >-
                Indicates whether this additional contact information should be
                hidden for other users

    ContactListDataForSearch:
      description: >-
        Data for searching an user's contact list
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        customFields:
          description: >-
            The list of contact custom fields that are either to be used as search
            filter (if its internal name is present on `fieldsInSearch`) and / or in
            the result list (if its internal name is present on `fieldsInList`)
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        fieldsInSearch:
          description: >-
            The internal names of the contact custom fields that should be used as
            search filters (separated fields, not keywords)
          type: array
          items:
            type: string
        fieldsInList:
          description: >-
            The internal names of the contact custom fields that will be returned
            together with each record, and should be shown in the result list
          type: array
          items:
            type: string
        query:
          description: >-
            Default query filters for searching records
          allOf:
            - $ref: '#/components/schemas/ContactListQueryFilters'
        hasVisibleFields:
          description: >-
            This flag can be used to know whether selecting a contact in the contact
            list should show direclty the user profile or a contact details page to
            show additional custom fields.
          type: boolean
        hasEditableFields:
          description: >-
            This flag can be used to know whether the contact should be added
            directly to the user's contact list or a page should be shown for the
            user to fill in the contact custom fields.
          type: boolean
        addressFieldsInSearch:
          type: array
          items:
            $ref: '#/components/schemas/AddressQueryFieldEnum'

    ContactListQueryFilters:
      description: >-
        Search filters for an user's contact list
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            keywords:
              type: string
              description: >-
                Textual search keywords. Sometimes, like in user search, the fields
                matched depends on what is configured on the products.
            customFields:
              type: array
              items:
                type: string
              description: >-
                Concat custom field values used as filters. Is a comma-separated
                array, where each part consists in two parts: the internal name
                (or custom field id) of the field, and a value, both separated by
                : (colon).  For example,
                `customFields=field1:value1,field2:value2`. Sometimes
                multiple values are accepted. In this case, the multiple values are
                separated by pipes. For example,
                customFields=field1:valueA|valueB. Enumerated fields accept
                multiple values, while numeric and date fields also accept ranges,
                which are two values, pipe-separated. For example,
                `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31`
                would match results whose custom field with internal name
                `tradeType` is either `offer` or `search`, and whose `extraDate` is
                between January 1, 2000 and December 31, 2001. To specify a single
                bound in ranges (like birth dates before December 31, 2001), use a
                pipe in one of the values, like
                `customValues=extraDate:|2001-12-31`.
            orderBy:
              $ref: '#/components/schemas/ContactOrderByEnum'

    ContactManage:
      description: >-
        Common fields for either creating or editing a contact
      type: object
      x-abstract: true
      properties:
        customValues:
          type: object
          description: >-
            Holds the custom field values, keyed by field internal name or id. The
            format of the value depends on the custom field type. Example:
            `{..., "customValues": {"gender": "male", "birthDate":
            "1980-10-27"}}`
          additionalProperties:
            type: string

    ContactNew:
      description: >-
        Parameters for creating a new contact
      allOf:
        - $ref: '#/components/schemas/ContactManage'
        - type: object
          properties:
            contact:
              description: >-
                The user which is the contact of a given owner. Can be either the id
                or another identifier, such as login name or e-mail, depending on
                the Cyclos configuration.
              type: string

    ContactResult:
      description: >-
        Contains data returned when searching for an user's contact list
      allOf:
        - $ref: '#/components/schemas/Contact'
        - type: object
          properties:
            customValues:
              type: object
              description: >-
                Holds the values for contact custom fields which are set to be
                returned on list, keyed by field internal name
              additionalProperties:
                type: string

    ContactView:
      description: >-
        Detailed information when viewing a contact
      allOf:
        - $ref: '#/components/schemas/Contact'
        - type: object
          properties:
            owner:
              description: >-
                The user which owns this contact
              allOf:
                - $ref: '#/components/schemas/User'
            customValues:
              description: >-
                The list of custom field values this contact has
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldValue'
            canManage:
              description: >-
                Can the authenticated user manage this contact?
              type: boolean
            operations:
              description: >-
                List of runnable custom operations.
              type: array
              items:
                $ref: '#/components/schemas/Operation'

    ContactsPermissions:
      description: >-
        Permissions over contacts
      type: object
      properties:
        enable:
          description: >-
            Permission to own a contact list.
          type: boolean
        hasVisibleFields:
          description: >-
            Permission to view contacts custom fields.
          type: boolean
        hasEditableFields:
          description: >-
            Permission to manage contacts custom fields.
          type: boolean

    ContactsQueryFilters:
      description: >-
        Search filters for users that are contacts, not contacts themselves
      allOf:
        - $ref: '#/components/schemas/FullTextQueryFilters'
        - type: object
          properties:
            ignoreProfileFieldsInList:
              type: boolean
              description: >-
                When set to `true`, instead of returning users with corresponding
                profile fields set on list, will return them with `display` and
                `shortDisplay`.
            includeGroup:
              type: boolean
              description: >-
                When set to `true` and the logged user has permission to view user
                groups, will return the `group` property on users.
            includeGroupSet:
              type: boolean
              description: >-
                When set to `true` and the logged user has permission to view user
                group sets, will return the `groupSet` property on users.

    Country:
      description: >-
        Represents a country, with a code and display name
      type: object
      properties:
        code:
          description: >-
            The 2-letter, `ISO 3166-1 alpha-2` code
          type: string
        name:
          description: >-
            The display name (in the user's language)
          type: string

    CreateDeviceConfirmation:
      description: >-
        Contains data for create a pending device confirmation.
      type: object
      properties:
        from:
          type: string
          description: >-
            The payment account owner. Can be one of:


            - a user identification value, such as id, username, e-mail, phone, etc.
              Id is always allowed, others depend on Cyclos configuration. Note that
              a valid numeric value is always considered as id. For example, when
              using another identification method that can be numeric only, prefix
              the value with a single quote (like in Excel spreadsheets);

            - `self` for the currently authenticated user;

            - `system` for the owner of system accounts.


            Required only if type is `performPayment` or
            `performExternalPayment`.
        to:
          type: string
          description: >-
            Same as `from` but for the receiver.
            Required only if type is `performPayment`.
        toPrincipal:
          type: string
          description: >-
            The receiver of the external payment (email or mobile number).
            Required only if type is `performExternalPayment`.
        paymentType:
          type: string
          description: >-
            The payment type id or qualified internal name (in the form
            `fromAccountType.paymentType`).
            Required only if type is `performPayment`,
            `performExternalPayment`,
            `shoppingCartCheckout` or
            `importUserPayments`.
        amount:
          type: string
          format: number
          description: >-
            The amount involved in the confirmation, its meaning depends on the type.
            Required only if type is `performPayment`,
            `performExternalPayment`,
            `shoppingCartCheckout`,
            `generateVouchers` or
            `buyVouchers`.
        transaction:
          type: string
          description: >-
            Either the id or number of the transaction (or ticket number if type is `approveTicket`).
            Required only if type is `manageAuthorization`,
            `manageExternalPayment`,
            `manageScheduledPayment`,
            `manageRecurringPayment`,
            `managePaymentRequest` or
            `approveTicket`.
        transfer:
          type: string
          description: >-
            Either the id or number of the transfer.
            Required only if type is `chargeback`.
        account:
          type: string
          description: >-
            Either the id or number of the user account.
            Required only if type is `changeAccountLimits`.
        installment:
          type: string
          description:
            The id of a scheduled payment installment.
            Required only if type is `manageInstallment`.
        failedOccurrence:
          type: string
          description:
            The id of a recurring payment failed occurrence.
            Required only if type is `manageFailedOccurrence`.
        client:
          type: string
          description: >-
            The access client id or token. Required only if type
            is  `clientAction`.
        name:
          type: string
          description: >-
            The entity's name for which this confirmation is created for.
            Required only if type is either `manageAddress`,
            `managePhone` or `manageContactInfo`.
        type:
          $ref: '#/components/schemas/DeviceConfirmationTypeEnum'
        externalPaymentAction:
          description: >-
            The action being applied to the external payment. Required only if type
            is `manageExternalPayment`.
          allOf:
            - $ref: '#/components/schemas/ExternalPaymentActionEnum'
        scheduledPaymentAction:
          description: >-
            The action being applied to the scheduled payment. Required only if type
            is `manageScheduledPayment`.
          allOf:
            - $ref: '#/components/schemas/ScheduledPaymentActionEnum'
        recurringPaymentAction:
          description: >-
            The action being applied to the recurring payment.
            Required only if type is `manageRecurringPayment`.
          allOf:
            - $ref: '#/components/schemas/RecurringPaymentActionEnum'
        installmentAction:
          description: >-
            The action being applied to the scheduled payment installment.
            Required only if type is `manageInstallment`.
          allOf:
            - $ref: '#/components/schemas/InstallmentActionEnum'
        failedOccurrenceAction:
          description: >-
            The action being applied to the recurring payment failed occurrence.
            Required only if type is `manageFailedOccurrence`.
          allOf:
            - $ref: '#/components/schemas/FailedOccurrenceActionEnum'
        authorizationAction:
          description: >-
            The action being applied to the payment authorization. Required only if
            type is `manageAuthorization`.
          allOf:
            - $ref: '#/components/schemas/AuthorizationActionEnum'
        paymentRequestAction:
          description: >-
            The action being applied to the payment request.
            Required only if type is `managePaymentRequest`.
          allOf:
            - $ref: '#/components/schemas/PaymentRequestActionEnum'
        clientAction:
          description: >-
            The action being applied to the access client. Required only if type is
            `clientAction`.
          allOf:
            - $ref: '#/components/schemas/ClientActionEnum'
        operation:
          type: string
          description: >-
            Either the id or internal name of the custom operation being executed.
            Required only if type is `runOperation`.
        passwordType:
          type: string
          description: >-
            Either the id or internal name of the password type being e generatated.
            Required only if type is `generatePassword`.
        seller:
          type: string
          description: >-
            The order seller. Can be one a user identification value, such as id, username, e-mail, phone, etc.
            Id is always allowed, others depend on Cyclos configuration. Note that
            a valid numeric value is always considered as id. For example, when
            using another identification method that can be numeric only, prefix
            the value with a single quote (like in Excel spreadsheets);
            Required only if type is `shoppingCartCheckout`.
        order:
          type: string
          description: >-
            Either the id or number of an webshop order.
            Required only if type is `acceptOrder`.
        voucher:
          type: string
          description: >-
            The voucher id or token. Required only if type
            is  `manageVoucher`.
        voucherAction:
          description: >-
            The action being applied to the voucher. Required only if type is
            `manageVoucher`.
          allOf:
            - $ref: '#/components/schemas/VoucherActionEnum'
        voucherType:
          type: string
          description: >-
            Either the id or internal name of a voucher type.
            Required only if type is `generateVouchers` or
            `buyVouchers`.
        numberOfVouchers:
          type: integer
          description: >-
            The number of vouchers to be generated.
            Required only if type is `generateVouchers` or
            `buyVouchers`.



    CreateDevicePin:
       description: >-
         Contains data for create a new PIN for the authenticated user.
       type: object
       properties:
         name:
           description: >-
             The device pin's name. This name will be shown when listing the pins of a user to identify the device for
             which this pin was defined. It's ignored if already authenticated with a PIN or if a valid `deviceId` was given.
           type: string
         pin:
           description: The PIN value
           type: string
         pinConfirmation:
           description: >-
             The PIN confirmation value. Is ignored unless `checkConfirmation` is set to `true`.
           type: string
         checkConfirmation:
           description: >-
             Depending on the client, if a confirm pin field is shown to users, it might be useful to check the confirmation
             pin value on the server. This way, if there are other validation exceptions, they are all shown together.
             In this case, this flag should be set to `true` and the `pinConfirmation` should be passed in with the user input.
             Otherwise, if a confirm field is not shown then this flag can be left empty (or set to `false`), and the
             `pinConfirmation` will be ignored.
           type: boolean
         deviceId:
           description: >-
             Trusted device identification. If given then the `name` will be ignored and the pin's name will be copied from
             the device's name. This is necessary to get in sync when a pin is defined for an already trusted device.
           type: string


    CreateDevicePinResult:
       description: >-
         Contains data about the created PIN.
       type: object
       properties:
        pin:
          $ref: '#/components/schemas/DevicePinView'
        principal:
          description: >-
            The (randomly generated) unique principal that must be stored in the device and must be sent when the user
            choose to login with PIN.
          type: string
        salt:
          description: >-
            The (randomly generated) unique salt that must be stored in the device and must be prepended to the entered PIN
            value before send when the user choose to login with PIN.
          type: string


    Currency:
      description: >-
        Reference to a currency
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            symbol:
              description: >-
                The currency symbol
              type: string
            prefix:
              description: >-
                The currency prefix when formatting numbers
              type: string
            suffix:
              description: >-
                The currency suffix when formatting numbers
              type: string
            transactionNumberPattern:
              description: >-
                If transaction number is enabled for this currency, contains the
                pattern which is expected, in case of rendering a field for users to
                type in a transaction number
              type: string
            decimalDigits:
              description: >-
                The number of decimal digits used by this currency
              type: integer

    CustomField:
      description: >-
        Contains reference to a custom field
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            decimalDigits:
              type: integer
              description: >-
                The number of decimal digits. Only available if `type` is
                `decimal`.
            type:
              $ref: '#/components/schemas/CustomFieldTypeEnum'
            linkedEntityType:
              $ref: '#/components/schemas/LinkedEntityTypeEnum'
            control:
              $ref: '#/components/schemas/CustomFieldControlEnum'
            kind:
              $ref: '#/components/schemas/CustomFieldKind'

    CustomFieldBinaryValues:
      description: >-
        Holds the values for uploaded files / images which are used as custom field
        values
      type: object
      properties:
        fileValues:
          description: >-
            The values for custom fields of type `file`
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/StoredFile'
        imageValues:
          description: >-
            The values for custom fields of type `image`
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Image'

    CustomFieldDetailed:
      description: >-
        Contains all information needed to render a widget for a custom field value
      allOf:
        - $ref: '#/components/schemas/CustomField'
        - type: object
          properties:
            informationText:
              description: >-
                Additional text that can be shown to the user as a hint of this
                field
              type: string
            pattern:
              description: >-
                The (optional) mask to be applied to string values
              type: string
            required:
              description: >-
                Indicates whether this field is required
              type: boolean
            size:
              description: >-
                The suggested size for the rendered widget
              allOf:
                - $ref: '#/components/schemas/CustomFieldSizeEnum'
            allSelectedLabel:
              description: >-
                The label to be shown when all values are selected for a multi
                selection field.
              type: string
            defaultValue:
              description: >-
                The value that should be suggested as default. For multi selection
                will be a comma-separated string with possible values ids or
                internal names.
              type: string
            possibleValueCategories:
              description: >-
                Only applicable when the custom field is enumerated (single or multi
                select). Contains the possible value categories.
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            hasValuesList:
              description: >-
                Returns whether this custom field has a list of possible values,
                according to its type.
              type: boolean
            possibleValues:
              description: >-
                Only applicable when the custom field is enumerated (single or multi
                selection). Contains the possible values for selection. Each value
                may or may not have a category. When they have, it will be a string
                pointing to the internal name (if available) or id of the possible
                value category, which can be looked up in the categories property.
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldPossibleValue'
            dynamicValues:
              description: >-
                Only applicable when the custom field is dynamic selection. Contains
                the script-generated possible values.
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldDynamicValue'
            stringValues:
              description: >-
                Only applicable when the custom field type is
                `string` and `hasValuesList` is `true`.
                Contains the possible string values.
              type: array
              items:
                type: string
            dateValues:
              description: >-
                Only applicable when the custom field type is
                `date` and `hasValuesList` is `true`.
                Contains the possible date values.
              type: array
              items:
                type: string
                format: date-time
            integerValues:
              description: >-
                Only applicable when the custom field type is
                `integer` and `hasValuesList` is `true`.
                Contains the possible integer values.
              type: array
              items:
                type: integer
            decimalValues:
              description: >-
                Only applicable when the custom field type is
                `decimal` and `hasValuesList` is `true`.
                Contains the possible decimal values.
              type: array
              items:
                type: string
                format: number
            adValues:
              description: >-
                Only applicable when the custom field is linked entity of type
                `advertisement` and `hasValuesList` is
                `true`. Contains the possible advertisements.
              type: array
              items:
                $ref: '#/components/schemas/Ad'
            transactionValues:
              description: >-
                Only applicable when the custom field is linked entity of type
                `transaction` and `hasValuesList` is
                `true`. Contains the possible transactions.
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
            transferValues:
              description: >-
                Only applicable when the custom field is linked entity of type
                `transfer` and `hasValuesList` is `true`.
                Contains the possible transfers.
              type: array
              items:
                $ref: '#/components/schemas/Transfer'
            recordValues:
              description: >-
                Only applicable when the custom field is linked entity of type
                `record` and `hasValuesList` is `true`.
                Contains the possible records.
              type: array
              items:
                $ref: '#/components/schemas/Record'
            userValues:
              description: >-
                Only applicable when the custom field is linked entity of type
                `user` and `hasValuesList` is `true`.
                Contains the possible users.
              type: array
              items:
                $ref: '#/components/schemas/User'
            maxFiles:
              description: >-
                Only applicable when the custom field type is
                `file` or
                `image`. The maximun files that can be
                uploaded.
              type: integer
            mimeTypes:
              description: >-
                The allowed mime types for binary custom fields. Only applicable
                when the custom field type is either
                `file` or
                `image`.
              type: array
              items:
                type: string

    CustomFieldDynamicValue:
      description: >-
        Represents a single possible value of a dynamic custom field
      type: object
      properties:
        value:
          description: >-
            The internal value
          type: string
        label:
          description: >-
            The display label
          type: string
        defaultValue:
          description: >-
            The value that should be suggested as default.
          type: boolean

    CustomFieldPossibleValue:
      description: >-
        Represents a single possible value of an enumerated (single or multi
        selection) custom field
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            value:
              type: string
              description: >-
                The display value
            default:
              type: boolean
              description: >-
                Indicates if this possible value is the default one.
            internalName:
              type: string
              description: >-
                The entity internal name, which can be seen as an extra identifier
            category:
              description: >-
                The internal name (if available) or id of the possible value
                category. Optional, and never used if custom field type is dynamic
                selection.
              allOf:
                - $ref: '#/components/schemas/EntityReference'

    CustomFieldValue:
      description: >-
        See the description on `BaseCustomFieldValue`
      allOf:
        - $ref: '#/components/schemas/BaseCustomFieldValue'
        - type: object
          properties:
            field:
              description: >-
                The custom field reference
              allOf:
                - $ref: '#/components/schemas/CustomField'

    DataForAccountHistory:
      description: >-
        Contains data used to search the history of a given account
      allOf:
        - $ref: '#/components/schemas/BaseTransferDataForSearch'
        - type: object
          properties:
            account:
              $ref: '#/components/schemas/AccountWithOwnerAndCurrency'
            accessClients:
              description: >-
                References for access clients which can be used to filter entries by
                transfers generated by a specific access client
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            operators:
              description: >-
                References for operators, which can be used to filter entries by
                transfers performed or received by that specific operator
              type: array
              items:
                $ref: '#/components/schemas/User'
            transactionNumberMask:
              description: >-
                If a transaction number is used for this account, is a pattern that
                represent it.
              type: string
            canFilterByDirection:
              description: >-
                Whether the current user can use the direction filter by direction.
                In some cases, such as restricted operators that can only see
                incoming or outgoing payments, this flag will be `false`.
              type: boolean
            showDescriptionInFilters:
              description: >-
                Whether to show the description as filter or not
              type: boolean
            showDescriptionInList:
              description: >-
                Whether to show the description in the result list or not
              type: boolean
            customFieldsInSearch:
              description: >-
                Detailed references for custom fields that are set to be used as
                search filters
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldDetailed'
            customFieldsInList:
              description: >-
                Simple references for custom fields that are set to be used on the
                search result list
              type: array
              items:
                $ref: '#/components/schemas/CustomField'
            query:
              description: >-
                Default query filters for the account history
              allOf:
                - $ref: '#/components/schemas/AccountHistoryQueryFilters'

    DataForBalanceLimitsSearch:
      description: >-
        Configuration data for searching a account balance limits.
      type: object
      properties:
        groups:
          description: >-
            The groups the authenticated user can use to filter.
          type: array
          items:
            $ref: '#/components/schemas/Group'
        accountTypes:
          description: >-
            The account types that can be used to filter.
          type: array
          items:
            $ref: '#/components/schemas/AccountType'
        exportFormats:
          description: >-
            The formats which the search results can be exported.
          type: array
          items:
            $ref: '#/components/schemas/ExportFormat'

    DataForChangeForgottenPassword:
      description: >-
        Definitions for a user to confirm a forgotten password request
      type: object
      properties:
        generated:
          description: >-
            Indicates whether the password that is being affected is generated (when
            `true`) or manual (when `false`).
          type: boolean
        securityQuestion:
          description: >-
            If configured in Cyclos, and defined by the user, will be the security
            question that needs to be answered in order to complete the forgotten
            password reset request.
          type: string

    DataForDeviceConfirmationApproval:
      description: >-
        Contains data for approve / reject device confirmations
      type: object
      properties:
        allowGuest:
          description: >-
            Whether the user must be authenticated or not to approve / reject
          type: boolean

    DataForDynamicDocument:
      description: >-
        Contains the data for processing a dynamic document for a given user
      type: object
      properties:
        document:
          description: The document which is being processed
          allOf:
          - $ref: '#/components/schemas/Document'
        user:
          description: The user for which the document is being processed
          allOf:
          - $ref: '#/components/schemas/User'
        formFields:
          description: The document form fields to be filled in
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'


    DataForEasyInvoice:
      description: >-
        Contains data for an easy invoice. When called as guest, a subset of the
        fields are returned.
      type: object
      properties:
        to:
          description: >-
            The destination user details. Is only returned if called with a logged
            user or if the user's group is visible to guests accoerding to the
            current configuration.
          allOf:
            - $ref: '#/components/schemas/User'
        amount:
          description: >-
            The easy invoice amount
          type: string
          format: number
        currency:
          $ref: '#/components/schemas/Currency'
        paymentTypeData:
          description: >-
            Contains the detailed data for the selected (or first) payment type.
            Only returned if there is a logged user. The custom fields will only
            contain those without a fixed value.
          allOf:
            - $ref: '#/components/schemas/TransactionTypeData'
        deviceConfirmationAvailability:
          description: >-
            Only returned if there is not a logged user. Whether the confirmation with
            a trusted device is not used, optional or required.
          allOf:
            - $ref: '#/components/schemas/AvailabilityEnum'
        paymentTypes:
          description: >-
            Only returned if there is a logged user, and a specific payment type was
            not informed. Contains the allowed payment types to the given user.
          type: array
          items:
            $ref: '#/components/schemas/TransferTypeWithCurrency'
        customValues:
          description: >-
            The list of custom field values with a fixed value, as requested.
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValue'

    DataForEditFullProfile:
      description: >-
        Contains data for editing the full profile of a user
      type: object
      properties:
        userConfiguration:
          $ref: '#/components/schemas/UserDataForEdit'
        user:
          $ref: '#/components/schemas/UserEdit'

        display:
          type: string
          description: >-
            DEPRECATED. Use `userConfiguration.details.display` instead.


            Contains the formatting of the user according to the configuration. Is
            only returned if no profile fields are marked to return in user list.
          deprecated: true
          x-remove-version: 4.14
        shortDisplay:
          type: string
          description: >-
            DEPRECATED. Use `userConfiguration.details.shortDisplay` instead.


            Contains the short formatting of the user according to the
            configuration. Is only returned if no profile fields are marked to
            return in user list
          deprecated: true
          x-remove-version: 4.14

        phoneConfiguration:
          $ref: '#/components/schemas/PhoneConfigurationForUserProfile'
        landLinePhones:
          description: >-
            The existing land-line phones that can be modified and posted back
          type: array
          items:
            $ref: '#/components/schemas/PhoneEditWithId'
        mobilePhones:
          description: >-
            The existing mobile phones that can be modified and posted back
          type: array
          items:
            $ref: '#/components/schemas/PhoneEditWithId'

        addressConfiguration:
          $ref: '#/components/schemas/AddressConfigurationForUserProfile'
        addresses:
          description: >-
            The existing addresses that can be modified and posted back
          type: array
          items:
            $ref: '#/components/schemas/AddressEditWithId'
        contactInfoConfiguration:
          $ref: '#/components/schemas/ContactInfoConfigurationForUserProfile'
        contactInfos:
          description: >-
            The existing additional contacts that can be modified and posted back
          type: array
          items:
            $ref: '#/components/schemas/ContactInfoEditWithId'
        contactInfoBinaryValues:
          description: >-
            Values for images and binary custom fields for additional contacts
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContactInfoBinaryValuesForUserProfile'

        imageConfiguration:
          $ref: '#/components/schemas/ImageConfigurationForUserProfile'
        images:
          description: >-
            All current user images
          type: array
          items:
            $ref: '#/components/schemas/Image'

        confirmationPasswordInput:
          description: >-
            If a confirmation password is used, contains the definitions on how to
            request that password from the user. This confirmation password is required
            when performing sensible actions. Sometimes this is dynamic, for example,
            the confirmation might be configured to be used only once per session, or
            operations like payments may have a limit per day to be without confirmation
            (pinless).
          allOf:
            - $ref: '#/components/schemas/PasswordInput'


    DataForLogin:
      description: >-
        Contains data useful for a login form, as well as forgot password
      type: object
      properties:
        accessPasswordType:
          description: >-
            The password type used for login access
          allOf:
            - $ref: '#/components/schemas/EntityReference'
        principalTypes:
          description: >-
            The identification methods accepted for login
          type: array
          items:
            $ref: '#/components/schemas/PrincipalTypeInput'
        defaultPrincipalType:
          description: >-
            The internal name of the identification method that is marked as default
            for the current channel configuration. This is optional, and if there is
            no default, all possible identification methods will be attempted for
            login.
          type: string
        extraForgotPasswordPrincipalTypes:
          description: >-
            The additional identification methods also accepted for the forgotten
            password request.
          type: array
          items:
            $ref: '#/components/schemas/PrincipalTypeInput'
        loginPasswordInput:
          description: >-
            Contains data for the password used on login
          allOf:
            - $ref: '#/components/schemas/PasswordInput'
        pinActive:
          description: >-
            Whether the given pin, when requesting the data, can be used for login or not.
            Only if a `pinId` was given when requesting the data, and the `loginPasswordInput.pinAvailability` is not
            `disabled`.
          type: boolean
        deviceConfirmation:
          description: >-
            The pending device confirmation used to confirm a trusted session. Only
            returned if a trusted device identification was given when requesting
            the data and it exists and is active.
          allOf:
            - $ref: '#/components/schemas/DeviceConfirmationView'
        forgotPasswordCaptchaProvider:
          description: >-
            If the forgot password request requires a captcha, will be the provider
            used to request one. Otherwise will be null.
          allOf:
            - $ref: '#/components/schemas/CaptchaProviderEnum'
        forgotPasswordMediums:
          description: >-
            If the forgot password request is enabled, returns the mediums the user
            can choose to receive the confirmation key or code. If nothing is
            returned, forgot password is not enabled.
          type: array
          items:
            $ref: '#/components/schemas/SendMediumEnum'

    DataForMobileGuest:
      description: >-
        Contains definitions for the data for UI for guests
      allOf:
        - $ref: '#/components/schemas/MobileBaseData'
        - type: object
          properties:
            allowQuickPayment:
              description: >-
                Enables a quick payment action by showing the option to scan a QR
                code at login page.
              type: boolean
            dataForLogin:
              $ref: '#/components/schemas/DataForLogin'
            dataForDeviceConfirmationApproval:
              $ref: '#/components/schemas/DataForDeviceConfirmationApproval'
            groupsForRegistration:
              description: >-
                The list of groups the authenticated user can use to perform a new
                user registration
              type: array
              items:
                $ref: '#/components/schemas/GroupForRegistration'
            header:
              $ref: '#/components/schemas/UIElementWithContent'
            footer:
              $ref: '#/components/schemas/UIElementWithContent'

    DataForMobileUser:
      description: >-
        Contains definitions for the data for UI for users
      allOf:
        - $ref: '#/components/schemas/MobileBaseData'
        - type: object
          properties:
            autoCompleteResults:
              description: >-
                Number of search results for user autocomplete component
              type: integer
            hideUsersSearchMenu:
              description: >-
                Indicates if the user search menu should be hidden.
              type: boolean
            auth:
              $ref: '#/components/schemas/Auth'
            nameOfUser:
              description: >-
                The name of the current user (if any)
              type: string
            mobileHelp:
              description: >-
                The help content for mobile mode
              allOf:
                - $ref: '#/components/schemas/UIElementWithContent'
            posHelp:
              description: >-
                The help content for mobile mode
              allOf:
                - $ref: '#/components/schemas/UIElementWithContent'
            pages:
              description: >-
                The visible mobile pages
              type: array
              items:
                $ref: '#/components/schemas/MobilePage'
            operations:
              description: >-
                The custom operations the user can run
              type: array
              items:
                $ref: '#/components/schemas/Operation'
            canReceiveFromNfcTag:
              description: >-
                Indicates whether there is at least one NFC tag the user can use to
                receive payments
              type: boolean
            canActivateAsTrustedDevice:
              description: >-
                Indicates whether there is an allowed medium to activate the device
                as trusted
              type: boolean
            personalizeOtherUsers:
              description: >-
                Indicates if the current user can personalize NFC tags for other
                users (as member)
              type: boolean
            mobileCameraOnPayment:
              description: >-
                Indicates whether the scan QR code option should be displayed for
                payments
              type: boolean
            principalsAllowingQRCode:
              description: >-
                Indicates the possible principals which are allowed to be used in QR
                code generation
              type: array
              items:
                $ref: '#/components/schemas/Principal'
            scanQr:
              description: >-
                Indicates whether the scan QR code option (global) should be displayed by checking
                if the user can approve a ticket, or has a QR/Barcode for make payments, or has
                an easy invoice channel enabled
              type: boolean
            enableBluetoothPrinter:
              description: >-
                Whether the bluetooth printer is enabled or not
              type: boolean
            shoppingCartWebShopCount:
              description: >-
                The total number of webshop ads present in the shopping cart
              type: integer
            notificationsStatus:
              description: >-
                Status of user notifications, like new received or unread
                notifications
              allOf:
                - $ref: '#/components/schemas/NotificationsStatus'
            allowedOperations:
              type: array
              items:
                $ref: '#/components/schemas/MobileOperationEnum'

    DataForSetSecurityAnswer:
      description: >-
        Data for setting the security answer.
      type: object
      properties:
        securityQuestions:
          description: >-
            The possible security questions.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'

    DataForTransaction:
      description: >-
        Contains basic configuration data used when performing a transaction. The
        path that returns it will normally receive the main transaction owner
        (system or user), plus 2 other optional parameters: - The other subject
        (system or user) that will either receive or perform
          the payment.
        - The payment type. There are 3 possibilities when returning: - When the
        other subject wasn't selected. In this case, will contain very
          few information, mostly the accounts.
        - The other subject is selected, but not a payment type. If so, the
          payment types will be returned, but not information on how to pick
          the subject user, or the accounts.
        - Both other subject and payment type are selected: In this case
          only the payment type data will be returned
      type: object
      properties:
        accounts:
          description: >-
            Only returned when the payment type is not selected. Contains the
            possible accounts which can be used either as source (when performing
            the payment) or destination (when receiving the payment, on POS).
          type: array
          items:
            $ref: '#/components/schemas/AccountWithStatus'
        fromKind:
          description: >-
            Indicates the account kind that will perform the payment
          allOf:
            - $ref: '#/components/schemas/AccountKind'
        fromUser:
          description: >-
            Only returned if `fromKind` is `user`. Is the payer user.
          allOf:
            - $ref: '#/components/schemas/User'
        toKind:
          description: >-
            Indicates the account kind that will receive the payment
          allOf:
            - $ref: '#/components/schemas/AccountKind'
        toUser:
          description: >-
            Only returned if `toKind` is `user`. Is the payee user.
          allOf:
            - $ref: '#/components/schemas/User'
        paymentTypeData:
          description: >-
            Contains the detailed data for the selected (or first) payment type
          allOf:
            - $ref: '#/components/schemas/TransactionTypeData'
        paymentTypes:
          description: >-
            Only returned when the payment type is not selected. Contains the
            allowed payment types for a payment between the selected from and to
            owners.
          type: array
          items:
            $ref: '#/components/schemas/TransferTypeWithCurrency'
        allowAutocomplete:
          description: >-
            Only returned when no subject is selected. Indicates whether the payee
            can be obtaining by freely searching users
          type: boolean
        allowContacts:
          description: >-
            Only returned when no subject is selected. Indicates whether the payee
            can be obtaining from the contact list
          type: boolean
        allowedUsers:
          description: >-
            If the authorized user is a restricted operator, it may be that the
            owner user has defined exactly to which users the operator can pay. If
            this is the case, this will be the list with such users.
          type: array
          items:
            $ref: '#/components/schemas/User'
        principalTypes:
          description: >-
            Only returned when no subject is selected. The possible principal types
            that can be used to locate the payee
          type: array
          items:
            $ref: '#/components/schemas/PrincipalTypeInput'
        defaultPrincipalType:
          description: >-
            Only returned when no subject is selected. If the `defaultIdMethod` is
            `principalType`, contains the internal name or id of the principal type
            that should be the default. If there is a default, the user should be
            provided with the option to choose which principal type he's using. If
            there is no default, all possible principal types will be attempted. In
            this case, the UI will normally not show the option for which principal
            type should be used.
          type: string
        defaultIdMethod:
          description: >-
            Only returned when no subject is selected. The default option for the
            identification method when performing a payment.
          allOf:
            - $ref: '#/components/schemas/IdentificationMethodEnum'

    DataForUi:
      description: >-
        Contains data to display an alternative user interface
      type: object
      properties:
        cyclosVersion:
          description: >-
            The version of the Cyclos server. It will of the form x.y[.z]
          type: string
        currentClientTime:
          description: >-
            The current time in the the user's time zone.
          type: string
          format: date-time
        auth:
          description: >-
            The logged user authentication. Not returned for guests.
          allOf:
            - $ref: '#/components/schemas/Auth'
        dataForLogin:
          description: >-
            The data used for logging the user in. Not returned for logged users.
          allOf:
            - $ref: '#/components/schemas/DataForLogin'
        publicRegistrationGroups:
          description: >-
            Groups that can be used for a public registration. Not returned for
            logged users.
          type: array
          items:
            $ref: '#/components/schemas/GroupForRegistration'
        mapData:
          description: >-
            Configuration data for map usage. Is null when maps are not used.
          allOf:
            - $ref: '#/components/schemas/MapData'
        decimalSeparator:
          description: >-
            The character used to specify the decimal point
          type: string
        groupingSeparator:
          description: >-
            The character used to separate thousands.
          type: string
        dateFormat:
          description: >-
            The pattern string used to format dates.

            The following are the letters used in each supported pattern:

            * dd: The day of the month;

            * MM: The month ranging from 1 to 12;

            * yyyy: The full year number.
          type: string
        timeFormat:
          description: >-
            The pattern string used to format time.

            The following are the letters used in each supported pattern:

            * hh: The hour of the morning or afternoon (12-hour clock);

            * HH: The hour of the day (24-hour clock);

            * mm: The minute within the hour;

            * a: Marker to idicate whether the hour (hh) is before or after
            noon.
          type: string
        timeZoneId:
          description: >-
            The time zone ID set in the configuration (e.g `Europe/Amsterdam`)
          type: string
        distanceUnit:
          $ref: '#/components/schemas/DistanceUnitEnum'
        rootUrl:
          description: >-
            The main URL set in the configuration
          type: string
        country:
          description: >-
            The ISO 3166-1 alpha-2 country code, as set in the configuration
          type: string
        maxImageWidth:
          description: >-
            Maximum width (in pixels) for uploaded images
          type: integer
        maxImageHeight:
          description: >-
            Maximum height (in pixels) for uploaded images
          type: integer
        maxUploadSize:
          description: >-
            Maximum size (in bytes) for uploaded files
          type: integer
        jpegQuality:
          description: >-
            Quality for JPEG image types (higher means better quality)
          type: integer
        language:
          description: >-
            The language set in the configuration
          allOf:
            - $ref: '#/components/schemas/Language'
        allowedLocales:
          description: >-
            The locales the user can select, for example to change the language.
          type: array
          items:
            $ref: '#/components/schemas/UserLocale'
        resourceCacheKey:
          description: >-
            A new key is generated after each server restart
          type: string
        appleStoreUrl:
          description: >-
            The mobile app url in the Apple store.
          type: string
        playStoreUrl:
          description: >-
            The mobile app url in the Play store.
          type: string
        theme:
          description: >-
            The theme content (i.e the CSS or its components according). Only
            returned when changed or if the corresponding `themeIf` parameter was
            not specified.

            The returned theme will be the following according to the UI kind:


            - `main`: If there is a logged user then the theme for
              users associated to the configuration. Otherwise the theme for guests;

            - `mobile`: only returned for guest;

            - `pay`: The theme defined for the ticket / easy
              invoice confirmation application interface (it's the same for logged
              users and guests).
          allOf:
            - $ref: '#/components/schemas/ThemeUIElement'
        header:
          description: >-
            The header content. Only returned when changed or if the corresponding
            `headerIf` parameter was not specified. For all cases the content
            returned will be the same for logged users an for guests.


            The returned header will be the following according to the UI kind:


            - `main`: The header configured for the main web
            interface;

            - `mobile`: The header configured for the mobile
            application. Only returned for guests;

            - `pay`: The header defined for the ticket / easy
            invoice confirmation interface.
          allOf:
            - $ref: '#/components/schemas/UIElementWithContent'
        footer:
          description: >-
            The footer content. Only returned when changed or if the corresponding
            `footerIf` parameter was not specified. For all cases the content
            returned will be the same for logged users an for guests.


            The returned footer will be the following according to the UI kind:


            - `main`: The footer configured for the main web
            interface;

            - `mobile`: The footer configured for the mobile
            application. Only returned for guests;

            - `pay`: The footer defined for the ticket / easy
            invoice confirmation interface.
          allOf:
            - $ref: '#/components/schemas/UIElementWithContent'

    DataForUserBalancesSearch:
      description: >-
        Data used for a user search together with account balances
      allOf:
        - $ref: '#/components/schemas/BaseUserDataForSearch'
        - type: object
          properties:
            accountTypes:
              description: >-
                The available account types for the search
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            query:
              description: >-
                Default query parameters
              allOf:
                - $ref: '#/components/schemas/UsersWithBalanceQueryFilters'

    DataForUserPasswords:
      description: >-
        Contains the data used to manage passwords of a user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        passwords:
          description: >-
            The status and possible actions for each password
          type: array
          items:
            $ref: '#/components/schemas/PasswordStatusAndActions'
        dataForSetSecurityAnswer:
          description: >-
            If the security answer is enabled in the configuration and the user
            has no security answer yet, contains data for setting it. Is not
            returned if not used or if the user already has an answer.
          allOf:
            - $ref: '#/components/schemas/DataForSetSecurityAnswer'
        confirmationPasswordInput:
          description: >-
            If a confirmation password is used, contains the definitions on how to
            request that password from the user. This confirmation password is required
            when performing sensible actions. Sometimes this is dynamic, for example,
            the confirmation might be configured to be used only once per session, or
            operations like payments may have a limit per day to be without confirmation
            (pinless).
          allOf:
            - $ref: '#/components/schemas/PasswordInput'

    DatePeriod:
      description: >-
        A period comprised of a begin and an end date
      type: object
      properties:
        begin:
          description: >-
            The period begin date, if any. Generally a period without a begin date
            can be seen as since all time.
          type: string
          format: date-time
        end:
          description: >-
            The period end date, if any. Generally a period without an end date can
            be seen as without a limit.
          type: string
          format: date-time

    DecimalRange:
      description: >-
        Represents a range of minimum / maximum decimal values (both optional). In
        general if both values are null the entire range is returned as null.
      type: object
      properties:
        min:
          description: >-
            The minimum value
          type: string
          format: number
        max:
          description: >-
            The maximum value
          type: string
          format: number

    DeliveryMethod:
      description: >-
        Reference to a webshop delivery method
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            enabled:
              type: boolean
              description: >-
                Whether this delivery method is enabled for new sales.
            description:
              type: string
              description: >-
                A description on how this delivery method works.
            chargeType:
              $ref: '#/components/schemas/DeliveryMethodChargeTypeEnum'
            deliveryTime:
              x-remove-version: 4.15
              deprecated: true
              description: >-
                Use `minDeliveryTime` and `maxDeliveryTime` instead.


                The maximum time interval expected for the products to be delivered.
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            minDeliveryTime:
              description: >-
                The minimum time interval expected for the products to be delivered.
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            maxDeliveryTime:
              description: >-
                The maximum time interval expected for the products to be delivered.
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            chargeAmount:
              description: >-
                The amount to be charged. Only makes sense if `chargeType` is
                `fixed`.
              type: string
              format: number
            chargeCurrency:
              description: >-
                The delivery price currency. Only makes sense if `chargeType` is
                `fixed`.
              allOf:
                - $ref: '#/components/schemas/Currency'



    DeliveryMethodBasicData:
      description: >-
        Contains data shared by both DeliveryMethodDataForNew and
        DeliveryMethodDataForEdit
      type: object
      properties:
        user:
          description: >-
            Reference to the owner of the delivery method
          allOf:
            - $ref: '#/components/schemas/User'
        currencies:
          description: >-
            Contains the list of possible currencies for the delivery method
          type: array
          items:
            $ref: '#/components/schemas/Currency'

    DeliveryMethodDataForEdit:
      description: >-
        Contains data for editing an exinsting webshop delivery method
      allOf:
        - $ref: '#/components/schemas/DeliveryMethodBasicData'
        - type: object
          properties:
            edit:
              description: >-
                Can the authenticated user edit this delivery method?
              type: boolean
            remove:
              description: >-
                Can the authenticated user remove this delivery method?
              type: boolean
            deliveryMethod:
              description: >-
                The delivery method populated with the current fields. This value
                can be modified and sent back on `PUT /delivery-methods/{id}`.
              allOf:
                - $ref: '#/components/schemas/DeliveryMethodEdit'

    DeliveryMethodDataForNew:
      description: >-
        Contains data for creating a new webshop delivery method
      allOf:
        - $ref: '#/components/schemas/DeliveryMethodBasicData'
        - type: object
          properties:
            deliveryMethod:
              description: >-
                The delivery method populated with the default fields. This value
                can be modified and sent back on `POST /{user}/delivery-methods`.
              allOf:
                - $ref: '#/components/schemas/DeliveryMethodNew'

    DeliveryMethodEdit:
      description: >-
        Fields for modifying a webshop delivery method.
      allOf:
        - $ref: '#/components/schemas/DeliveryMethodManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    DeliveryMethodManage:
      description: >-
        Common fields for either creating or editing a delivery method
      type: object
      x-abstract: true
      properties:
        enabled:
          type: boolean
          description: >-
            Whether this delivery method is enabled for new sales.
        name:
          type: string
          description: >-
            The visible name for this delivery method.
        description:
          type: string
          description: >-
            A description on how this delivery method works.
        chargeType:
          $ref: '#/components/schemas/DeliveryMethodChargeTypeEnum'
        deliveryTime:
          x-remove-version: 4.15
          deprecated: true
          description: >-
            Use `minDeliveryTime` and `maxDeliveryTime` instead.


            The maximum time interval expected for the products to be delivered.
          allOf:
            - $ref: '#/components/schemas/TimeInterval'
        minDeliveryTime:
          description: >-
            The minimum time interval expected for the products to be delivered.
          allOf:
            - $ref: '#/components/schemas/TimeInterval'
        maxDeliveryTime:
          description: >-
            The maximum time interval expected for the products to be delivered.
          allOf:
            - $ref: '#/components/schemas/TimeInterval'
        chargeAmount:
          type: string
          format: number
          description: >-
            The delivery price. Only makes sense if `chargeType` is
            `fixed`.
        chargeCurrency:
          type: string
          description: >-
            Either id or internal name of the price currency.


    DeliveryMethodNew:
      description: >-
        Fields for a new webshop delivery method.
      allOf:
        - $ref: '#/components/schemas/DeliveryMethodManage'

    DeliveryMethodView:
      description: >-
        Details of a webshop delivery method
      allOf:
        - $ref: '#/components/schemas/DeliveryMethod'
        - type: object
          properties:
            edit:
              description: >-
                Can the authenticated user edit this delivery method?
              type: boolean
            remove:
              description: >-
                Can the authenticated user remove this delivery method?
              type: boolean


    Device:
      description: >-
        A device reference
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            active:
              type: boolean
              description: >-
                Whether this device is active or not.
            date:
              type: string
              format: date-time
              description: >-
                When the device is not active it represents the creation date.
                Otherwise, the activation date.

    DeviceActivationResult:
      type: object
      properties:
        device:
          $ref: '#/components/schemas/Device'
        key:
          type: string
          description: >-
            The secret key that must be stored in the trusted device. This key in
            conjunction with the device identifier will be required to confirm
            operations in other channels.

    DeviceConfirmationActionParams:
      description: >-
        Contains data to perform a confirmation action (e.g approve / reject)
      type: object
      properties:
        deviceId:
          type: string
          description: >-
            The id of the device used to perform the confirmation action.
        hmac:
          type: string
          description: >-
            The HMAC-SHA256 calculated for the QR code using the secret key stored
            in the device.

    DeviceConfirmationView:
      description: >-
        Detailed information when viewing a device confirmation
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            qrContent:
              type: string
              description: >-
                The QR content for this confirmation. The content is a URL of the
                form:  cyclos://confirmation?id=confirmation_id&description=i18n_confirmation_type&fields=Label1:Value1|Label2:Value2...
            type:
              description: >-
                The type of the device confirmation.
              allOf:
                - $ref: '#/components/schemas/DeviceConfirmationTypeEnum'
            status:
              description: >-
                The status of the device confirmation.
              allOf:
                - $ref: '#/components/schemas/DeviceConfirmationStatusEnum'

    DeviceDataForEdit:
      description: >-
        Contains data for editing an existing device
      type: object
      properties:
        device:
          description: >-
            The device that is being edited. This value can be modified and sent
            back on `PUT /devices/{id}`.
          allOf:
            - $ref: '#/components/schemas/DeviceEdit'
        manage:
          type: boolean
          description: >-
            Whether the authenticated user can manage this device or not.

    DeviceDataForSend:
      description: >-
        Data for a send / resend the activation code
      type: object
      properties:
        email:
          description: >-
            The email to send the code if the selected medium is
            `email`.
          type: string
        phones:
          description: >-
            The available mobile phones to send the code. Verified and unverified
            phones will be included in this list. After a successful activation if
            the phone was not yet verified then it will automatically be marked as
            verified.
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        mediums:
          description: >-
            The available mediums for the activation code to be sent.
          type: array
          items:
            $ref: '#/components/schemas/SendMediumEnum'

    DeviceEdit:
      description: >-
        Fields for device edition.
      type: object
      properties:
        version:
          type: integer
          description: >-
            The version stamp for the current object, used for optimistic locking. When
            saving, the same version as previously received needs to be passed back. If
            no one else has saved the object, the version will match and the object will
            be updated. However, if someone other has saved the object, the version will
            no longer match, and an error will be raised. This is used to prevent
            multiple users (or processes) from updating the same object and unwilingly
            overridding the property values, leading to data loss.
        name:
          type: string
          description: >-
            The new device name. It must be unique per user.

    DevicePin:
      description: >-
        A device PIN reference
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            date:
              description: The last modification date or creation (if it was never modified).
              type: string
              format: date-time

    DevicePinDataForEdit:
      description: >-
        Contains data for editing an existing device PIN
      type: object
      properties:
        pin:
          description: >-
            The device PIN that is being edited. This value can be modified and sent
            back on `PUT /device-pins/{key}`.
          allOf:
            - $ref: '#/components/schemas/DevicePinEdit'
        manage:
          type: boolean
          description: >-
            Whether the authenticated user can manage this device PIN or not.

    DevicePinEdit:
      description: >-
        Fields for device PIN edition.
      type: object
      properties:
        version:
          type: integer
          description: >-
            The version stamp for the current object, used for optimistic locking. When
            saving, the same version as previously received needs to be passed back. If
            no one else has saved the object, the version will match and the object will
            be updated. However, if someone other has saved the object, the version will
            no longer match, and an error will be raised. This is used to prevent
            multiple users (or processes) from updating the same object and unwilingly
            overridding the property values, leading to data loss.
        name:
          type: string
          description: >-
            The new device PIN name. It must be unique per user.

    DevicePinView:
      description: >-
        Contains details about a device PIN
      allOf:
        - $ref: '#/components/schemas/DevicePin'
        - type: object
          properties:
            principalType:
              $ref: '#/components/schemas/PrincipalType'



    Document:
      description: Reference to a document
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            kind:
              description: The document kind
              allOf:
                - $ref: '#/components/schemas/DocumentKind'
            description:
              description: The document description.
              type: string
            category:
              description: >-
                The document category.
                Only if `kind` is either `static`
                or `dynamic`.
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            file:
              description: >-
                The document file description. Only if `kind` is either
                `static` or `user`.
              allOf:
              - $ref: '#/components/schemas/StoredFile'


    DocumentBasicData:
      description: >-
        Contains data shared by both DocumentDataForNew and DocumentDataForEdit
      type: object
      x-abstract: true
      properties:
        kind:
          $ref: '#/components/schemas/DocumentKind'
        categories:
          description: >-
            The possible document categories. Only returned if `kind` is
            `static`.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        user:
          description: >-
            The document owner user. Only returned if `kind` is
            `user`.
          allOf:
          - $ref: '#/components/schemas/User'

    DocumentDataForEdit:
      description: >-
        Fields for editing a document
      allOf:
        - $ref: '#/components/schemas/DocumentBasicData'
        - type: object
          properties:
            file:
              description: The current document file
              allOf:
              - $ref: '#/components/schemas/StoredFile'
            document:
              description: >-
                The document that is being edited. This value can be modified and sent
                back to `PUT /documents/{id}`.
              allOf:
                - $ref: '#/components/schemas/DocumentEdit'


    DocumentDataForNew:
      description: >-
        Fields for creating a new document
      allOf:
        - $ref: '#/components/schemas/DocumentBasicData'
        - type: object
          properties:
            document:
              description: >-
                The document that is being created. This value can be modified and sent
                back to either `POST /documents` (shared) or `POST /{user}/documents`.
              allOf:
                - $ref: '#/components/schemas/DocumentNew'


    DocumentDataForSearch:
      description: Configuration data for searching documents
      type: object
      properties:
        categories:
          description: Visible document categories
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        manageCategories:
          description: >-
            Either internal names of ids of categories the logged user can manage
          type: array
          items:
            type: string
        canManageIndividual:
          description: >-
            Indicates whether the logged user can manage individual documents
            of managed users
          type: boolean
        query:
          $ref: '#/components/schemas/DocumentQueryFilters'

    DocumentEdit:
      description: >-
        Fields for editing a document
      allOf:
      - $ref: '#/components/schemas/DocumentManage'
      - type: object
        properties:
          version:
            type: integer
            description: >-
              The version stamp for the current object, used for optimistic locking. When
              saving, the same version as previously received needs to be passed back. If
              no one else has saved the object, the version will match and the object will
              be updated. However, if someone other has saved the object, the version will
              no longer match, and an error will be raised. This is used to prevent
              multiple users (or processes) from updating the same object and unwilingly
              overridding the property values, leading to data loss.

    DocumentManage:
      description: >-
        Common fields for either creating or editing a document
      type: object
      x-abstract: true
      properties:
        name:
          description: The document name
          type: string
        description:
          description: The document description
          type: string
        enabled:
          description: Whether the document is enabled
          type: boolean

        category:
          description: >-
            The shared document category internal name or id.
            Only used if the document `kind` is either
            `static` or `dynamic`.
          type: string

        userVisible:
          description: >-
            Is this document visible by the owner user?
            Only used if the document `kind` is `user`.
          type: boolean
        brokerVisible:
          description: >-
            Is this document visible by the user's broker(s)?
            Only used if the document `kind` is `user`.
          type: boolean
        brokerManageable:
          description: >-
            Can this document be managed by the user's broker(s)?
            Only used if the document `kind` is `user`.
          type: boolean

    DocumentNew:
      description: >-
        Fields for creating a new individual document
      allOf:
      - $ref: '#/components/schemas/DocumentManage'
      - type: object

    DocumentQueryFilters:
      description: Filters used when searching documents
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            range:
              description: >-
                The range for returned documents. When not specified, defaults
                to `shared`.
              allOf:
                - $ref: '#/components/schemas/DocumentRangeEnum'
            categories:
              description: The shared document categories
              type: array
              items:
                type: string
            enabled:
              description: >-
                Only used if the logged user can manage documents. When set,
                filters documents by their `enabled` status, either `true` or
                `false`.
              type: boolean
            groups:
              description: >-
                Either the ids or internal names of individual document
                owners' group
              type: array
              items:
                type: string
            brokers:
              description: >-
                Either the ids or identification methods of individual document
                owners' brokers
              type: array
              items:
                type: string
            user:
              description: Either the id or identifier of the document owner
              type: string
            keywords:
              description: >-
                Used to filter documents containing that keywords in the the name or description (case insensitive)
              type: string

    DocumentResult:
      description: Result from a document search
      allOf:
        - $ref: '#/components/schemas/Document'
        - type: object
          properties:
            user:
              description: >-
                The document owner. Only if `kind` is `user`.
              allOf:
                - $ref: '#/components/schemas/User'


    DocumentView:
      description: Details of a document
      allOf:
        - $ref: '#/components/schemas/Document'
        - type: object
          properties:
            description:
              description: The document description.
              type: string
            enabled:
              description: Whether the document is enabled or not.
              type: boolean

            category:
              description: The document category, if a shared document
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            user:
              description: >-
                The document owner. Only if `kind` is `user`.
              allOf:
                - $ref: '#/components/schemas/User'
            userVisible:
              description: >-
                Is this document visible by the owner user?
                Only used if the document `kind` is `user`.
              type: boolean
            brokerVisible:
              description: >-
                Is this document visible by the user's broker(s)?
                Only used if the document `kind` is `user`.
              type: boolean
            brokerManageable:
              description: >-
                Can this document be managed by the user's broker(s)?
                Only used if the document `kind` is `user`.
              type: boolean

    Entity:
      description: >-
        Basic definition of a persistent entity
      x-abstract: true
      type: object
      properties:
        id:
          type: string
          description: >-
            The internal entity identifier

    EntityReference:
      description: >-
        Represents an entity that is being referenced from another one, without
        caring about the type of the referenced entity.
      x-final: true
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object

    Error:
      description: >-
        An error that happened during the request processing
      type: object
      properties:
        exceptionType:
          description: >-
            The server exception class name. Not intended to be shown to final
            users. Only for logging purposes.
          type: string
        exceptionMessage:
          description: >-
            The server exception message. Not intended to be shown to final users.
            Only for logging purposes.
          type: string
        kind:
          $ref: '#/components/schemas/ErrorKind'
      required:
        - exceptionType

    ExportFormat:
      description: >-
        Contains a reference to an export format
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            contentType:
              type: string
              description: >-
                Indicates the content type (mime type) for the generated content.
            binary:
              type: boolean
              description: >-
                Indicates whether the content generated by this format is
                binary (true) or textual (false)
            encoding:
              type: string
              description: >-
                Indicates the character encoding for the textual content.
                Only returned `binary` is false.

    ExternalPaymentsPermissions:
      description: >-
        Permissions over own external payments
      type: object
      properties:
        view:
          description: >-
            Can view external payments?
          type: boolean

    ForbiddenError:
      description: >-
        Error returned when a HTTP status code 403 occurs
      type: object
      properties:
        passwordType:
          description: >-
            The password type of the failed password. Only sent if `code` is one
            of: - `invalidPassword` -
            `expiredPassword` -
            `temporarilyBlocked` -
            `indefinitelyBlocked`
          allOf:
            - $ref: '#/components/schemas/EntityReference'
        maxDeviceActivationReached:
          description: >-
            The maximum attemps for a device activation was reached. The
            authenticated user is blocked. Only sent if `code` is
            `invalidDeviceActivationCode`
          type: boolean
        code:
          $ref: '#/components/schemas/ForbiddenErrorCode'
        invalidDeviceConfirmation:
          description: >-
            The result associated to an invalid device confrmation. Only sent if
            `code` is `invalidDeviceConfirmation`
          allOf:
            - $ref: '#/components/schemas/InvalidDeviceConfirmationEnum'

    ForgottenPasswordError:
      description: >-
        Error when changing a forgotten password
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            keyInvalidated:
              description: >-
                Flag indicating if the key received on the forgotten password reset
                request was invalidated because the maximum tries was reached. Only
                if code is `invalidSecurityAnswer`.
              type: boolean
            code:
              $ref: '#/components/schemas/ForgottenPasswordErrorCode'

    ForgottenPasswordRequest:
      description: >-
        Definitions to request a forgotten password reset
      type: object
      properties:
        user:
          description: >-
            An identification method for the user. Allows the same identification
            methods (principal types) as the login, plus e-mail.
          type: string
        captcha:
          description: >-
            The captcha response required when something is returned in
            `DataForLogin.forgotPasswordCaptchaProvider`.
          allOf:
            - $ref: '#/components/schemas/CaptchaResponse'

    FullProfileEdit:
      description: >-
        Data sent to the server to edit the full profile at once
      type: object
      properties:
        user:
          description: >-
            The basic fields. If null, the fields are not modified
          allOf:
            - $ref: '#/components/schemas/UserEdit'
        createLandLinePhones:
          description: >-
            Land-line phones to be created. If not sent / empty, no land-line phones
            are created.
          type: array
          items:
            $ref: '#/components/schemas/PhoneNew'
        createMobilePhones:
          description: >-
            Mobile phones to be created. If not sent / empty, no mobile phones are
            created.
          type: array
          items:
            $ref: '#/components/schemas/PhoneNew'
        modifyLandLinePhones:
          description: >-
            Land-line phones to be modified. If not sent / empty, no land-line
            phones are modified
          type: array
          items:
            $ref: '#/components/schemas/PhoneEditWithId'
        modifyMobilePhones:
          description: >-
            Mobile phones to be modified. If not sent / empty, no mobile phones are
            modified.
          type: array
          items:
            $ref: '#/components/schemas/PhoneEditWithId'
        removePhones:
          description: >-
            Phones (both land-line and mobile) to be removed. If not sent / empty,
            no phones are removed.
          type: array
          items:
            type: string
        createAddresses:
          description: >-
            Addresses to be created. If not sent / empty, no addresses are created.
          type: array
          items:
            $ref: '#/components/schemas/AddressNew'
        modifyAddresses:
          description: >-
            Addresses to be modified. If not sent / empty, no addresses are
            modified.
          type: array
          items:
            $ref: '#/components/schemas/AddressEditWithId'
        removeAddresses:
          description: >-
            Addresses to be removed. If not sent / empty, no addresses are removed.
          type: array
          items:
            type: string
        createContactInfos:
          description: >-
            Additional contacts to be created. If not sent / empty, no additional
            contacts are created.
          type: array
          items:
            $ref: '#/components/schemas/ContactInfoNew'
        modifyContactInfos:
          description: >-
            Additional contacts to be modified. If not sent / empty, no additional
            contacts are modified.
          type: array
          items:
            $ref: '#/components/schemas/ContactInfoEditWithId'
        removeContactInfos:
          description: >-
            Additional contacts to be removed. If not sent / empty, no additional
            contacts are removed.
          type: array
          items:
            type: string
        addImages:
          description: >-
            Identifiers of previously uploaded temporary images to be added as
            profile images. If not sent / empty, no images are added.
          type: array
          items:
            type: string
        removeImages:
          description: >-
            Identifiers of existing profile images to be removed. If not sent /
            empty, no images are removed.
          type: array
          items:
            type: string
        reorderImages:
          description: >-
            Identifiers of either existing or added profile images in the order they
            should be listed.
          type: array
          items:
            type: string

    FullProfileEditResult:
      description: >-
        Result of saving the full profile at once
      allOf:
      - $ref: '#/components/schemas/BasicFullProfileEditResult'
      - type: object
        properties:
          createdAddresses:
            description: >-
              Identifiers of created addresses
            type: array
            items:
              type: string
          createdContactInfos:
            description: >-
              Identifiers of created additional contacts
            type: array
            items:
              type: string
          createdImages:
            description: >-
              Identifiers of created profile images
            type: array
            items:
              type: string

    FullTextQueryFilters:
      description: >-
        Base definitions for search filters which have keywords and user profile
        fields
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            keywords:
              type: string
              description: >-
                Textual search keywords. Sometimes, like in user search, the fields
                matched depends on what is configured on the products.
            profileFields:
              type: array
              items:
                type: string
              description: >-
                User profile fields, both basic (full name, login name, phone,
                e-mail, etc) and custom fields, that are used for search. Is a
                comma-separated array, where each part consists in two parts:
                the internal name (or custom field id) of the field, and a value,
                both separated by `:` (colon). For example,
                `profileFields=field1:value1,field2:value2`. Sometimes
                multiple values are accepted. In this case, the multiple values are
                separated by pipes. For example,
                `profileFields=field1:valueA|valueB`. The accepted fields depend
                on the products the authenticated user has. Enumerated fields accept
                multiple values, while numeric and date fields also accept ranges,
                which are two values, pipe-separated. For example,
                `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31`
                would match results whose custom field with internal name 'rank' is
                either bronze or silver, and whose 'birthDate' is between January 1,
                2000 and December 31, 2001. To specify a single bound in ranges
                (like birth dates before December 31, 2001), use a pipe in one of
                the values, like `profileFields=birthDate:|2001-12-31`.


                The basic profile fields have one of the following identifiers:


                - `name` or `fullName`: Full name;

                - `username`, `loginName` or `login`: Login name;

                - `email`: E-mail;

                - `phone`: Phone;

                - `accountNumber`, `account`: Account number;

                - `image`: Image (accepts a boolean value, indicating that
                either
                  it is required that users either have images or not).


                If address is an allowed profile field for search, specific address
                fields may be searched. The allowed ones are normally returned as
                the `addressFieldsInSearch` field in the corresponding result from a
                data-for-search request.

                The specific address fields are:


                - `address`: Searches on any address field (not a specific
                field);

                - `address.address`: Searches on the fields that represent the
                  street address, which are `addressLine1`,
                  `addressLine2`,
                  `street`,
                  `buildingNumber` and
                  `complement`.
                  Note that normally only a subset of them should be enabled in the
                  configuration (either line 1 / 2 or street + number + complement);

                - `address.zip`: Searches for matching zip (postal) code;

                - `address.poBox`: Searches for matching postal box;

                - `address.neighborhood`: Searches by neighborhood;

                - `address.city`: Searches by city;

                - `address.region`: Searches by region (or state);

                - `address.country`: Searches by ISO 3166-1 alpha-2 country
                code.

                A note for dynamic custom fields: If a script is used to
                generate possible values for search, the list will be returned in
                the corresponding data, and it is sent as a pipe-separated list of
                values (not labels). For example:
                `profileFields=dynamic:a|b|c`. However, it is also possible to
                perform a keywords-like (full-text) search using the dynamic value
                label. In this case a single value, prefixed by single quotes should
                be used. For example: `profileFields=dynamic:'business`.

    FullTextWithDistanceQueryFilters:
      description: >-
        Base definitions for full-text search filters which also can search by
        distance
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/FullTextQueryFilters'
        - type: object
          properties:
            latitude:
              description: >-
                The reference latitude for distance searches
              type: number
              format: double
            longitude:
              description: >-
                The reference longitude for distance searches
              type: number
              format: double
            maxDistance:
              description: >-
                Maximum straight-line distance between the informed location and the
                resulting address. Is measured either in kilometers or miles,
                depending on the configuration. Only accepted if both `longitude`
                and `latitude` parameters are passed with the actual reference
                position.
              type: number
              format: double

    GeneralAccountBalanceLimitsResult:
      description: >-
        Result for the list of a general search of account balance limits
      allOf:
      - $ref: '#/components/schemas/AccountBalanceLimitsResult'
      - type: object
        properties:
          user:
            $ref: '#/components/schemas/User'

    GeneralOperatorsDataForSearch:
      type: object
      properties:
        userGroups:
          description: >-
            The groups the authenticated user can use to filter users. Admins can
            always filter by groups, while users depend on a permission, which can
            be to only view group sets, only groups or none.
          type: array
          items:
            $ref: '#/components/schemas/Group'
        query:
          description: >-
            Default query filters to search operators
          allOf:
            - $ref: '#/components/schemas/GeneralOperatorsQueryFilters'

    GeneralOperatorsQueryFilters:
      description: >-
        Definitions for general operators search filters
      allOf:
        - $ref: '#/components/schemas/BasicOperatorQueryFilters'
        - type: object
          properties:
            userGroups:
              type: array
              items:
                type: string
              description: >-
                Either id or internal names of user groups / group sets
            broker:
              type: string
              description: >-
                Either id or a principal (login name, e-mail, etc) of the user
                broker

    GeneralRecordsDataForSearch:
      description: >-
        Data for searching records of a type, from any user
      allOf:
        - $ref: '#/components/schemas/BaseRecordDataForSearch'
        - type: object
          properties:
            groups:
              description: >-
                The groups the authenticated user can use to filter user records
              type: array
              items:
                $ref: '#/components/schemas/Group'
            query:
              description: >-
                Default query filters for searching records
              allOf:
                - $ref: '#/components/schemas/GeneralRecordsQueryFilters'

    GeneralRecordsQueryFilters:
      description: >-
        Query filters for searching records of a type, regardless the user
      allOf:
        - $ref: '#/components/schemas/RecordQueryFilters'
        - type: object
          properties:
            brokers:
              description: >-
                Either the ids or identification methods of record owners' brokers
              type: array
              items:
                type: string
            groups:
              description: >-
                Either the ids or internal names of record owners' groups
              type: array
              items:
                type: string
            user:
              description: Either the id or identifier of the record owner
              type: string

    GeographicalCoordinate:
      description: >-
        A geographical coordinate with latitude and longitude
      type: object
      properties:
        latitude:
          type: number
          format: double
          description: >-
            The latitude
        longitude:
          type: number
          format: double
          description: >-
            The longitude

    Group:
      description: >-
        Contains data of a group
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            groupSet:
              description: >-
                The internal name or id of the group set of this group. Only makes
                sense if is a user or broker group. Administrator groups or group
                sets cannot have a group set.
              type: string
            kind:
              $ref: '#/components/schemas/GroupKind'

    GroupForRegistration:
      description: >-
        Contains data for a possible group for user registration
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            description:
              type: string
              description: >-
                The description set on the group to be displayed to the user

    GroupMembershipData:
      description: >-
        Contains the current user / operator group, as well as other information
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/UserStatusEnum'
        group:
          $ref: '#/components/schemas/Group'
        groupSets:
          description: >-
            List of group sets which can be referenced on groups on either
            `possibleNewGroups` or `history.group`. Not sent for operators.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        possibleNewGroups:
          description: >-
            If the authenticated user can change the user / operator to a new
            group, contains the list of groups that can be assigned.
          type: array
          items:
            $ref: '#/components/schemas/Group'
        history:
          description: >-
            Contains the history entries for all group changes
          type: array
          items:
            $ref: '#/components/schemas/GroupMembershipLog'


    GroupMembershipLog:
      description: >-
        Information regarding a specific group membership change
      type: object
      properties:
        by:
          $ref: '#/components/schemas/User'
        group:
          $ref: '#/components/schemas/Group'
        period:
          description: >-
            The begin and end date the for this group.
            The current group has no end date.
          allOf:
          - $ref: '#/components/schemas/DatePeriod'
        comment:
          description: >-
            Comments supplied by the manager that performed the group change
          type: string


    HttpRequestData:
      description: >-
        Contains data of an HTTP request
      type: object
      properties:
        method:
          type: string
          description: >-
            The HTTP method
        headers:
          type: object
          additionalProperties:
            type: string
          description: >-
            The HTTP request headers
        parameters:
          type: object
          additionalProperties:
            type: string
          description: >-
            The HTTP request query parameters
        body:
          type: string
          description: >-
            The HTTP request body

    IAddress:
      description: >-
        Interface containing the common address properties
      type: object
      x-interface: true
      properties:
        addressLine1:
          type: string
          description: >-
            The first line of the descriptive address
        addressLine2:
          type: string
          description: >-
            The second line of the descriptive address
        street:
          type: string
          description: >-
            The street name
        buildingNumber:
          type: string
          description: >-
            The numeric identifier for a land parcel, house, building or other
        complement:
          type: string
          description: >-
            The complement (like apartment number)
        zip:
          type: string
          description: >-
            A zip code that identifies a specific geographic (postal) delivery area
        poBox:
          type: string
          description: >-
            The post-office box, is an uniquely addressable box
        neighborhood:
          type: string
          description: >-
            The neighborhood name
        city:
          type: string
          description: >-
            The city name
        region:
          type: string
          description: >-
            The region or state
        country:
          type: string
          description: >-
            The country, represented as 2-letter, uppercase, ISO 3166-1 code
        location:
          description: >-
            The geolocation of the current address
          allOf:
            - $ref: '#/components/schemas/GeographicalCoordinate'

    IBasicUserNew:
      description: >-
        Interface containing the common properties to register a user / operator
      x-interface: true
      type: object
      properties:
        mobilePhones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNew'
          description: >-
            Mobile phones to be registered together with the user
        landLinePhones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNew'
          description: >-
            Land-line phones to be registered together with the user
        passwords:
          type: array
          items:
            $ref: '#/components/schemas/PasswordRegistration'
          description: >-
            The initial passwords of the user
        skipActivationEmail:
          type: boolean
          description: >-
            When set to true, the activation e-mail is not sent to the
            registered user. Can only be used when an administrator / broker is
            registering a user, and ignored on public registrations (the e-mail
            is always sent on public registrations).

    IContactInfo:
      description: >-
        Interface containing the common contact info properties
      type: object
      x-interface: true
      properties:
        email:
          type: string
          description: >-
            The e-mail for this additional contact information
        mobilePhone:
          type: string
          description: >-
            The formatted mobile phone for this additional contact information
        landLinePhone:
          type: string
          description: >-
            The formatted landline phone for this additional contact information
        landLineExtension:
          type: string
          description: >-
            The landline phone extension for this additional contact information

    IPhone:
      description: >-
        Interface containing the common phone properties
      type: object
      x-interface: true
      properties:
        name:
          type: string
          description: >-
            The phone name
        number:
          type: string
          description: >-
            The formatted number
        extension:
          type: string
          description: >-
            The number extension, only for landLine phones, and is only used if the
            phone configuration states that extensions are enabled.

    IPhoneDetailed:
      description: >-
        Interface containing additional common phone properties
      type: object
      x-interface: true
      x-implements: IPhone
      properties:
        name:
          type: string
          description: >-
            The phone name
        number:
          type: string
          description: >-
            The formatted number
        extension:
          type: string
          description: >-
            The number extension, only for landLine phones, and is only used if the
            phone configuration states that extensions are enabled.
        hidden:
          type: boolean
          description: >-
            Indicates whether this phone is hidden for other users (`true`) or visible
            to all users (`false`).
        enabledForSms:
          type: boolean
          description: >-
            Only applicable if this represents a mobile phone. Whether this mobile phone
            is enabled for SMS, both receiving notifications and sending SMS operations.
            Can only be set if the mobile phone is verified.
        verified:
          type: boolean
          description: >-
            Only applicable if this represents a mobile phone. Whether this mobile is
            verified. Can only be directly set by administrators. Regular users need to
            verify it.

    IUser:
      description: >-
        Interface containing the common user properties
      type: object
      x-interface: true
      properties:
        name:
          type: string
          description: >-
            The user's full name
        username:
          type: string
          description: >-
            The user's login name
        email:
          type: string
          description: >-
            The user's e-mail

    Image:
      description: >-
        Contains data for displaying an image
      allOf:
        - $ref: '#/components/schemas/StoredFile'
        - type: object
          properties:
            width:
              type: integer
              description: >-
                The image width, in pixels
            height:
              type: integer
              description: >-
                The image height, in pixels

    ImageConfigurationForUserProfile:
      description: >-
        User images data sent when editing the full profile
      type: object
      properties:
        manage:
          description: >-
            Can the authenticated user has permission to manage images?
          type: boolean
        maxImages:
          description: >-
            The maximum allowed number of profile images
          type: integer
        availability:
          $ref: '#/components/schemas/AvailabilityEnum'

    ImageView:
      description: >-
        Details about an image
      allOf:
        - $ref: '#/components/schemas/Image'
        - type: object
          properties:
            convertedToJpeg:
              description: >-
                Indicates whether this was originally a PNG format that exceeded the
                maximum allowed size and was automatically converted to JPEG.
              type: boolean
            kind:
              $ref: '#/components/schemas/ImageKind'

    ImagesListData:
      description: >-
        Contains information for a list of images, such as permissions and the list
        of images itself
      type: object
      properties:
        canManage:
          description: >-
            Does the authenticated user has permission to manage these images?
          type: boolean
        canCreate:
          description: >-
            Does the authenticated user has permission to create a new image?
          type: boolean
        maxImages:
          description: >-
            The maximum number of images allowed
          type: integer
        images:
          description: >-
            The list of images
          type: array
          items:
            $ref: '#/components/schemas/Image'
        availability:
          $ref: '#/components/schemas/AvailabilityEnum'

    IncomingMessage:
      description: >-
        An incoming message (in the user's inbox)
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            date:
              description: >-
                The message date
              type: string
              format: date-time
            category:
              description: >-
                The message category, for messages from system
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            fromUser:
              $ref: '#/components/schemas/User'
            subject:
              description: >-
                The message subject
              type: string
            body:
              description: >-
                The message body
              type: string

    InitializeNfcError:
      description: >-
        Error when initialize a NFC card
      allOf:
        - $ref: '#/components/schemas/BaseNfcError'
        - type: object
          properties:
            code:
              $ref: '#/components/schemas/InitializeNfcErrorCode'

    InputError:
      description: >-
        Error returned when some input data failed validation
      type: object
      properties:
        generalErrors:
          description: >-
            A list of errors that cannot be attributed to a specific property. Only
            returned if `code` is `validation`.
          type: array
          items:
            type: string
        properties:
          description: >-
            An array of properties which contains errors, in the order they were
            processed. As `propertyErrors` is an object (without a guaranteed order
            for its keys) the original order would be lost otherwise. Only returned
            if `code` is `validation`.
          type: array
          items:
            type: string
        propertyErrors:
          description: >-
            An object keyed by property name, whose values are lists of errors for
            that property. Only returned if `code` is
            `validation`.
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        customFields:
          description: >-
            An array of custom field internal names which contains errors, in the
            order they were processed. As `propertyErrors` is an object (without a
            guaranteed order for its keys) the original order would be lost
            otherwise. Only returned if `code` is `validation`.
          type: array
          items:
            type: string
        customFieldErrors:
          description: >-
            An object keyed by custom field internal name, whose values are lists of
            errors for that custom field. Only returned if `code` is
            `validation`.
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        maxItems:
          description: >-
            The maximum allowed items. Only returned if `code` is
            `maxItems`.
          type: integer
        maxFileSize:
          description: >-
            The maximum file size, in bytes, allowed for uploads. Only returned if
            `code` is `fileUploadSize`.
          type: integer
        value:
          description: >-
            The value that failed conversion to the expected data type, or the
            original full-text query keywords that failed parsing. Only returned if
            `code` is either `dataConversion` or
            `queryParse`.
          type: string
        name:
          description: >-
            The name of the required request parameter Only returned if `code` is
            `missingParameter`.
          type: string
        errors:
          description: >-
            The aggregated `InputError`s for each regular property, that is, those
            that have a single input. Only returned if `code` is
            `aggregated`.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InputError'
        indexedErrors:
          description: >-
            The aggregated `InputError`s for each list property, that is, those that
            have a list of inputs. It is guaranteed that the indexes in the input
            array correspond to the indexes in the corresponding value. The
            positions with no errors will contain `null`. Only returned if `code` is
            `aggregated`.
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/InputError'
        code:
          $ref: '#/components/schemas/InputErrorCode'

    Installment:
      description: >-
        Reference to a scheduled payment installment
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            number:
              description: >-
                The installment number.
              type: integer
            dueDate:
              description: >-
                The installment due date.
              type: string
              format: date-time
            amount:
              description: >-
                The installment amount
              type: string
              format: number
            status:
              $ref: '#/components/schemas/InstallmentStatusEnum'

    InstallmentDataForSearch:
      description: >-
        Contains data used to search installments for a given owner
      allOf:
        - $ref: '#/components/schemas/BaseInstallmentDataForSearch'
        - type: object
          properties:
            user:
              description: >-
                When the given owner is a user, is the reference to it
              allOf:
                - $ref: '#/components/schemas/User'

    InstallmentOverviewDataForSearch:
      description: >-
        Contains data used to search installments regardless of an owner
      allOf:
        - $ref: '#/components/schemas/BaseInstallmentDataForSearch'

    InstallmentOverviewQueryFilters:
      description: >-
        Query filters for installments regardless of an account owner.
      allOf:
        - $ref: '#/components/schemas/BaseInstallmentQueryFilters'
        - type: object
          properties:
            currencies:
              description: >-
                The currencies internal names or ids.
              type: array
              items:
                type: string
            fromAccountTypes:
              description: >-
                The source account types internal names or ids.
              type: array
              items:
                type: string
            toAccountTypes:
              description: >-
                The source account types internal names or ids.
              type: array
              items:
                type: string

    InstallmentOverviewResult:
      description: >-
        Represents an installment.
      allOf:
        - $ref: '#/components/schemas/BaseInstallmentResult'
        - type: object
          properties:
            transaction:
              description: >-
                The transaction that originated this installment
              allOf:
                - $ref: '#/components/schemas/TransactionOverviewResult'


    InstallmentPreview:
      description: >-
        Preview of an installment
      type: object
      properties:
        number:
          description: >-
            The installment number
          type: integer
        dueDate:
          description: >-
            The installment due date
          type: string
          format: date-time
        totalAmount:
          description: >-
            The final total installment amount
          type: string
          format: number
        mainAmount:
          description: >-
            Depending on the configured fees, it could happen that the main amount
            is deducted from fees amount. This reflects the new main amount. If no
            fees deduct, it will be the same as `totalAmount`.
          type: string
          format: number
        fees:
          description: >-
            Only returned for direct payments. Contains the fees that would be paid
            by the payer if the payment is confirmed.
          type: array
          items:
            $ref: '#/components/schemas/TransferFeePreview'

    InstallmentQueryFilters:
      description: >-
        Query filters for transactions related to an account owner.
      allOf:
        - $ref: '#/components/schemas/BaseInstallmentQueryFilters'
        - type: object
          properties:
            accountTypes:
              description: >-
                The account types
              type: array
              items:
                type: string
            direction:
              $ref: '#/components/schemas/TransferDirectionEnum'

    InstallmentResult:
      description: >-
        Represents an installment, as viewed from the point-of-view of an account
        owner. This means that credits will have a positive amount, while debits
        will be negative.
      allOf:
        - $ref: '#/components/schemas/BaseInstallmentResult'
        - type: object
          properties:
            transaction:
              description: >-
                The transaction that originated this installment
              allOf:
                - $ref: '#/components/schemas/TransactionResult'


    InstallmentView:
      description: >-
        Contains details about an installment
      allOf:
        - $ref: '#/components/schemas/Installment'
        - type: object
          properties:
            by:
              description: >-
                The user that performed an status change. For example, who manually
                paid, settled or canceled an open installment
              allOf:
                - $ref: '#/components/schemas/User'
            transferId:
              description: >-
                Only if the installment was processed, contains the internal
                identifier of the generated transfer.
              type: string
            transactionNumber:
              description: >-
                Only if the installment was processed, contains the transaction
                number of the generated transfer.
              type: string
            transferDate:
              description: >-
                The date the transfer was processed.
              type: string
              format: date-time
            canProcess:
              description: >-
                Can the authenticated user process this installment?
              type: boolean
            canSettle:
              description: >-
                Can the authenticated user settle this installment?
              type: boolean

    InternalNamedEntity:
      description: >-
        Basic definition of a persistent entity which has both a name and an
        internal name
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            internalName:
              type: string
              description: >-
                The entity internal name, which can be seen as an extra identifier

    InternalTransactionPreview:
      description: >-
        Base definitions for a preview before performing an internal transaction
      allOf:
        - $ref: '#/components/schemas/TransactionPreview'
        - type: object
          properties:
            pendingAuthorization:
              description: >-
                Indicates whether the transaction would be initially pending
                authorization in order to be processed
              type: boolean
            toAccount:
              $ref: '#/components/schemas/AccountWithOwner'

    Language:
      description: >-
        Reference to a language in Cyclos
      allOf:
        - $ref: '#/components/schemas/VersionedEntity'
        - type: object
          properties:
            code:
              description: >-
                The ISO 639-1 language code
              type: string

    LocalizationSettings:
      description: >-
        Localization preferences about user language.
      type: object
      properties:
        locale:
          description: >-
            The locale selected by user to work with the according language and
            settings.
          type: string

    LoginUser:
      description: >-
        Contains fields to login an user as administrator
      type: object
      properties:
        user:
          description: >-
            The user identification for login. The accepted kind of identification
            (login name, e-mail, etc) depend on the channel configuration.
          type: string
        password:
          description: >-
            The user password. The password type is set in the channel
            configuration.
          type: string
        remoteAddress:
          description: >-
            The IP address of the user requesting the login.
          type: string
        channel:
          description: >-
            The channel internal name. Defaults to `main`.
          type: string
        sessionTimeout:
          description: >-
            The amount of time the session is valid. The channel configuration has
            the session timeout, which is the maximum amount of time that can be
            set. If the given value is higher than the one in the configuration, it
            will be ignored. Defaults to the timeout set in the configuration.
          allOf:
            - $ref: '#/components/schemas/TimeInterval'

    MapData:
      description: >-
        Contains data relative to maps displayed in the application
      type: object
      properties:
        googleMapsApiKey:
          description: >-
            The Google Maps API key to be used by clients
          type: string
        defaultLocation:
          description: >-
            The default location, if any, for map displays
          allOf:
            - $ref: '#/components/schemas/GeographicalCoordinate'
        defaultZoomMobile:
          description: >-
            The default zoom level for mobile views
          type: integer
        defaultZoom:
          description: >-
            The default zoom level for larger views
          type: integer
        distanceUnit:
          $ref: '#/components/schemas/DistanceUnitEnum'

    MarketplacePermissions:
      description: >-
        Permissions for the marketplace
      type: object
      properties:
        mySimple:
          description: >-
            Simple advertisement permissions for the logged user.
            Only returned if there is an authenticated user.
          $ref: '#/components/schemas/MyMarketplacePermissions'
        myWebshop:
          description: >-
            Webshop ad permissions for the logged user.
            Only returned if there is an authenticated user.
          $ref: '#/components/schemas/MyMarketplacePermissions'
        userSimple:
          description: >-
            Permissions over simple advertisements of other users
          $ref: '#/components/schemas/UserBaseAdPermissions'
        userWebshop:
          description: >-
            Permissions over webshop ads of other users
          $ref: '#/components/schemas/UserBaseAdPermissions'
        interests:
          description: >-
            Are ad interests enabled? Only returned if there is an authenticated user.
          type: boolean
        questions:
          description: >-
            Are questions enabled? Only returned if there is an authenticated user.
          type: boolean
        search:
          description: >-
            Use `userSimple.view` or `userWebshop.view` instead



            Can search for simple and webshop advertisements?
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        ownAdvertisements:
          description: >-
            Use `mySimple.enable` instead



            Can own simple advertisements? Only returned if there is an authenticated user.
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        manageOwnAdvertisements:
          description: >-
            Use `mySimple.manage` instead



            Can manage own simple advertisements? Only returned if there is an authenticated user.
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        purchase:
          description: >-
            Use `userWebshop.purchase` instead



            Can buy webwop ads? Only returned if there is an authenticated user.
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        viewAdvertisements:
          description: >-
            Use `userSimple.view` instead



            Can view simple advertisements? Only returned if there is an authenticated user.
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        viewWebshop:
          description: >-
            Use `userWebshop.view` instead



            Can view webshop advertisements? Only returned if there is an authenticated user.
          deprecated: true
          x-remove-version: 4.15
          type: boolean

    MobileBaseData:
      description: >-
        Contains basic definitions for the data for UI results for the mobile
      type: object
      properties:
        cyclosVersion:
          description: >-
            The version of the Cyclos server
          type: string
        currentClientTime:
          description: >-
            The current client time according to the server
          type: string
          format: date-time
        locale:
          description: >-
            The current locale
          type: string
        allowedLocales:
          description: >-
            The locales the user can select for example to change the language.
          type: array
          items:
            $ref: '#/components/schemas/UserLocale'
        rootUrl:
          description: >-
            The main URL set in the configuration
          type: string
        theme:
          description: >-
            The mobile theme. Only returned when changed.
          allOf:
            - $ref: '#/components/schemas/ThemeUIElement'
        translations:
          description: >-
            The mobile translations. Only returned when changed.
          allOf:
            - $ref: '#/components/schemas/MobileTranslations'
        maxImageWidth:
          description: >-
            Maximum width (in pixels) for uploaded images
          type: integer
        maxImageHeight:
          description: >-
            Maximum height (in pixels) for uploaded images
          type: integer
        maxUploadSize:
          description: >-
            Maximum size (in bytes) for uploaded files
          type: integer
        jpegQuality:
          description: >-
            Quality for JPEG image types (higher means better quality)
          type: integer
        mapBrowserApiKey:
          description: >-
            The Google Maps browser API key
          type: string
        numberFormat:
          $ref: '#/components/schemas/NumberFormatEnum'
        dateFormat:
          $ref: '#/components/schemas/DateFormatEnum'
        timeFormat:
          $ref: '#/components/schemas/TimeFormatEnum'

    MobilePage:
      description: >-
        Represents a content page for the mobile application
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.
            icon:
              description: >-
                The character that represents the icon in the Cyclos font
              type: string

    MobileTranslations:
      description: >-
        Contains definitions for translations that are returned for the mobile app
      allOf:
        - $ref: '#/components/schemas/VersionedEntity'
        - type: object
          properties:
            locale:
              description: >-
                The locale represented by this language, in either of the following
                formats: `<2-letter lowercase language code>` or `<2-letter
                lowercase language code>`_`<2-letter uppercase country code>`.
              type: string
            translations:
              description: >-
                The translation keys / values for the mobile application
              type: object
              additionalProperties:
                type: string
            countries:
              description: >-
                The list of countries, with translated display names. Whenever the
                translations are returned, the country list is returned as well.
              type: array
              items:
                $ref: '#/components/schemas/Country'

    MyMarketplacePermissions:
      description: >-
        Permissions for the marketplace for the logged user
      type: object
      properties:
        enable:
          description: >-
            Are advertisements enabled? Only returned if there is an authenticated user.
          type: boolean
        manage:
          description: >-
            Can manage own advertisements? Only returned if there is an authenticated user.
          type: boolean


    NamedEntity:
      description: >-
        Basic definition of a persistent entity which has a name
      x-abstract: true
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            name:
              type: string
              description: >-
                The entity name

    NestedError:
      description: >-
        Error when an operation may generate another error for a specific property.
        An example of this is when saving the full profile, which can have an error
        in the basic fields, or in the n-th new land-line phone, or in the n-th
        removed image.
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            inputError:
              description: >-
                The nested error when `InputError`
              allOf:
                - $ref: '#/components/schemas/InputError'
            forbiddenError:
              description: >-
                The nested error when `ForbiddenError`
              allOf:
                - $ref: '#/components/schemas/ForbiddenError'
            unauthorizedError:
              description: >-
                The nested error when `UnauthorizedError`
              allOf:
                - $ref: '#/components/schemas/UnauthorizedError'
            notFoundError:
              description: >-
                The nested error when `NotFoundError`
              allOf:
                - $ref: '#/components/schemas/NotFoundError'
            conflictError:
              description: >-
                The nested error when `ConflictError`
              allOf:
                - $ref: '#/components/schemas/ConflictError'
            error:
              description: >-
                The nested error when `Error`
              allOf:
                - $ref: '#/components/schemas/Error'
            property:
              description: >-
                The property name that generated the error
              type: string
            index:
              description: >-
                If the property is indexed, contains the index with error
              type: integer

    NewMessagePush:
      description: >-
        A new message has been received
      type: object
      properties:
        message:
          $ref: '#/components/schemas/IncomingMessage'
        newMessages:
          description: >-
            The number of new messages since the last login
          type: integer
        unreadMessages:
          description: >-
            The current number of unread messages
          type: integer

    NewNotificationPush:
      description: >-
        A new notification has been received
      allOf:
        - $ref: '#/components/schemas/NotificationsStatus'
        - type: object
          properties:
            notification:
              $ref: '#/components/schemas/Notification'

    NfcAuthError:
      description: >-
        Error when make a NFC external authentication
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            posError:
              description: >-
                The POS error details. Only if `code` is
                `pos`
              allOf:
              - $ref: '#/components/schemas/PosError'
            code:
              $ref: '#/components/schemas/NfcAuthErrorCode'

    NfcDataForInitialize:
      description: >-
        Contains data NFC tag initialization and personalization
      type: object
      properties:
        initilizeTypes:
          description: >-
            The NFC token types the authenticated user can initialize tags
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        personalizeTypes:
          description: >-
            The NFC token types the authenticated user can parsonalize tags
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'

    NfcDataForPersonalize:
      description: >-
        Contains data NFC tag personalization
      type: object
      properties:
        tokenType:
          description: >-
            The token type reference
          allOf:
            - $ref: '#/components/schemas/EntityReference'
        confirmationPasswordInput:
          description: >-
            If a confirmation password is used, contains the definitions on how to
            request that password from the user. This confirmation password is required
            when performing sensible actions. Sometimes this is dynamic, for example,
            the confirmation might be configured to be used only once per session, or
            operations like payments may have a limit per day to be without confirmation
            (pinless).
          allOf:
            - $ref: '#/components/schemas/PasswordInput'

    NfcExternalAuthenticateParameter:
      description: >-
        Parameters for an external authentication
      allOf:
        - $ref: '#/components/schemas/NfcTokenParameter'
        - type: object
          properties:
            tagChallenge:
              description: >-
                The challenge generated by the NFC tag, encoded as hex
              type: string
            user:
              description: >-
                If informed then it means we are requesting for external
                authentication to personalize a tag for that user, also the `group`
                property will be ignored.
              type: string
            group:
              description: >-
                In case of registering a user and personalizing a tag at the same
                time we need to inform the group in which the user is registering.
              type: string
            asMember:
              description: >-
                Only valid if the logged user is a broker, for that case we need to
                distinguish if the user registration is as member or as broker. This
                option must be specified in conjunction with the `group` property.
              type: boolean
            key:
              description: >-
                The NFC key over which the authentication is performed. Defaults to
                `operational`.
              allOf:
                - $ref: '#/components/schemas/NfcTagKeyEnum'

    NfcExternalAuthenticateResult:
      description: >-
        Result for a NFC external authenticate
      type: object
      properties:
        cyclosChallenge:
          description: >-
            The Cyclos-generated challenge encoded as hex. This challenge has to be
            encrypted by the NFC tag
          type: string
        sessionKey:
          description: >-
            The session key to be used on subsequent NFC operations, encoded as hex
          type: string

    NfcInitializeParameter:
      description: >-
        Parameters for initializing an NFC tag
      allOf:
        - $ref: '#/components/schemas/NfcTokenWithUserParameter'
        - type: object
          properties:
            label:
              description: >-
                A label to be displayed on the tokens list.
              type: string

    NfcInitializeResult:
      description: >-
        Contains the keys that should be stored on the NFC tag
      type: object
      properties:
        tagKey:
          description: >-
            The PICC Master Key that should be used to seal the NFC tag, encoded as
            hex.
          type: string
        applicationKey:
          description: >-
            The Application Master Key that should be used on the application entry
            of the NFC tag, encoded as hex.
          type: string
        operationalKey:
          description: >-
            The Application Key used to operate with the tag, encoded as hex. Used
            when making a payment or to assign an already initialized tag to a user.
          type: string
        tokenLabel:
          description: >-
            The same label given by the client at initialization or the label
            generated according the the pattern defined.
          type: string

    NfcPersonalizeDataParameter:
      description: >-
        Parameters used to identify the NFC token type and user who will own a NFC tag.
      type: object
      properties:
        user:
          description: >-
            A user to whom this tag is being personalized
          type: string
        type:
          description: >-
            Either the identifier or internal name of fhe NFC token type
          type: string

    NfcPersonalizeParameter:
      description: >-
        Parameters for personalizing an NFC tag
      allOf:
        - $ref: '#/components/schemas/NfcTokenWithUserParameter'
        - type: object
          properties:
            cyclosChallenge:
              description: >-
                The challenge that was previously generated by Cyclos, encrypted by
                the NFC tag. Encoded as hex.
              type: string

    NfcTokenParameter:
      description: >-
        Definitions for parameters of actions over NFC tokens
      type: object
      properties:
        type:
          description: >-
            Either the identifier or internal name of fhe NFC token type
          type: string
        token:
          description: >-
            The token value. Is normally the internal tag idenfifier, encoded as hex
          type: string

    NfcTokenPermissions:
      description: >-
        Permissions over a specific nfc token
      type: object
      properties:
        type:
          description: >-
            The token type
          allOf:
            - $ref: '#/components/schemas/EntityReference'
        initialize:
          description: >-
            Can initialize tokens of this type?
          type: boolean
        personalize:
          description: >-
            Can personalize tokens of this type?
          type: boolean
        personalizeAsMember:
          description: >-
            Can personalize tokens of this type as member?
            Always `false` if the authenticated user is a not a broker.
          type: boolean

    NfcTokenWithChallengeParameter:
      description: >-
        Parameters for personalizing an NFC tag for a new user
      allOf:
        - $ref: '#/components/schemas/NfcTokenParameter'
        - type: object
          properties:
            cyclosChallenge:
              description: >-
                The challenge that was previously generated by Cyclos, encrypted by
                the NFC tag. Encoded as hex.
              type: string

    NfcTokenWithUserParameter:
      description: >-
        Contains shared properties by NfcInitializeParameter and
        NfcPersonalizeParameter
      allOf:
        - $ref: '#/components/schemas/NfcTokenParameter'
        - type: object
          properties:
            user:
              description: >-
                a user to whom this tag is being initialized/personalized.
              type: string

    NotFoundError:
      description: >-
        Error returned when some expected data was not found
      type: object
      properties:
        entityType:
          type: string
          description: >-
            The name of the entity being attempted, but not found
        key:
          type: string
          description: >-
            The identifier used to attempt to find the entity, such as id, internal
            name, principal, etc

    Notification:
      description: >-
        A received notification
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            date:
              description: >-
                The notification date
              type: string
              format: date-time
            relatedUser:
              description: >-
                a user related to this message
              allOf:
                - $ref: '#/components/schemas/User'
            subject:
              description: >-
                The notification subject
              type: string
            message:
              description: >-
                The notification message
              type: string
            read:
              description: >-
                Indicates whether the notification was marked as already read or not
              type: boolean
            entityId:
              description: >-
                The identifier of the entity referenced by the notification, if any.
                The `entityType` and `entityId` attributes are both not null or both
                null in case there is a referenced entity.
              type: string
            type:
              $ref: '#/components/schemas/NotificationTypeEnum'
            entityType:
              $ref: '#/components/schemas/NotificationEntityTypeEnum'

    NotificationKindMediums:
      description: >-
        Indicates the mediums a notification kind is sent
      type: object
      properties:
        kind:
          $ref: '#/components/schemas/NotificationKind'
        internal:
          description: >-
            Indicates whether a given kind of notification is enabled.
            Internal notifications act as a 'master control' for the
            notification kind. If disabled, no other mediums will be
            enabled either.
          type: boolean
        email:
          description: >-
            Indicates whether notifications of this type will be sent
            to the user's e-mail.
          type: boolean
        sms:
          description: >-
            Indicates whether notifications of this type will be sent
            as SMS to the user's mobile phone.
          type: boolean

    NotificationQueryFilters:
      description: >-
        Definitions for a notifications search.
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            onlyUnread:
              description: >-
                Boolean value indicating wether return only the unread notifications
              type: boolean
            onlyNew:
              description: >-
                Boolean value indicating wether return only the new notifications
                received after the last view date tracked using `POST
                /notifications/viewed`
              type: boolean

    NotificationSettingsDataForEdit:
      description: >-
        Contains configuration data to edit the notification settings a given user.
        The regular user (member / broker / operator) and administrator
        notification settings use different notification kinds.
      allOf:
        - $ref: '#/components/schemas/BaseNotificationSettings'
        - type: object
          properties:
            settings:
              description: >-
                The object that can be modified and `POST`ed back to
                `/{user}/notification-settings` to save the notifications.
              allOf:
                - $ref: '#/components/schemas/NotificationSettingsEdit'

            payments:
              description: >-
                The visible regular payment types.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/TransferType'
            authorizablePayments:
              description: >-
                The visible regular payment types that require authorization.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/TransferType'
            externalPayments:
              description: >-
                The visible payment types that allow external payments.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/TransferType'
            voucherConfigurations:
              description: >-
                The visible voucher configurations.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            userAccounts:
              type: array
              items:
                $ref: '#/components/schemas/AccountType'
              description: >-
                The available accounts types for user payment notifications
            userGroups:
              description: >-
                The visible user groups.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/Group'
            messageCategories:
              description: >-
                The visible message categories.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'

    NotificationSettingsEdit:
      description: >-
        The parameters used to save the notification settings
      type: object
      properties:
        notifications:
          description: >-
            Per notification kind, indicates the mediums it is sent.
            It is guaranteed that all and only the allowed kinds are sent.
          type: array
          items:
            $ref: '#/components/schemas/NotificationKindMediums'

        forwardMessages:
          description: >-
            Indicates whether to forward received internal messages to the
            user's e-mail.
            Only applicable for users, not administrators.
          type: boolean
        userAccounts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AccountNotificationSettings'
          description: >-
            Contains the settings for each user account.
            Only applicable for users, not administrators.
            The key is the account type id or internal name.

        payments:
          description: >-
            The qualified internal names (accountType.paymentType) or ids of
            payment types to be notified for notifications of kind
            `adminPaymentPerformed`.
            Only applicable for administrators, not users.
          type: array
          items:
            type: string
        authorizablePayments:
          description: >-
            The qualified internal names (accountType.paymentType) or ids of
            payment types to be notified for notifications of kind
            `adminPaymentAwaitingAuthorization`.
            Only applicable for administrators, not users.
          type: array
          items:
            type: string
        externalPaymentsFailed:
          description: >-
            The qualified internal names (accountType.paymentType) or ids of
            payment types to be notified for notifications of kind
            `adminExternalPaymentPerformedFailed`.
            Only applicable for administrators, not users.
          type: array
          items:
            type: string
        externalPaymentsExpired:
          description: >-
            The qualified internal names (accountType.paymentType) or ids of
            payment types to be notified for notifications of kind
            `adminExternalPaymentExpired`.
            Only applicable for administrators, not users.
          type: array
          items:
            type: string
        voucherConfigurations:
          description: >-
            The internal names or ids of voucher configurations to be
            notified for notifications of kinds
            `adminGeneratedVouchersAboutToExpire` and
            `adminGeneratedVouchersExpired`.
            Only applicable for administrators, not users.
          type: array
          items:
            type: string
        voucherConfigurationsBuying:
          description: >-
            The internal names or ids of voucher configurations to be
            notified for notifications of kind
            `adminVoucherBuyingAboutToExpire`.
            Only applicable for administrators, not users.
          type: array
          items:
            type: string
        userGroups:
          description: >-
            The internal names or ids of groups to be notified for
            notifications of kind
            `adminUserRegistration`.
            Only applicable for administrators, not users.
          type: array
          items:
            type: string
        systemAlerts:
          description: >-
            The kinds of system alerts to be notified for notifications of kind
            `adminSystemAlert`.
            Only applicable for administrators, not users.
          type: array
          items:
            $ref: '#/components/schemas/SystemAlertTypeEnum'
        userAlerts:
          description: >-
            The kinds of user alerts to be notified for notifications of kind
            `adminUserAlert`.
            Only applicable for administrators, not users.
          type: array
          items:
            $ref: '#/components/schemas/UserAlertTypeEnum'
        forwardMessageCategories:
          description: >-
            The internal names or ids of message categories to which new messages
            to system will be forwarded to the administrator e-mail.
            Not tied to any notification kind.
            Only applicable for administrators, not users.
          type: array
          items:
            type: string
        version:
          type: integer
          description: >-
            The version stamp for the current object, used for optimistic locking. When
            saving, the same version as previously received needs to be passed back. If
            no one else has saved the object, the version will match and the object will
            be updated. However, if someone other has saved the object, the version will
            no longer match, and an error will be raised. This is used to prevent
            multiple users (or processes) from updating the same object and unwilingly
            overridding the property values, leading to data loss.


    NotificationSettingsPermissions:
      description: >-
        Permissions over notification settings
      type: object
      properties:
        enable:
          description: >-
            Whether the own notification settings are enabled or not.
          type: boolean

    NotificationSettingsView:
      description: >-
        Contains the current notification settings for a given user.
        The regular user (member / broker) and administrator notification
        settings use different notification kinds.
      allOf:
        - $ref: '#/components/schemas/BaseNotificationSettings'
        - type: object
          properties:
            notifications:
              description: >-
                Per notification kind, indicates the mediums it is sent.
                It is guaranteed that all and only the allowed kinds are sent.
              type: array
              items:
                $ref: '#/components/schemas/NotificationKindMediums'

            userAccounts:
              description: >-
                Contains the settings for each user account.
                Only applicable for users (members / brokers), not administrators.
              type: array
              items:
                $ref: '#/components/schemas/AccountNotificationSettingsView'

            payments:
              description: >-
                The payment types to be notified for notifications of kind
                `adminPaymentPerformed`.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/TransferType'
            authorizablePayments:
              description: >-
                The payment types to be notified for notifications of kind
                `adminPaymentAwaitingAuthorization`.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/TransferType'
            externalPaymentsFailed:
              description: >-
                The payment types to be notified for notifications of kind
                `adminExternalPaymentPerformedFailed`.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/TransferType'
            externalPaymentsExpired:
              description: >-
                The payment types to be notified for notifications of kind
                `adminExternalPaymentExpired`.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/TransferType'
            voucherConfigurations:
              description: >-
                The voucher configurations to be notified for notifications of
                kinds `adminGeneratedVouchersAboutToExpire`
                and `adminGeneratedVouchersExpired`.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            voucherConfigurationsBuying:
              description: >-
                The voucher configurations to be notified for notifications of kind
                `adminVoucherBuyingAboutToExpire`.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            userGroups:
              description: >-
                The groups to be notified for notifications of kind
                `adminUserRegistration`.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/Group'
            systemAlerts:
              description: >-
                The kinds of system alerts to be notified for notifications of kind
                `adminSystemAlert`.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/SystemAlertTypeEnum'
            userAlerts:
              description: >-
                The kinds of user alerts to be notified for notifications of kind
                `adminUserAlert`.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/UserAlertTypeEnum'
            forwardMessageCategories:
              description: >-
                The message categories to which new messages to system will be
                forwarded to the administrator e-mail.
                Not tied to any notification kind.
                Only applicable for administrators, not users (members / brokers).
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'


    NotificationsPermissions:
      description: >-
        Permissions over notifications
      type: object
      properties:
        enable:
          description: >-
            Whether the own notifications are enabled or not.
          type: boolean

    NotificationsStatus:
      description: >-
        Contains details about the notifications
      type: object
      properties:
        newNotifications:
          description: >-
            Indicates the number of received notifications after the last view date
            (i.e `lastViewDate`).
          type: integer
        unreadNotifications:
          description: >-
            Indicates the total number of unread notifications.
          type: integer
        lastViewDate:
          description: >-
            The last view date tracked by the server through `POST
            /notifications/viewed`
          type: string
          format: date-time

    Operation:
      description: >-
        Contains definitions used to run a custom operation
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            icon:
              description: >-
                The character that represents the icon in the Cyclos font
              type: string
            label:
              description: >-
                A representative label about the operation
              type: string
            informationText:
              description: >-
                A message to be displayed to the user when displaying the parameters
                form. Only returned in contexts where the operation can be executed.
              type: string
            confirmationText:
              description: >-
                A message to be shown to the user in order to confirm the operation
                execution. Only returned in contexts where the operation can be executed.
              type: string
            requireConfirmationPassword:
              description: >-
                Indicates whether this operation requires confirmation password.
                Only returned in contexts where the operation can be executed.
              type: boolean
            hasFileUpload:
              description: >-
                Indicates whether this operation accepts a file upload as input.
                Only returned in contexts where the operation can be executed.
              type: boolean
            allowExport:
              description: >-
                Does this operation allows exporting the result page as file?
                Only returned if `resultType` is
                `resultPage`.
                Only returned in contexts where the operation can be executed.
              type: boolean
            allowPrint:
              description: >-
                Should the front-end show a print action for the custom operation
                result? Before Cyclos 4.13 this was used for `resultType`
                `resultPage`, but since 4.13
                is only used for `plainText`
                or `richText`.
                Only returned in contexts where the operation can be executed.
              type: boolean
            missingOptionalParameters:
              description: >-
                The optional custom fields without a value. The front-end could
                opt-in to rely on the `showFormForMissingOptionalParameters` flag to
                determine whether to show or not an input form if there's a missing
                poptional form field.
                Only returned in contexts where the operation can be executed.
              type: array
              items:
                type: string
            missingRequiredParameters:
              description: >-
                The required custom fields without a value. This means the operation
                will fail with a validation error if the parameters present in this
                list are not given when run it.
                Only returned in contexts where the operation can be executed.
              type: array
              items:
                type: string
            showFormForMissingOptionalParameters:
              description: >-
                Indicates whether a form to enter the missing optional parameters
                must be shown. Only returned if the `missingOptionalParameters` list
                is not empty and `scope` is  `internal`.
                Only returned in contexts where the operation can be executed.
              type: boolean
            scope:
              $ref: '#/components/schemas/OperationScopeEnum'
            resultType:
              description: >-
                The type of data returned after the operation is executed.
                Only returned in contexts where the operation can be executed.
              allOf:
                - $ref: '#/components/schemas/OperationResultTypeEnum'
            adminMenu:
              description: >-
                In which administration menu the operation shows up.
                Only returned in contexts where the operation can be executed.
              allOf:
                - $ref: '#/components/schemas/AdminMenuEnum'
            userMenu:
              description: >-
                In which user menu the operation shows up.
                Only returned in contexts where the operation can be executed.
              allOf:
                - $ref: '#/components/schemas/UserMenuEnum'


    OperationDataForRun:
      description: >-
        Contains definitions used to run a custom operation
      allOf:
        - $ref: '#/components/schemas/Operation'
        - type: object
          properties:
            resultInformationText:
              description: >-
                A message to be displayed to the user when displaying the page
                results. Only returned if `resultType` is
                `resultPage`.
              type: string
            customSubmitLabel:
              description: >-
                A label to be shown on the submit button. When not returned, a
                generic 'Submit' should be displayed.
              type: string
            formParameters:
              description: >-
                The custom fields which are used in a form as parameters for the
                operation execution.
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldDetailed'
            confirmationPasswordInput:
              description: >-
                If a confirmation password is used, contains the definitions on how to
                request that password from the user. This confirmation password is required
                when performing sensible actions. Sometimes this is dynamic, for example,
                the confirmation might be configured to be used only once per session, or
                operations like payments may have a limit per day to be without confirmation
                (pinless).
              allOf:
                - $ref: '#/components/schemas/PasswordInput'
            exportFormats:
              description: >-
                The formats which a custom operation result of type
                `resultPage` can be exported.
              type: array
              items:
                $ref: '#/components/schemas/ExportFormat'
            searchAutomatically:
              description: >-
                Should the operation be immediately executed by the third party
                client software when first presenting the form to the user  (when
                `true`) or only when the user clicks submit (when `false`)? Only
                returned if `resultType` is
                `resultPage`.
              type: boolean
            rowLocation:
              description: >-
                The location to which the client should be redirected when selecting
                a row in the results table. Only returned if `resultType` is
                `resultPage` and `rowAction` is
                `location`.
              type: string
            rowOperation:
              description: >-
                The custom operation that should be executed when clicking a row.
                Only returned if `resultType` is
                `resultPage` and `rowAction` is
                `operation`.
              allOf:
                - $ref: '#/components/schemas/Operation'
            rowUrl:
              description: >-
                The URL the client should be redirected when clicking a row. Only
                returned if `resultType` is
                `resultPage` and `rowAction` is
                `url`.
              type: string
            rowParameters:
              description: >-
                The names of parameters belonging to each custom operation result
                that should be passed as parameter to the custom operation or URL
                which is executed when selecting a row in the table. Only returned
                if `resultType` is `resultPage`.
              type: array
              items:
                type: string
            rowAction:
              $ref: '#/components/schemas/OperationRowActionEnum'
            user:
              description: >-
                The user for whom this custom operation will be executed. Returned
                if `scope` is either `user`,
                `advertisement`,
                `contact` (the contact owner),
                `contactInfo` or
                `record` (for user records).
              allOf:
                - $ref: '#/components/schemas/User'
            ad:
              description: >-
                 The advertisement for which this custom operation will be executed. Only returned if `scope` is  `advertisement`
              allOf:
                - $ref: '#/components/schemas/Ad'
            contact:
              description: >-
                The contact for whom this custom operation will be executed. Only returned if `scope` is  `contact`
              allOf:
                - $ref: '#/components/schemas/Contact'
            contactInfo:
              description: >-
                The additional contact for which this custom operation will be executed. Only returned if `scope` is  `contactInfo`
              allOf:
                - $ref: '#/components/schemas/ContactInfo'
            record:
              description: >-
                The record for which this custom operation will be executed. Only returned if `scope` is  `record`
              allOf:
                - $ref: '#/components/schemas/Record'
            recordType:
              description: >-
                The record type of the record for which this custom operation will be executed. Only returned if `scope` is  `record`
              allOf:
                - $ref: '#/components/schemas/RecordType'
            transfer:
              description: >-
                The transfer for which this custom operation will be executed. Only returned if `scope` is  `transfer`
              allOf:
                - $ref: '#/components/schemas/Transfer'


    OperationPermissions:
      description: >-
        Permissions over a specific custom operation
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
        run:
          description: >-
            Can run this operation?
          type: boolean

    OperationsPermissions:
      description: >-
        Permissions over own or system operations
      type: object
      properties:
        user:
          description: >-
            Permissions over custom operations applied to the authenticated user,
            with `scope` = `user`.
          type: array
          items:
            $ref: '#/components/schemas/OperationPermissions'
        system:
          description: >-
            Custom operations the authenticated has access, with `scope` =
            `system`. Only returned for administrators.
          type: array
          items:
            $ref: '#/components/schemas/OperationPermissions'

    OperatorDataForNew:
      description: >-
        Contains data used to register an operator
      allOf:
        - $ref: '#/components/schemas/BasicUserDataForNew'
        - type: object
          properties:
            user:
              description: >-
                Details of user that will be the owner of the new operator
              allOf:
                - $ref: '#/components/schemas/User'
            groups:
              description: >-
                The available operator groups for the given owner.
                When a group was passed on the request, will contain only that
                group. If no group was passed, will return all available groups.
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            operator:
              description: >-
                The object that can be altered and posted back to register the operator
              allOf:
                - $ref: '#/components/schemas/OperatorNew'

    OperatorGroupAccount:
      description: >-
        Settings for an account access for an operator group
      type: object
      properties:
        access:
          $ref: '#/components/schemas/OperatorGroupAccountAccessEnum'
        notificationAmount:
          description: >-
            The minimum / maximum amount for payment notifications to be sent
          allOf:
            - $ref: '#/components/schemas/DecimalRange'

    OperatorGroupAccountView:
      description: >-
        Settings for an account access for an operator group
      allOf:
      - $ref: '#/components/schemas/OperatorGroupAccount'
      - type: object
        properties:
          accountType:
            $ref: '#/components/schemas/AccountType'

    OperatorGroupBasicData:
      description: >-
        Contains data shared by both OperatorGroupDataForNew
        and OperatorGroupDataForEdit
      type: object
      properties:
        user:
          description:
            Details of the user that is the owner of the operator group
          allOf:
          - $ref: '#/components/schemas/User'
        canChargebackPayments:
          type: boolean
          description: >-
            Can the permission to chargeback payments be granted?
        canReceivePayments:
          type: boolean
          description: >-
            Can the permission to receive payments be granted?
        canRequestPayments:
          type: boolean
          description: >-
            Can the permission to request payments be granted?
        canRedeemVouchers:
          type: boolean
          description: >-
            Can the permission to redeem vouchers be granted?
        canViewAdvertisements:
          type: boolean
          description: >-
            Can the permission to view advertisements be granted?
        canManageAdvertisements:
          type: boolean
          description: >-
            Can the permission to manage advertisements be granted?
        canBlockToken:
          type: boolean
          description: >-
            Can the permission to block tokens (cards) be granted?
        canCancelToken:
          type: boolean
          description: >-
            Can the permission to cancel tokens (cards) be granted?
        canEnableToken:
          type: boolean
          description: >-
            Can the permission to enable tokens (cards) be granted?
        canUnblockToken:
          type: boolean
          description: >-
            Can the permission to unblock tokens (cards) be granted?
        broker:
          type: boolean
          description: >-
            Indicates whether the owner user is a broker. If so, can
            delegate brokering operations to operators.
        canHaveMessages:
          type: boolean
          description: >-
            Can the permission over messages be granted?
        canHaveNotifications:
          type: boolean
          description: >-
            Can the permission over notificationsto be granted?
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
          description: >-
            Custom operations that can be granted
        recordTypes:
          type: array
          items:
            $ref: '#/components/schemas/RecordType'
          description: >-
            Record types that can be granted
        accountTypes:
          type: array
          items:
            $ref: '#/components/schemas/AccountType'
          description: >-
            Account types details for the account settings
        paymentTypes:
          type: array
          items:
            $ref: '#/components/schemas/TransferTypeWithCurrency'
          description: >-
            Payment types details for the payment settings


    OperatorGroupDataForEdit:
      description: >-
        Contains data for editing an existing operator group
      allOf:
        - $ref: '#/components/schemas/OperatorGroupBasicData'
        - type: object
          properties:
            restrictPaymentsToUsers:
              type: array
              items:
                $ref: '#/components/schemas/User'
              description: >-
                Details of the currently set users in the `restrictPaymentsToUsers`
                property in `operatorGroup` (which have only the ids).
            operatorGroup:
              description: >-
                The operator group that is being edited. This value can be modified
                and sent back on `PUT /operator-groups/{id}`.
              allOf:
                - $ref: '#/components/schemas/OperatorGroupEdit'
            edit:
              type: boolean
              description: >-
                Can the authenticated user edit this operator group?
            remove:
              type: boolean
              description: >-
                Can the authenticated user remove this operator group?

    OperatorGroupDataForNew:
      description: >-
        Contains data for creating a new operator group
      allOf:
        - $ref: '#/components/schemas/OperatorGroupBasicData'
        - type: object
          properties:
            operatorGroup:
              description: >-
                The operator group populated with the default fields. This value
                can be modified and sent back on `POST /{user}/operator-groups`.
              allOf:
                - $ref: '#/components/schemas/OperatorGroupNew'

    OperatorGroupEdit:
      description: >-
        Fields for editing an operator group.
      allOf:
        - $ref: '#/components/schemas/OperatorGroupManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    OperatorGroupManage:
      description: >-
        Common fields for either creating or editing an operator group
      type: object
      x-abstract: true
      properties:
        name:
          type: string
          description: >-
            The operator group name
        description:
          type: string
          description: >-
            Optional description of the group

        editOwnProfile:
          type: boolean
          description: >-
            Can operators of this group edit their own profile?
        chargebackPayments:
          type: boolean
          description: >-
            Can operators of this group chargeback payments received by the owner?
        messages:
          type: boolean
          description: >-
            Can operators of this group access the message box of the owner?
        notifications:
          type: boolean
          description: >-
            Can operators of this group own notifications?
        receivePayments:
          type: boolean
          description: >-
            Can operators of this group receive payments?
        redeemVouchers:
          type: boolean
          description: >-
            Can operators of this group redeem vouchers?
        requestPayments:
          type: boolean
          description: >-
            Can operators of this group request payments?
        viewAdvertisements:
          type: boolean
          description: >-
            Can operators of this group view advertisements?
        manageAdvertisements:
          type: boolean
          description: >-
            Can operators of this group manage advertisements of the owner?
        enableToken:
          type: boolean
          description: >-
            Can operators of this group have tokens (cards)?
        cancelToken:
          type: boolean
          description: >-
            Can operators of this group cancel their own tokens (cards)?
        blockToken:
          type: boolean
          description: >-
            Can operators of this group block their own tokens (cards)?
        unblockToken:
          type: boolean
          description: >-
            Can operators of this group unblock their own tokens (cards)?

        brokering:
          type: boolean
          description: >-
            Can operators of this group perform brokering operations?
            This includes full brokering operatations the user is allowed,
            including user registration, accounts access, payments as user, etc.

        restrictPaymentsToUsers:
          type: array
          items:
            type: string
          description: >-
            When set, operators of this group will only be able to perform
            payments to one of this users
        operations:
          type: array
          items:
            type: string
          description: >-
            Ids / internal names of custom operators that operators of this group
            will only be able to run
        records:
          type: array
          items:
            type: string
          description: >-
            Ids / internal names of record types that operators of this group will
            only be able to access

        accounts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OperatorGroupAccount'
          description: >-
            Defines how operators access the owner accounts, and defines
            restrictions on payment notifications. The key is the account type
            id or internal name.

        payments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OperatorGroupPayment'
          description: >-
            Defines which payment types can be used by operators to perform
            payments or authorize payments performed by other operators.
            Also defines the maximum daily amount that can be paid per operator.


    OperatorGroupNew:
      description: >-
        Fields for a new operator group.
      allOf:
        - $ref: '#/components/schemas/OperatorGroupManage'

    OperatorGroupPayment:
      description: >-
        Settings for payments for an operator group.
      type: object
      properties:
        authorize:
          type: boolean
          description: >-
            Can operators of this group authorize payments of this type which
            were performed by other operators?
        perform:
          type: boolean
          description: >-
            Can operators of this group perform payments of this type?
        requiresAuthorization:
          type: boolean
          description: >-
            Do performed payments of this type by operators require authorization
            by the owner or other operators?
        maxAmountPerDay:
          type: string
          format: number
          description: >-
            Maximum amount of payments that operators of this group can perform
            per day.

    OperatorGroupPaymentView:
      description: >-
        Settings for payments for an operator group.
      allOf:
      - $ref: '#/components/schemas/OperatorGroupPayment'
      - type: object
        properties:
          paymentType:
            $ref: '#/components/schemas/TransferTypeWithCurrency'

    OperatorGroupView:
      description: >-
        Detailed information when viewing an operator group
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            user:
              description: >-
                The user which owns this operator group
              allOf:
                - $ref: '#/components/schemas/User'
            editable:
              description: >-
                Can the authenticated user edit / remove this operator group?
              type: boolean
            description:
              type: string
              description: >-
                Optional description of the group

            editOwnProfile:
              type: boolean
              description: >-
                Can operators of this group edit their own profile?
            chargebackPayments:
              type: boolean
              description: >-
                Can operators of this group chargeback payments received by the owner?
            messages:
              type: boolean
              description: >-
                Can operators of this group access the message box of the owner?
            notifications:
              type: boolean
              description: >-
                Can operators of this group own notifications?
            receivePayments:
              type: boolean
              description: >-
                Can operators of this group receive payments?
            redeemVouchers:
              type: boolean
              description: >-
                Can operators of this group redeem vouchers?
            requestPayments:
              type: boolean
              description: >-
                Can operators of this group request payments?
            viewAdvertisements:
              type: boolean
              description: >-
                Can operators of this group view advertisements?
            manageAdvertisements:
              type: boolean
              description: >-
                Can operators of this group manage advertisements of the owner?
            enableToken:
              type: boolean
              description: >-
                Can operators of this group have tokens (cards)?
            cancelToken:
              type: boolean
              description: >-
                Can operators of this group cancel their own tokens (cards)?
            blockToken:
              type: boolean
              description: >-
                Can operators of this group block their own tokens (cards)?
            unblockToken:
              type: boolean
              description: >-
                Can operators of this group unblock their own tokens (cards)?

            brokering:
              type: boolean
              description: >-
                Can operators of this group perform brokering operations?

            restrictPaymentsToUsers:
              type: array
              items:
                $ref: '#/components/schemas/User'
              description: >-
                When set, operators of this group will only be able to perform
                payments to one of this users
            operations:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
              description: >-
                Custom operators that operators of this group will only be able to run
            records:
              type: array
              items:
                $ref: '#/components/schemas/RecordType'
              description: >-
                Record types that operators of this group will only be able to access

            accounts:
              type: array
              items:
                $ref: '#/components/schemas/OperatorGroupAccountView'
              description: >-
                Settings for the access operators will have over owner accounts.

            payments:
              type: array
              items:
                $ref: '#/components/schemas/OperatorGroupPaymentView'
              description: >-
                Settings for payments that can be performed by operators.

    OperatorNew:
      description: >-
        Contains data used to register an operator. All basic profile fields (full
        name, login name, e-mail, phones and addresses) can be enabled or disabled
        on Cyclos, via products.
      x-implements: IBasicUserNew
      allOf:
        - $ref: '#/components/schemas/BasicUserManage'
        - type: object
          properties:
            group:
              type: string
              description: >-
                The operator group. When not specified the operator will be an
                'alias', that means, will have all permissions of his owner.
            mobilePhones:
              type: array
              items:
                $ref: '#/components/schemas/PhoneNew'
              description: >-
                Mobile phones to be registered together with the user
            landLinePhones:
              type: array
              items:
                $ref: '#/components/schemas/PhoneNew'
              description: >-
                Land-line phones to be registered together with the user
            passwords:
              type: array
              items:
                $ref: '#/components/schemas/PasswordRegistration'
              description: >-
                The initial passwords of the user
            skipActivationEmail:
              type: boolean
              description: >-
                When set to true, the activation e-mail is not sent to the
                registered user. Can only be used when an administrator / broker is
                registering a user, and ignored on public registrations (the e-mail
                is always sent on public registrations).

    OperatorResult:
      description: >-
        Result of a operator search.
      allOf:
        - $ref: '#/components/schemas/UserResult'
        - type: object
          properties:
            group:
              $ref: '#/components/schemas/EntityReference'

    OperatorsPermissions:
      description: >-
        Permissions over own operators
      type: object
      properties:
        enable:
          description: >-
            Whether operators are enabled
          type: boolean
        manageOperators:
          description: >-
            Whether I can manage my own operators
          type: boolean
        manageGroups:
          description: >-
            Whether I can manage my own operator groups
          type: boolean

    OrderDataForAcceptByBuyer:
      description: >-
        Data used to accept an order by the buyer.
      type: object
      properties:
        paymentTypes:
          description: >-
            Contains the allowed payment types.
          type: array
          items:
            $ref: '#/components/schemas/TransferType'
        confirmationPasswordInput:
          description: >-
            If a confirmation password is used, contains the definitions on how to
            request that password from the user. This confirmation password is required
            when performing sensible actions. Sometimes this is dynamic, for example,
            the confirmation might be configured to be used only once per session, or
            operations like payments may have a limit per day to be without confirmation
            (pinless).
          allOf:
            - $ref: '#/components/schemas/PasswordInput'

    OrderDataForSetDeliveryMethod:
      description: >-
        Data used to to set a delivery method.
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        deliveryMethods:
          description: >-
            List with all delivery methods shared by all products contained in the
            order.
          type: array
          items:
            $ref: '#/components/schemas/DeliveryMethod'

    OrderItem:
      description: >-
        Data for an order item.
      allOf:
        - $ref: '#/components/schemas/BaseOrderItem'
        - type: object
          properties:
            price:
              description: >-
                The charged price of the product.
              type: string
              format: number
            totalPrice:
              description: >-
                The total price for this item, i.e the charged price of the
                product  multiplied by its corresponding quantity.
              type: string
              format: number

    OrderQueryFilters:
      description: >-
        Search filters for orders.
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            relatedUser:
              type: string
              description: >-
                Either id or an identification, such as login name, e-mail, etc, for
                the seller or buyer according whether we are searching for purchases
                or sales. The allowed identification methods are those the
                authenticated user can use on keywords search.
            number:
              type: string
              description: >-
                The generated order number according to the webshop settings.
            creationPeriod:
              description: >-
                The minimum / maximum order creation date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            sales:
              type: boolean
              description: >-
                Are we searching for sales or purchases? If not specified it's
                assumed purchases (i.e `false`)
            statuses:
              type: array
              items:
                $ref: '#/components/schemas/OrderStatusEnum'
            productNumber:
              type: string
              description: >-
                The product number (with the mask if there is one) of an advertisement
                contained in the orders.

    OrderResult:
      description: >-
        Data of an order as returned on list.
      allOf:
        - $ref: '#/components/schemas/BaseOrder'
        - type: object
          properties:
            creationDate:
              type: string
              format: date-time
              description: >-
                The creation date corresponding to the date when the first item
                of  this order was added to the shopping cart.
            currency:
              description: >-
                The currency of the order.
              allOf:
                - $ref: '#/components/schemas/Currency'
            number:
              type: string
              description: >-
                The generated order number according to the webshop settings.
            totalPrice:
              type: string
              format: number
              description: >-
                The total price of the order, i.e the sum of the total price of
                all  of its `items` and the delivery method (if any).
            image:
              description: >-
                This represents the first image of the first item in the order (if
                any).
              allOf:
                - $ref: '#/components/schemas/Image'
            status:
              $ref: '#/components/schemas/OrderStatusEnum'

    OrderView:
      description: >-
        Detailed information when viewing an order
      allOf:
        - $ref: '#/components/schemas/OrderResult'
        - type: object
          properties:
            buyer:
              description: >-
                The buyer of the order.
              allOf:
                - $ref: '#/components/schemas/User'
            seller:
              description: >-
                The seller of the order.
              allOf:
                - $ref: '#/components/schemas/User'
            deliveryAddress:
              $ref: '#/components/schemas/Address'
            deliveryMethodName:
              type: string
              description: >-
                The delivery method name.
            deliveryPrice:
              type: string
              format: number
              description: >-
                The delivery method price.
            deliveryTime:
              x-remove-version: 4.15
              deprecated: true
              description: >-
                Use `minDeliveryTime` and `maxDeliveryTime` instead.


              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            minDeliveryTime:
              description: >-
                The minimum time interval expected for the products to be delivered.
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            maxDeliveryTime:
              description: >-
                The maximum time interval expected for the products to be delivered.
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            paymentType:
              $ref: '#/components/schemas/TransferType'
            items:
              description: >-
                The order items
              type: array
              items:
                $ref: '#/components/schemas/OrderItem'
            remarks:
              type: string
              description: >-
                The current order remarks (i.e those for check-out, accept or
                reject).
            sale:
              type: boolean
              description: >-
                Is it a sale (initiated by the seller)?

    OtpError:
      description: >-
        Error when requesting a new One-time-Password (OTP) or a verification code
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              $ref: '#/components/schemas/OtpErrorCode'
            smsStatus:
              description: >-
                Only if code is `errorSendingSms`
              allOf:
                - $ref: '#/components/schemas/OutboundSmsStatusEnum'

    OwnerRecordPermissions:
      description: >-
        Permissions over a user record for a given owner
      allOf:
        - $ref: '#/components/schemas/RecordPermissions'
        - type: object
          properties:
            count:
              description: >-
                The current number of records of this type for this owner
              type: integer

    PasswordActions:
      description: >-
        Indicates the possible actions the authenticated user can perform over this
        password
      type: object
      properties:
        change:
          description: >-
            Manually change the password.
          type: boolean
        changeGenerated:
          description: >-
            Manually generate another value for a generated password. Can only
            be  done for the authenticated user himself.
          type: boolean
        generate:
          description: >-
            Generate the password value for the first time. Can only be done for the
            authenticated user himself.
          type: boolean
        allowGeneration:
          description: >-
            Granted only for those generated passwords that have a setting
            to  require administration authorization and have the
            status  `neverCreated`. Can only be done by
            administrators with permissions to enable/disable  the password.
          type: boolean
        disable:
          description: >-
            Disables a password, making it unusable until being enabled again.
          type: boolean
        enable:
          description: >-
            Enables a disabled password, either manually disabled or by exceeding
            the wrong tries, depending on the password type configuration.
          type: boolean
        resetGenerated:
          description: >-
            Resets a generated password, making it go back to
            the  `pending` state. The user will then be
            able to generate a new value for it.
          type: boolean
        resetAndSend:
          description: >-
            Resets a manual password to a generated value and send it to the user.
            Can also be used to reset and send the main channel's access password if
            it is generated. The new password is initially expired, so the user
            needs to change it on first login.
          type: boolean
        unblock:
          description: >-
            Unblocks a password which has been blocked by exceeding the wrong tries
          type: boolean

    PasswordInput:
      description: >-
        Contains all information for a password entry. Passwords in Cyclos may be
        entered as regular texts or as virtual keyboards. For
        `virtualKeyboard`, a number of information is
        sent, such as an unique id, the number of buttons to be displayed, the
        number of rows that should visually hold those buttons, the sequences of
        characters that should be displayed on each button. When sending the value
        of a password of type virtual keyboard, unique id should be sent, together
        with the entire sequence for each button, all separated by pipes. So,
        suppose a very simple (and weakly configured) example where the id is
        `987654321` and the sequences are: `[["abc", "def", "fgh"], ["ijk",
        "lmn", "opq"]]`. This describes 2 sequences of 3 buttons each. First, the
        buttons with the options `abc`, `def` and `fgh` should be shown. Suppose the
        user chooses the second one. Then the button labels should be changed to
        `ijk`, `lmn` and `opq`. Now the user picks the first one. The value sent to
        the server should be `987654321|def|ijk`.
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            hasActivePassword:
              description: >-
                Only returned when there is an authenticated user (not for login).
                Describes whether the user has created a password of this type. If
                not, a proper message can be shown to the user indicating that this
                password needs to be created.
              type: boolean
            hasActiveDevice:
              description: >-
                Only returned when there is an authenticated user (not for login).
                Describes whether the user has at least one trusted device. If not,
                and the device confirmation is required a proper message can be
                shown to the user indicating that the user must activate a device as
                trusted.
              type: boolean
            confirmationPasswordOncePerSession:
              description: >-
                Only returned when there is an authenticated user (not for login).
                Determines whether this password, when used as confirmation, should
                be requested only once until the user logs out.
              type: boolean
            minLength:
              description: >-
                For text passwords, the minimum password length
              type: integer
            maxLength:
              description: >-
                For text passwords, the maximum password length
              type: integer
            numberOfButtons:
              description: >-
                Only for `virtualKeyboard`, is the
                number of buttons to be displayed
              type: integer
            buttonsPerRow:
              description: >-
                Only for `virtualKeyboard`, is the
                number of buttons that should be displayed on each row
              type: integer
            buttons:
              description: >-
                Only for `virtualKeyboard`, contains
                the sequences of buttons that should be displayed for the user. The
                explanation for the value that should be sent on virtual keyboard
                mode is shown above, in the description of this type.
              type: array
              items:
                type: array
                items:
                  type: string
            inputMethod:
              description: >-
                The explanation for the value that should be sent for
                `virtualKeyboard` cases is given
                above, in the description of this type.
              allOf:
                - $ref: '#/components/schemas/PasswordInputMethodEnum'
            mode:
              $ref: '#/components/schemas/PasswordModeEnum'
            deviceAvailability:
              description: >-
                Whether the confirmation with a trusted device is not used, optional
                or required.
              allOf:
                - $ref: '#/components/schemas/AvailabilityEnum'
            pinAvailability:
              description: >-
                Whether the confirmation with a device PIN is not used, optional
                or required.
              allOf:
                - $ref: '#/components/schemas/AvailabilityEnum'
            pinInput:
              description: >-
                The device PIN min length. Only if `pinAvailability` is not `disabled`
              allOf:
                - $ref: '#/components/schemas/PinInput'
            otpSendMediums:
              description: >-
                Only for `otp`, the available mediums for the
                password to be sent
              type: array
              items:
                $ref: '#/components/schemas/SendMediumEnum'

    PasswordPermissions:
      description: >-
        Permissions a single password
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PasswordType'
        change:
          description: >-
            Can change this password?
          type: boolean
        enable:
          description: >-
            Can enable / disable this password?
          type: boolean
        reset:
          description: >-
            Can reset this password?
          type: boolean
        unblock:
          description: >-
            Can unblock this password if blocked by exceeding tries?
          type: boolean

    PasswordRegistration:
      description: >-
        Data regarding a password being registered with the user
      type: object
      properties:
        type:
          type: string
          description: >-
            The password type
        value:
          type: string
          description: >-
            The password value
        checkConfirmation:
          type: boolean
          description: >-
            Depending on the client, if a confirm password field is shown to users,
            it might be useful to check the confirmation password value on the
            server. This way, if there are other validation exceptions, they are all
            shown together. In this case, this field should be set to `true` and the
            `confirmationValue` should be passed in with the user input. However, in
            cases where clients just want to register a user with a password non
            interactively (like in a bulk registration), passing the password value
            twice is not desirable. In such cases, this field can be left empty (or
            set to `false`), and the `confirmationValue` will be ignored.
        confirmationValue:
          type: string
          description: >-
            The password confirmation value. Is ignored unless `checkConfirmation`
            is set to `true`.
        forceChange:
          type: boolean
          description: >-
            When set to true will force the user to change it after the first login

    PasswordStatus:
      description: >-
        Contains the status of a password
      type: object
      properties:
        date:
          description: >-
            The date this status took place
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/PasswordStatusEnum'

    PasswordStatusAndActions:
      description: >-
        Contains the status and possible actions over a password
      allOf:
        - $ref: '#/components/schemas/PasswordStatus'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/PasswordTypeWithDescription'
            requireOldPasswordForChange:
              description: >-
                Indicates whether the `change` action, if enabled, requires the old
                password to be sent. This is the case when changing the password of
                the logged user, and the current password was ever set and is not
                currently expired / reset.
              type: boolean
            permissions:
              description: >-
                The permissions over actions the authenticated user can perform on
                this password
              allOf:
                - $ref: '#/components/schemas/PasswordActions'

    PasswordStatusAndType:
      description: >-
        Contains the status of a password and its type.
      allOf:
        - $ref: '#/components/schemas/PasswordStatus'
        - type: object
          properties:
            type:
              description: >-
                The password type
              allOf:
                - $ref: '#/components/schemas/EntityReference'

    PasswordType:
      description: >-
        Contains definitions for a password type
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            global:
              type: boolean
              description: >-
                Indicates whether this password type is defined in global mode
                (`true`) or in a network (`false`)
            mode:
              $ref: '#/components/schemas/PasswordModeEnum'

    PasswordTypeRegistration:
      description: >-
        Data for a given password type to be used on user registration
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            description:
              type: string
              description: >-
                The description to be show on the registration form
            canForceChange:
              type: boolean
              description: >-
                Whether the current user can set the password to be changed on the
                first user login

    PasswordTypeWithDescription:
      description: >-
        Password type definition plus a description.
      allOf:
        - $ref: '#/components/schemas/PasswordType'
        - type: object
          properties:
            description:
              type: string
              description: >-
                The description of the password type. Useful to know what a password
                must contain to meet the restrictions of this type.

    PasswordsPermissions:
      description: >-
        Permissions over own passwords
      type: object
      properties:
        manage:
          description: >-
            Can manage any password?
          type: boolean
        passwords:
          description: >-
            Permissions over each password type
          type: array
          items:
            $ref: '#/components/schemas/PasswordPermissions'

    PaymentError:
      description: >-
        Error when performing a payment
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            currency:
              description: >-
                Currency reference. Only if `code` is
                `dailyAmountExceeded`,
                `weeklyAmountExceeded` or
                `monthlyAmountExceeded`
              allOf:
                - $ref: '#/components/schemas/Currency'
            maxAmount:
              description: >-
                The maximum amount. Only if `code` is
                `dailyAmountExceeded`,
                `weeklyAmountExceeded` or
                `monthlyAmountExceeded`
              type: string
              format: number
            maxPayments:
              description: >-
                The maximum payments count. Only if `code` is
                `dailyPaymentsExceeded`,
                `weeklyPaymentsExceeded` or
                `monthlyPaymentsExceeded`
              type: integer
            posError:
              description: >-
                The POS error details. Only if `code` is
                `pos`
              allOf:
                - $ref: '#/components/schemas/PosError'
            code:
              $ref: '#/components/schemas/PaymentErrorCode'

    PaymentPreview:
      description: >-
        Preview of either a direct or scheduled payment
      allOf:
        - $ref: '#/components/schemas/InternalTransactionPreview'
        - type: object
          properties:
            mainAmount:
              description: >-
                This reflects the new transaction amount. Depending on the
                configured fees, it could happen that the fee amount is deducted
                from transaction amount. If no fees deduct, it will be the same as
                transaction amount.  E.g: payment from A to B by 100 units with
                two fees: 10 units deducted from payment amount and other of 15
                not deducted. Then the `totalAmount` will be 115, 90 for the
                `mainAmount`, 10 for the first fee and 15 for  the other fee.
              type: string
              format: number
            fees:
              description: >-
                Only returned for direct payments. Contains the fees that would be
                paid by the payer if the payment is confirmed.
              type: array
              items:
                $ref: '#/components/schemas/TransferFeePreview'
            installments:
              description: >-
                Only returned for scheduled payments. Contains the previews of each
                installment, if the payment is confirmed.
              type: array
              items:
                $ref: '#/components/schemas/InstallmentPreview'
            payment:
              description: >-
                Depending on the configuration, some script might alter the payment
                object, for example, filling in custom fields. This object can be
                used to show the actual data to the user, and to be posted again to
                the `POST /{owner}/payments/` path.
              allOf:
                - $ref: '#/components/schemas/PerformPayment'
            ARate:
              description: >-
                The balance aging counter used for this payment
              type: string
              format: number
            DRate:
              description: >-
                The balance maturity used for this payment
              type: string
              format: number
            previousDRate:
              description: >-
                The number of days until the present balance reaches its maturity
              type: string
              format: number
            transferDRate:
              description: >-
                The maturity used for this payment
              type: string
              format: number

    PaymentRequestPermissions:
      description: >-
        Permissions the user has over a payment request.
      type: object
      properties:
        accept:
          description: >-
            The payment request can be accepted by the payer.
          type: boolean
        reject:
          description: >-
            The payment request can be rejected by the payer.
          type: boolean
        cancel:
          description: >-
            The payment request can be canceled by the payee or managers.
          type: boolean
        reschedule:
          description: >-
            The payment request can be rescheduled by the payee or managers.
          type: boolean
        changeExpiration:
          description: >-
            The payment request expiration date can be changed by the payee or
            managers.
          type: boolean

    PaymentRequestsPermissions:
      description: >-
        Permissions over own payment requests
      allOf:
        - $ref: '#/components/schemas/PaymentRequestPermissions'
        - type: object
          properties:
            view:
              description: >-
                Can view payment requests?
              type: boolean

    PaymentsPermissions:
      description: >-
        General payment permissions
      type: object
      properties:
        user:
          description: >-
            Can perform payments to users?
          type: boolean
        system:
          description: >-
            Can perform payments to system accounts?
          type: boolean
        self:
          description: >-
            Can perform payments between own accounts?
          type: boolean
        pos:
          description: >-
            Can receive payments from users?
          type: boolean

    PendingPaymentActionParams:
      description: >-
        Parameters for actions over pending payments
      type: object
      properties:
        comments:
          description: >-
            Comments for the current action
          type: string

    PerformBaseTransaction:
      description: >-
        Base definitions for performing a transaction
      type: object
      x-abstract: true
      properties:
        amount:
          description: >-
            The transaction amount
          type: string
          format: number
        description:
          description: >-
            The (optional) transaction description
          type: string
        currency:
          description: >-
            The currency id or internal name. Only used when not specifying a
            payment type. In this case, will narrow the search for the payment type.
          type: string
        type:
          description: >-
            The payment type, either the id or qualified internal name (in the form
            `fromAccountType.paymentType`). If no payment type is specified, if a
            single one is possible, it will be used. If a currency is specified, it
            will be taken into account in order to find the payment type. If,
            however, there would be multiple possibilities, a validation error is
            returned.
          type: string
        customValues:
          type: object
          description: >-
            Holds the custom field values, keyed by field internal name or id. The
            format of the value depends on the custom field type.
          additionalProperties:
            type: string

    PerformInstallment:
      description: >-
        An installment definition when performing a scheduled payment
      type: object
      properties:
        dueDate:
          description: >-
            The installment due date
          type: string
          format: date-time
        amount:
          description: >-
            The installment amount
          type: string
          format: number
      required:
        - dueDate
        - amount

    PerformInternalTransaction:
      description: >-
        Base definitions to performing a transaction to an internal account (any
        except `externalPayment`, or `chargeback` which is performed distinctly).
      allOf:
        - $ref: '#/components/schemas/PerformTransaction'
        - type: object
          properties:
            fromName:
              description: >-
                If the payment type allows setting a custom name for the origin
                account, is its name. If not allowed, is ignored. For example,
                integration with other systems could use 'Bank account [IBAN]'.
              type: string
            toName:
              description: >-
                If the payment type allows setting a custom name for the destination
                account, is its name. If not allowed, is ignored. For example,
                integration with other systems could use 'Bank account [IBAN]'.
              type: string

    PerformPayment:
      description: >-
        Definitions used to perform either a direct, scheduled or recurring payment.
        Regarding scheduling, the `scheduling` field must be set if some scheduling
        option (other than direct payment) is desired. The scheduling possibilities
        are:


        - Direct payment: For a direct payment, leave empty the `scheduling`
          field or set it to `direct`;

        - Single future payment: For a payment scheduled to a future date, set
          the `scheduling` field to `scheduled` and set
          the `firstDueDate` property with the desired due date;

        - Multiple installments, being the first immediately and the rest with
          regular 1 month interval in-between: For this, set the `scheduling` field
          to `scheduled` and the `installmentsCount` to
          a value greater than 1;

        - Multiple installments, starting at a specific date, with other
          installments with regular 1 month interval in-between: For this, set the
          `scheduling` field to `scheduled`, the
          `installmentsCount` to a value greater than 1 and the
          `firstInstallmentDate` with a future date;

        - Custom installments: For a full control on the generated installments,
          set the `scheduling` field to `scheduled`
          and pass in the `installments` array. However, there are some rules:

          - The total amount must be equals the sum of all installment amounts;

          - The first due date must be in the future;

          - The due dates of all installments must be in ascending order;

          - There must be at least one day between distinct due dates.

        - Recurring payment with the first payment immediately, the others at fixed
          future dates: This can be achieved by setting the `scheduling` field to
          `recurring` and leaving blank the
          `firstOccurrenceDate`. It is possible to schedule a limited number of
          occurrences, by setting `occurrencesCount`, or until it is manually
          canceled, by leaving `occurrencesCount` empty. Also, it is possible to
          customize the interval (default is 1 month) between each occurrence, by
          setting the `occurrenceInterval` field.

        - Recurring payment starting in a future date: This can be achieved by
          setting the `scheduling` field to `recurring`
          and setting the `firstOccurrenceDate`. The other options, the fixed number
          of occurrences (`occurrencesCount`) and interval between each occurrence
          (`occurrenceInterval`) can be set just like the case above.

      allOf:
        - $ref: '#/components/schemas/PerformInternalTransaction'
        - type: object
          properties:
            installmentsCount:
              description: >-
                Represents the number of installments. When not specified, assumes a
                single installment. Used only if `scheduling` is
                `scheduled`. Can be used together with
                `installmentsCount` as an alternative to providing individual
                `installments` definitions.
              type: integer
              minimum: 1
            firstInstallmentDate:
              description: >-
                Represents the first installment date. When not specified, assumes
                the first installment is processed instantly. Used only if
                `scheduling` is `scheduled`. Can be used
                together with `installmentsCount` as an alternative to providing
                individual `installments` definitions.
              type: string
              format: date-time
            installments:
              description: >-
                An array containing individual installments definitions, allowing
                full control over generated installments. Used only if `scheduling`
                is `scheduled`.
              type: array
              items:
                $ref: '#/components/schemas/PerformInstallment'
            occurrencesCount:
              description: >-
                Represents the number of occurrences in a recurring payment. When
                not provided, the payment will be repeated until it is manually
                canceled. Used only if `scheduling` is
                `recurring`.
              type: integer
              minimum: 1
            firstOccurrenceDate:
              description: >-
                Represents the first occurrence date for a recurring payment. If
                none is given, it is assumed that the first occurrence is immediate.
                Used only if `scheduling` is
                `recurring`.
              type: string
              format: date-time
            occurrenceInterval:
              description: >-
                Defines the interval between payment occurrences. If none is given,
                it is assumed 1 month between occurrences. Used only if `scheduling`
                is `recurring`.
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            nfcChallence:
              description: >-
                If this payment is performed with a NFC token, must be the challenge
                (as returned by the server) encrypted by the NFC chip, encoded in
                HEX form (2 hex chars per byte).
              type: string
            scheduling:
              $ref: '#/components/schemas/PaymentSchedulingEnum'

    PerformTransaction:
      description: >-
        Base definitions for performing a transaction
      allOf:
        - $ref: '#/components/schemas/PerformBaseTransaction'
        - type: object
          x-abstract: true
          properties:
            subject:
              description: >-
                The payment destination (in case of perform payment) or payer (in
                case of receive payment). Either a user principal (id, login
                name,  etc) or the word `system` when the payment is to be performed
                to / from a system account. Note that a valid numeric value is
                always considered as id. For example, when using another
                identification method that can be numeric only, prefix the value
                with a single quote (like in Excel spreadsheets), for example,
                `'1234567890`.
              type: string

    Permissions:
      description: >-
        Contains all permissions and configurations a user or guest can perform in
        the REST API
      type: object
      properties:
        users:
          description: >-
            Permissions over other users
          allOf:
            - $ref: '#/components/schemas/UsersPermissions'
        myProfile:
          description: >-
            Permissions over own profile
          allOf:
            - $ref: '#/components/schemas/UserProfilePermissions'
        banking:
          description: >-
            Permissions over banking / accounts
          allOf:
            - $ref: '#/components/schemas/BankingPermissions'
        marketplace:
          description: >-
            Permissions for marketplace
          allOf:
            - $ref: '#/components/schemas/MarketplacePermissions'
        passwords:
          description: >-
            Permissions over own passwords
          allOf:
            - $ref: '#/components/schemas/PasswordsPermissions'
        records:
          description: >-
            Permissions over own records
          allOf:
            - $ref: '#/components/schemas/RecordsPermissions'
        operations:
          description: >-
            Permissions over own custom operations
          allOf:
            - $ref: '#/components/schemas/OperationsPermissions'
        contacts:
          description: >-
            Permissions over contacts
          allOf:
            - $ref: '#/components/schemas/ContactsPermissions'
        operators:
          description: >-
            Permissions over own operators
          allOf:
            - $ref: '#/components/schemas/OperatorsPermissions'
        notifications:
          description: >-
            Permissions over notifications
          allOf:
            - $ref: '#/components/schemas/NotificationsPermissions'
        notificationSettings:
          description: >-
            Permissions over notifications settings
          allOf:
            - $ref: '#/components/schemas/NotificationSettingsPermissions'
        tokens:
          description: >-
            Permissions over tokens
          allOf:
            - $ref: '#/components/schemas/TokensPermissions'
        sessions:
          description: >-
            Permissions over user sessions
          allOf:
            - $ref: '#/components/schemas/SessionsPermissions'
        alerts:
          description: >-
            Permissions related to user alers
          allOf:
            - $ref: '#/components/schemas/AlertsPermissions'
        vouchers:
          description: >-
            Permissions over vouchers
          allOf:
            -  $ref: '#/components/schemas/VouchersPermissions'





    PersonalizeNfcError:
      description: >-
        Error when personalize a NFC card
      allOf:
        - $ref: '#/components/schemas/BaseNfcError'
        - type: object
          properties:
            code:
              $ref: '#/components/schemas/PersonalizeNfcErrorCode'

    Phone:
      description: >-
        A phone reference
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            name:
              type: string
              description: >-
                The phone name
            number:
              type: string
              description: >-
                The formatted number
            extension:
              type: string
              description: >-
                The number extension, only for landLine phones, and is only used if the
                phone configuration states that extensions are enabled.
            normalizedNumber:
              type: string
              description: >-
                The number, normalized to the E.164 format
              readOnly: true
            type:
              $ref: '#/components/schemas/PhoneKind'

    PhoneBasicData:
      description: >-
        Contains data shared by both PhoneDataForNew and PhoneDataForEdit
      type: object
      properties:
        country:
          description: >-
            The 2-letter country code used by default for numbers. Unless an
            international number is specified (using the `+` prefix), the phone
            number is assumed to belong to this country.
          type: string
        alwaysShowInternationalNumber:
          description: >-
            Indicates the it is configured to always format numbers using the
            international format. If set to false, numbers will be formatted in the
            national format.
          type: boolean
        example:
          description: >-
            An example phone number. Can be either a land-line or mobile phone
            number example, depending on this phone kind phone
          type: string
        extensionEnabled:
          description: >-
            Only returned for land line phones. Indicates whether the extension is
            enabled.
          type: boolean
        smsEnabled:
          description: >-
            Only returned for mobile phones. Indicates whether outbound SMS is
            enabled in Cyclos
          type: boolean
        managePrivacy:
          type: boolean
          description: >-
            Can the authenticated user manage the privacy of this phone?
        manuallyVerify:
          type: boolean
          description: >-
            Can the authenticated user manully verify a mobile phone?
        confirmationPasswordInput:
          description: >-
            If a confirmation password is used, contains the definitions on how to
            request that password from the user. This confirmation password is required
            when performing sensible actions. Sometimes this is dynamic, for example,
            the confirmation might be configured to be used only once per session, or
            operations like payments may have a limit per day to be without confirmation
            (pinless).
          allOf:
            - $ref: '#/components/schemas/PasswordInput'
        type:
          $ref: '#/components/schemas/PhoneKind'

    PhoneConfiguration:
      description: >-
        Contains configuration information related to phones
      type: object
      properties:
        country:
          description: >-
            The 2-letter country code used by default for numbers. Unless an
            international number is specified (using the `+` prefix), the phone
            number is assumed to belong to this country.
          type: string
        alwaysShowInternationalNumber:
          description: >-
            Indicates the it is configured to always format numbers using the
            international format. If set to false, numbers will be formatted in the
            national format.
          type: boolean
        extensionEnabled:
          description: >-
            Indicates whether the extension is enabled for land-line phones
          type: boolean
        smsEnabled:
          description: >-
            Indicates whether outbound SMS is enabled in Cyclos
          type: boolean
        landLineExample:
          description: >-
            An example phone number for a land-line phone
          type: string
        mobileExample:
          description: >-
            An example phone number for a mobile phone
          type: string

    PhoneConfigurationForUserProfile:
      description: >-
        Contains extended phone configuration for a user profile
      allOf:
        - $ref: '#/components/schemas/PhoneConfiguration'
        - type: object
          properties:
            mobilePhone:
              description: >-
                Contains a template with default values for a new mobile phone
              allOf:
                - $ref: '#/components/schemas/PhoneNew'
            landLinePhone:
              description: >-
                Contains a template the default values for a new land-line phone
              allOf:
                - $ref: '#/components/schemas/PhoneNew'
            edit:
              type: boolean
              description: >-
                Can edit phones?
            managePrivacy:
              type: boolean
              description: >-
                Can manage the privacy of phones?
            maxLandLines:
              type: integer
              description: >-
                The maximum number of land-line phones the user can own
            maxMobiles:
              type: integer
              description: >-
                The maximum number of mobile phones the user can own
            mobileAvailability:
              $ref: '#/components/schemas/AvailabilityEnum'
            landLineAvailability:
              $ref: '#/components/schemas/AvailabilityEnum'

    PhoneDataForEdit:
      description: >-
        Contains data for editing an existing phone
      allOf:
        - $ref: '#/components/schemas/PhoneBasicData'
        - type: object
          properties:
            phone:
              description: >-
                The phone that is being edited. This value can be modified and sent
                back on `PUT /phones/{id}`.
              allOf:
                - $ref: '#/components/schemas/PhoneEdit'
            edit:
              type: boolean
              description: >-
                Can the authenticated user edit this phone?
            remove:
              type: boolean
              description: >-
                Can the authenticated user remove this phone?

    PhoneDataForNew:
      description: >-
        Contains data for creating a new phone
      allOf:
        - $ref: '#/components/schemas/PhoneBasicData'
        - type: object
          properties:
            phone:
              description: >-
                The phone populated with the default fields. This value can be
                modified and sent back on `POST /{user}/phones`.
              allOf:
                - $ref: '#/components/schemas/PhoneNew'
            example:
              description: >-
                An example phone number
              type: string

    PhoneEdit:
      description: >-
        Parameters for editing an existing phone
      allOf:
        - $ref: '#/components/schemas/PhoneManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    PhoneEditWithId:
      description: >-
        Parameters for editing an existing phone
      allOf:
        - $ref: '#/components/schemas/PhoneEdit'
        - type: object
          properties:
            id:
              type: string
              description: >-
                The internal entity identifier

    PhoneManage:
      description: >-
        Common fields for either creating or editing a phone
      type: object
      x-implements: IPhoneDetailed
      x-abstract: true
      properties:
        name:
          type: string
          description: >-
            The phone name
        number:
          type: string
          description: >-
            The formatted number
        extension:
          type: string
          description: >-
            The number extension, only for landLine phones, and is only used if the
            phone configuration states that extensions are enabled.
        hidden:
          type: boolean
          description: >-
            Indicates whether this phone is hidden for other users (`true`) or visible
            to all users (`false`).
        enabledForSms:
          type: boolean
          description: >-
            Only applicable if this represents a mobile phone. Whether this mobile phone
            is enabled for SMS, both receiving notifications and sending SMS operations.
            Can only be set if the mobile phone is verified.
        verified:
          type: boolean
          description: >-
            Only applicable if this represents a mobile phone. Whether this mobile is
            verified. Can only be directly set by administrators. Regular users need to
            verify it.

    PhoneNew:
      description: >-
        Parameters for creating a new phone
      allOf:
        - $ref: '#/components/schemas/PhoneManage'
        - type: object
          properties:
            kind:
              $ref: '#/components/schemas/PhoneKind'

    PhoneResult:
      description: >-
        Data for a phone as returned on list
      allOf:
        - $ref: '#/components/schemas/Phone'
        - type: object
          properties:
            verified:
              description: >-
                Indicates whether this phone is verified. Is only returned if `kind`
                is `mobile` and the authenticated user manages the
                owner of this phone.
              type: boolean
            enabledForSms:
              description: >-
                Indicates whether this phone is verified and enabled for SMS. Is
                only returned if `kind` is `mobile` and the
                authenticated user manages the owner of this phone.
              type: boolean
            hidden:
              description: >-
                Indicates whether this phone is hidden for other users. It always
                returns false if the authenticated user doesn't manage the owner of
                this phone.
              type: boolean
            verificationCodeSendDate:
              description: >-
                The date the verification code was sent, if any. Is only returned if
                `kind` is `mobile` and the authenticated user
                manages the owner of this phone.
              type: string
              format: date-time

    PhoneView:
      description: >-
        Detailed information when viewing a phone
      allOf:
        - $ref: '#/components/schemas/PhoneResult'
        - type: object
          x-implements: IPhoneDetailed
          properties:
            user:
              description: >-
                The user which owns this phone
              allOf:
                - $ref: '#/components/schemas/User'
            editable:
              description: >-
                Can the authenticated user edit / remove this phone?
              type: boolean
            name:
              type: string
              description: >-
                The phone name
            number:
              type: string
              description: >-
                The formatted number
            extension:
              type: string
              description: >-
                The number extension, only for landLine phones, and is only used if the
                phone configuration states that extensions are enabled.
            hidden:
              type: boolean
              description: >-
                Indicates whether this phone is hidden for other users (`true`) or visible
                to all users (`false`).
            enabledForSms:
              type: boolean
              description: >-
                Only applicable if this represents a mobile phone. Whether this mobile phone
                is enabled for SMS, both receiving notifications and sending SMS operations.
                Can only be set if the mobile phone is verified.
            verified:
              type: boolean
              description: >-
                Only applicable if this represents a mobile phone. Whether this mobile is
                verified. Can only be directly set by administrators. Regular users need to
                verify it.


    PinInput:
      description: >-
        Contains all information for a PIN entry. PINs are always numeric.
      type: object
      properties:
        minLength:
          description: >-
            The minimum allowed PIN length
          type: integer
        maxLength:
          description: >-
            The maximum allowed PIN length
          type: integer

    PosError:
      description: >-
        Error when performing a POS operation
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              $ref: '#/components/schemas/PosErrorCode'

    PreselectedPeriod:
      description: >-
        Represents a pre-calculated date period
      type: object
      properties:
        defaultOption:
          description: >-
            Indicates whether this period should be pre-selected
          type: boolean
        name:
          description: >-
            The period display name
          type: string
        begin:
          description: >-
            The period begin date
          type: string
          format: date-time
        end:
          description: >-
            The period begin date
          type: string
          format: date-time

    Principal:
      description: >-
        Represents a user identification method of a user
      type: object
      properties:
        value:
          description: >-
            This is the value which is used to identify the user
          type: string
        type:
          description: >-
            This is the type of the user identification which can be a token,
            profile field, etc
          allOf:
            - $ref: '#/components/schemas/EntityReference'

    PrincipalType:
      description: >-
        A reference to a principal type
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            kind:
              $ref: '#/components/schemas/PrincipalTypeKind'

    PrincipalTypeInput:
      description: >-
        Definition on how a principal value can be entered by the user
      allOf:
        - $ref: '#/components/schemas/PrincipalType'
        - type: object
          properties:
            customField:
              description: >-
                If this principal is based on a custom field, holds its definition
              allOf:
                - $ref: '#/components/schemas/CustomFieldDetailed'
            mask:
              description: >-
                If this principal is either a token or account number, holds the
                (optional) mask which clients can use to input the value.
              type: string
            allowManualInput:
              description: >-
                Only returned if `kind` is `token`.
                Specifies if the principal type allows enter manually the token
                value.
              type: boolean
            example:
              description: >-
                If this principal is mobile phone, holds an example number.
              type: string
            tokenType:
              description: >-
                If this principal is a token, contains its type
              allOf:
                - $ref: '#/components/schemas/TokenTypeEnum'

    ProcessDynamicDocument:
      description: >-
        Defines parameters used to process a dynamic document
      type: object
      properties:
        formFields:
          description: >-
            Holds the form field values, keyed by field internal name or id. The
            format of the value depends on the custom field type.
          type: object
          additionalProperties:
            type: string

    Product:
      description: >-
        Reference to a product
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            kind:
              $ref: '#/components/schemas/ProductKind'

    ProductAssignmentLog:
      description: >-
        Information regarding a specific product assignment change
      type: object
      properties:
        by:
          $ref: '#/components/schemas/User'
        product:
          $ref: '#/components/schemas/Product'
        date:
          description: >-
            When the action was performed
          type: string
          format: date-time
        action:
          $ref: '#/components/schemas/ProductAssignmentActionEnum'


    ProductWithUserAccount:
      description: >-
        Reference to a product, together with the related user account
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            userAccount:
              $ref: '#/components/schemas/AccountType'

    ProfileFieldActions:
      description: >-
        Determines the allowed actions over a given profile field
      type: object
      properties:
        edit:
          type: boolean
          description: >-
            Can the authenticated user edit this field?
        managePrivacy:
          type: boolean
          description: >-
            Can the authenticated user manage the privacy for this field?

    QueryFilters:
      description: >-
        Base definitions for objects used as filters for queries
      x-abstract: true
      type: object
      properties:
        page:
          type: integer
          description: >-
            The page number (zero-based) of the search. The default value is zero.
        pageSize:
          type: integer
          description: >-
            The maximum number of records that will be returned on the search. The
            default value is 40. The maximum number of returned results is
            configured in Cyclos, and even if more than that is requested, it will
            be limited by that setting.
        skipTotalCount:
          type: boolean
          description: >-
            When set to true the result will not include the total record count,
            only the information on whether there are more records. Depending on
            the server-side configuration, this can be always true. Otherwise,
            if the server allows total count, and the client doesn't need it,
            setting this to true can increase performance a bit.


    Record:
      description: >-
        A custom record is a structured data stored either for a user or for system
        (a general record, unrelated to a user).
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            display:
              type: string
              description: >-
                The descriptive text for this record, according to the record type
                configuration in Cyclos
            kind:
              $ref: '#/components/schemas/RecordKind'

    RecordBasePermissions:
      description: >-
        Basic definitions shared by `OwnerRecordPermissions` and
        `BaseRecordDataForSearch`
      type: object
      properties:
        type:
          $ref: '#/components/schemas/RecordTypeWithMenu'
        create:
          description: >-
            Can the authenticated user create new records of this type?
          type: boolean
        edit:
          description: >-
            Can the authenticated user edit records of this type?
          type: boolean
        remove:
          description: >-
            Can the authenticated user remove records of this type?
          type: boolean

    RecordBasicData:
      description: >-
        Contains data shared by both RecordDataForNew and RecordDataForEdit
      type: object
      x-abstract: true
      properties:
        type:
          $ref: '#/components/schemas/RecordTypeDetailed'
        fields:
          description: >-
            The record custom fields (either defined within this record type or
            shared fields linked with this record type)
          type: array
          items:
            $ref: '#/components/schemas/RecordCustomFieldDetailed'
        user:
          description: >-
            The record owner user. Only returned if `kind` is
            `user`.
          allOf:
            - $ref: '#/components/schemas/User'
        kind:
          $ref: '#/components/schemas/RecordKind'

    RecordCustomField:
      description: >-
        Adds to `CustomField` some record-specific definitions
      allOf:
        - $ref: '#/components/schemas/CustomField'
        - type: object
          properties:
            section:
              description: >-
                The record fields section
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            colspan:
              description: >-
                The number of columns this field spans
              type: integer

    RecordCustomFieldDetailed:
      description: >-
        Adds to `CustomFieldDetailed` some record-specific definitions
      allOf:
        - $ref: '#/components/schemas/CustomFieldDetailed'
        - type: object
          properties:
            section:
              description: >-
                The record fields section
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            colspan:
              description: >-
                The number of columns this field spans
              type: integer

    RecordCustomFieldValue:
      description: >-
        Adds to `CustomFieldValue` the section where this field should be shown
      allOf:
        - $ref: '#/components/schemas/BaseCustomFieldValue'
        - type: object
          properties:
            field:
              description: >-
                The custom field reference
              allOf:
                - $ref: '#/components/schemas/RecordCustomField'

    RecordDataForEdit:
      description: >-
        Contains data for editing an existing record
      allOf:
        - $ref: '#/components/schemas/RecordBasicData'
        - type: object
          properties:
            edit:
              description: >-
                Can the authenticated user edit records of this type?
              type: boolean
            remove:
              description: >-
                Can the authenticated user remove records of this type?
              type: boolean
            editableFields:
              description: >-
                The internal names of fields that can be edited
              type: array
              items:
                type: string
            record:
              description: >-
                The record that is being edited. This value can be modified and sent
                back to `PUT /records/{id}`
              allOf:
                - $ref: '#/components/schemas/RecordEdit'
            binaryValues:
              description: >-
                Holds the current values for file / image custom fields as lists of
                `StoredFile`s / `Image`s.
              allOf:
                - $ref: '#/components/schemas/CustomFieldBinaryValues'

    RecordDataForNew:
      description: >-
        Contains data for creating a new record
      allOf:
        - $ref: '#/components/schemas/RecordBasicData'
        - type: object
          properties:
            record:
              description: >-
                The record populated with the default fields. This value can be
                modified and sent back to `POST /{owner}/records/{type}`.
              allOf:
                - $ref: '#/components/schemas/RecordNew'

    RecordDataForSearch:
      description: >-
        Data for searching records of a specific owner and type
      allOf:
        - $ref: '#/components/schemas/BaseRecordDataForSearch'
        - type: object
          properties:
            user:
              description: >-
                The user searching a record type, empty if there is self otherwise the managed user
              allOf:
                - $ref: '#/components/schemas/User'
            query:
              description: >-
                Default query filters for searching records
              allOf:
                - $ref: '#/components/schemas/RecordQueryFilters'

    RecordEdit:
      description: >-
        Parameters for editing an existing record
      allOf:
        - $ref: '#/components/schemas/RecordManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    RecordManage:
      description: >-
        Common fields for either creating or editing a record
      type: object
      x-abstract: true
      properties:
        customValues:
          type: object
          description: >-
            Holds the custom field values, keyed by field internal name or id. The
            format of the value depends on the custom field type. Example:
            `{..., "customValues": {"gender": "male", "birthDate":
            "1980-10-27"}}`
          additionalProperties:
            type: string

    RecordNew:
      description: >-
        Parameters for creating a new record
      allOf:
        - $ref: '#/components/schemas/RecordManage'
        - type: object

    RecordPermissions:
      description: >-
        Permissions over own records of a given type
      allOf:
        - $ref: '#/components/schemas/RecordBasePermissions'
        - type: object
          properties:
            singleRecordId:
              description: >-
                If this record type layout is single, and the record exists, contains its identifier
              type: string
            update:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                Use `edit` property



                Can update records of this type?
              type: boolean
            singleId:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                Use `singleRecordId` property



                If the record type `layout` is  `single` this
                property contains the identifier of the existing record (if any) of this
                type.
              type: string


    RecordQueryFilters:
      description: >-
        Query filters for records
      allOf:
        - $ref: '#/components/schemas/FullTextQueryFilters'
        - type: object
          properties:
            customFields:
              type: array
              items:
                type: string
              description: >-
                Record custom field values used as filters. Is a comma-separated
                array, where each part consists in two parts: the internal name
                (or custom field id) of the field, and a value, both separated by
                : (colon).  For example,
                `customFields=field1:value1,field2:value2`. Sometimes
                multiple values are accepted. In this case, the multiple values are
                separated by pipes. For example,
                customFields=field1:valueA|valueB. Enumerated fields accept
                multiple values, while numeric and date fields also accept ranges,
                which are two values, pipe-separated. For example,
                `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31`
                would match results whose custom field with internal name
                `tradeType` is either `offer` or `search`, and whose `extraDate` is
                between January 1, 2000 and December 31, 2001. To specify a single
                bound in ranges (like birth dates before December 31, 2001), use a
                pipe in one of the values, like
                `customFields=extraDate:|2001-12-31`.

                A note for dynamic custom fields: If a script is used to
                generate possible values for search, the list will be returned in
                the  corresponding data, and it is sent as a pipe-separated list of
                values (not labels). For example:
                `customFields=dynamic:a|b|c`. However, it is also possible to
                perform a keywords-like (full-text) search using the dynamic value
                label. In this case a single value, prefixed by single quotes should
                be used. For example: `customFields=dynamic:'business`.
            creationPeriod:
              description: >-
                The minimum / maximum record creation date
              type: array
              items:
                type: string
                format: date-time
            createdBy:
              description: >-
                Either the id or identifier of the user that created the record
              type: string

    RecordResult:
      description: >-
        Contains data returned when searching for records
      allOf:
        - $ref: '#/components/schemas/Record'
        - type: object
          properties:
            creationDate:
              description: >-
                The record creation date
              type: string
              format: date-time
            createdBy:
              $ref: '#/components/schemas/User'
            lastModificationDate:
              description: >-
                The record last modification date
              type: string
              format: date-time
            lastModifiedBy:
              $ref: '#/components/schemas/User'
            customValues:
              type: object
              description: >-
                Holds the values for custom record fields, keyed by field internal
                name
              additionalProperties:
                type: string

    RecordSection:
      description: >-
        Details for a section of fields in a record type
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            informationText:
              description: >-
                An informative text that should be shown in the form. The text is
                formatted in HTML.
              type: string
            fields:
              description: >-
                The internal names of the custom fields which are part of this
                section.
              type: array
              items:
                type: string

    RecordType:
      description: >-
        Contains definitions for a record type
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            pluralName:
              description: >-
                The name for the plural form
              type: string
            useViewPage:
              description: >-
                Whether the record type is set to use a separated view / edit page
              type: boolean
            layout:
              $ref: '#/components/schemas/RecordLayoutEnum'

    RecordTypeDetailed:
      description: >-
        A record type with more information for its records
      allOf:
        - $ref: '#/components/schemas/RecordType'
        - type: object
          properties:
            fieldColumns:
              description: >-
                The number of columns which should be used to layout fields
              type: integer
            nowrapLabels:
              description: >-
                Indicates whether labels in the form should be prevented from
                wrapping lines
              type: boolean
            informationText:
              description: >-
                An informative text that should be shown in the form. The text is
                formatted in HTML.
              type: string
            sections:
              description: >-
                The field sections in this record type
              type: array
              items:
                $ref: '#/components/schemas/RecordSection'

    RecordTypeWithMenu:
      description: >-
        A record type with information on whether to show on user menu
      allOf:
        - $ref: '#/components/schemas/RecordType'
        - type: object
          properties:
            showInMenu:
              description: >-
                Should this record type be shown in the user menu?
              type: boolean

    RecordView:
      description: >-
        Detailed information when viewing a record
      allOf:
        - $ref: '#/components/schemas/Record'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/RecordTypeDetailed'
            user:
              description: >-
                The user which owns this record, only returned if `kind` is
                `user`
              allOf:
                - $ref: '#/components/schemas/User'
            creationDate:
              description: >-
                The record creation date
              type: string
              format: date-time
            createdBy:
              $ref: '#/components/schemas/User'
            lastModificationDate:
              description: >-
                The record last modification date
              type: string
              format: date-time
            lastModifiedBy:
              $ref: '#/components/schemas/User'
            customValues:
              description: >-
                The list of custom field values this record has
              type: array
              items:
                $ref: '#/components/schemas/RecordCustomFieldValue'
            edit:
              description: >-
                Can the authenticated user edit this record?
              type: boolean
            remove:
              description: >-
                Can the authenticated user remove this record?
              type: boolean
            operations:
              description: >-
                List of runnable custom operations.
              type: array
              items:
                $ref: '#/components/schemas/Operation'

    RecordWithOwnerResult:
      description: >-
        Results for a shared record search, containing the owner user as well
      allOf:
        - $ref: '#/components/schemas/RecordResult'
        - type: object
          properties:
            user:
              description: >-
                The record owner
              allOf:
                - $ref: '#/components/schemas/User'

    RecordsPermissions:
      description: >-
        Permissions over own or system records
      type: object
      properties:
        # User should actually be called 'my', but was already used like this,
        # so we had to leave it like this.
        user:
          description: >-
            Permissions over each visible own user record type.
          type: array
          items:
            $ref: '#/components/schemas/RecordPermissions'
        # Same as above: should've been called 'user'.
        userManagement:
          description: >-
            Permissions over each visible user record type of managed users.
          type: array
          items:
            $ref: '#/components/schemas/RecordPermissions'
        system:
          description: >-
            Permissions over each visible system record type.
          type: array
          items:
            $ref: '#/components/schemas/RecordPermissions'


    RecurringPaymentPermissions:
      description: >-
        Permissions the user has over a recurring payment
      type: object
      properties:
        cancel:
          description: >-
            Can cancel the recurring payment?
          type: boolean

    RecurringPaymentsPermissions:
      description: >-
        Permissions over own recurring payments
      allOf:
        - $ref: '#/components/schemas/RecurringPaymentPermissions'
        - type: object
          properties:
            view:
              description: >-
                Can view recurring payments?
              type: boolean

    RedeemVoucher:
      description: >-
        Additional data to redeem a voucher
      type: object
      properties:
        customValues:
          type: object
          description: >-
            Holds the custom field values for the redeem payment, keyed by field
            internal name or id. The format of the value depends on the custom field
            type.
          additionalProperties:
            type: string

    RedeemVoucherError:
      description: >-
        Error when redeeming a voucher
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            redeemAfterDate:
              description: >-
                Indicates the date after which this voucher can be redeemed. Only if
                `code` is `notAllowedYet`.
              type: string
              format: date-time
            paymentError:
              description: >-
                The `PaymentError` generated when the voucher payment was being
                created. Only if `code` is `payment`.
              allOf:
                - $ref: '#/components/schemas/PaymentError'
            code:
              $ref: '#/components/schemas/RedeemVoucherErrorCode'
            voucherStatus:
              description: >-
                Only if `code` is
                `notAllowedForVoucher`
              allOf:
                - $ref: '#/components/schemas/VoucherStatusEnum'
            allowedDays:
              description: >-
                Only if `code` is `notAllowedToday`
              type: array
              items:
                $ref: '#/components/schemas/WeekDayEnum'

    Reference:
      description: >-
        A general reference between 2 users
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            date:
              description: The date the reference was set
              type: string
              format: date-time
            level:
              $ref: '#/components/schemas/ReferenceLevelEnum'
            comments:
              description: The reference comments
              type: string

    ReferenceDataForSet:
      description: >-
        Configuration data for setting a reference
      type: object
      properties:
        from:
          description: The user that gave the reference
          allOf:
            - $ref: '#/components/schemas/User'
        to:
          description: The user that received the reference
          allOf:
            - $ref: '#/components/schemas/User'
        reference:
          description: The object that should be edited and posted back
          allOf:
            - $ref: '#/components/schemas/ReferenceSet'


    ReferencePeriodStatistics:
      description: >-
        Statistics for received or given references in a given period
      type: object
      properties:
        period:
          description: >-
            The date period ranges. Null when the results are for all time.
          allOf:
            - $ref: '#/components/schemas/DatePeriod'
        total:
          type: integer
          description: The total number of accounted references.
        totalNegative:
          description: >-
            The total number of accounted `good`
            or `veryGood` references.
          type: integer
        totalPositive:
          description: >-
            The total number of accounted `bad`
            or `veryBad` references.
          type: integer
        counts:
          description: References count per level.
          type: object
          additionalProperties:
             type: integer
        score:
          type: number
          format: float
          description: >-
            The score is a value from 1 to 5 which contains the average score
            when counting all levels. Each reference level has a score:


            - `veryBad`: 1;

            - `bad`: 2;

            - `neutral`: 3;

            - `good`: 4;

            - `veryGood`: 5.


            The score will be 0 when there are no references.

    ReferenceSet:
      description: >-
        Parameters for setting a reference value. When modifying an existing
        reference, the `version` field must be passed in with the correct
        value, as returned in `GET /{from}/reference/{to}/data-for-set`.
      type: object
      properties:
        level:
          $ref: '#/components/schemas/ReferenceLevelEnum'
        comments:
          description: >-
            Comments for this reference
          type: string
        version:
          type: integer
          description: >-
            The version stamp for the current object, used for optimistic locking. When
            saving, the same version as previously received needs to be passed back. If
            no one else has saved the object, the version will match and the object will
            be updated. However, if someone other has saved the object, the version will
            no longer match, and an error will be raised. This is used to prevent
            multiple users (or processes) from updating the same object and unwilingly
            overridding the property values, leading to data loss.

    ReferenceStatistics:
      description: >-
        Statistics for received or given references
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        periods:
          description: >-
            For each requested period, contains corresponding statistics
          type: array
          items:
            $ref: '#/components/schemas/ReferencePeriodStatistics'

    ReferenceView:
      description: >-
        Details of a reference
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: object
          properties:
            from:
              description: The user that gave the reference
              allOf:
                - $ref: '#/components/schemas/User'
            to:
              description: The user that received the reference
              allOf:
                - $ref: '#/components/schemas/User'
            manage:
              description: Can the authenticated user manage this reference?
              type: boolean



    RejectOrder:
      description: >-
        Parameters used to reject an order by the authenticated user.
      allOf:
        - $ref: '#/components/schemas/BaseOrderAction'
        - type: object

    RelatedTransferType:
      description: >-
        A transfer type related to an account point-of-view
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            related:
              description: >-
                Reference to the related account type
              allOf:
                - $ref: '#/components/schemas/EntityReference'

    ResendActivationCodeRequest:
      description: >-
        Parameters for sending a device activation code.
      allOf:
        - $ref: '#/components/schemas/BaseActivationCodeRequest'
        - type: object

    RunOperation:
      description: >-
        Defines parameters used to run a custom operation
      type: object
      properties:
        formParameters:
          description: >-
            Holds the form field values, keyed by field internal name or id. The
            format of the value depends on the custom field type.
          type: object
          additionalProperties:
            type: string
        confirmationPassword:
          description: >-
            If the custom operation requires confirmation password, the
            `OperationDataForRun.confirmationPasswordInput` will contain the data
            for inputting the confirmation password. When such value is present, the
            password value should be provided in this property.
          type: string
        page:
          description: >-
            When running a custom operation with `resultType` =
            `resultPage`, determines the current page
            offset. Whether this is implemented depends on the script code itself.
          type: integer
        pageSize:
          description: >-
            When running a custom operation with `resultType` =
            `resultPage`, determines the number of
            results per page. Whether this is implemented depends on the script code
            itself.
          type: integer
        exportFormat:
          description: >-
            Only when running a custom operation with `resultType` =
            `resultPage`. Is the internal name of the
            format to export the results. If unset will not generate a file, but
            return the result data.
          type: string

        pageContext:
          description: >-
            DEPRECATED: Use `exportFormat` instead.

            Only when running a custom operation with `resultType` =
            `resultPage`.
          x-remove-version: 4.15
          allOf:
            - $ref: '#/components/schemas/OperationPageContextEnum'

    RunOperationAction:
      description: >-
        Describes an action that can be executed after running an operation.
      type: object
      properties:
        action:
          description: >-
            The custom operation that executes this action
          allOf:
            - $ref: '#/components/schemas/Operation'
        parameters:
          description: >-
            The parameters that should be sent back when executing this action
          type: object
          additionalProperties:
            type: string

    RunOperationResult:
      description: >-
        Defines what is returned when a custom operation is executed. The actual
        property that are filled depend on the `resultType` property. Not returned
        when the `resultType` is file. In that case, the response content will be
        the file content
      type: object
      properties:
        title:
          description: >-
            The text title. May be returned only if `resultType` is either
            `plainText`,
            `richText` or
            `resultPage`.
          type: string
        content:
          description: >-
            The execution result content. Only returned if `resultType` is either
            `plainText`
            or `richText`.
          type: string
        notification:
          description: >-
            The execution result as string that should be shown as a notification.
            Only returned if `resultType` is
            `notification`.
          type: string
        url:
          description: >-
            The execution result as an URL, to which the client should be
            redirected. Only returned if `resultType` is either
            `externalRedirect` or
            `url`.
          type: string
        backTo:
          description: >-
            Either the id or internal name of the custom operation to go back after
            run the operation.
          allOf:
            - $ref: '#/components/schemas/EntityReference'
        backToRoot:
          description: >-
            A boolean value indicating if the client application must go back to the
            page that originated the custom  operation executions.
          type: boolean
        reRun:
          description: >-
            A boolean value indicating if the custom operation we went back to or
            the current action container operation must be re-run before display it.
          type: boolean
        autoRunActionId:
          description: >-
            If it is present, it indicates the id of the action that should be
            executed automatically.
          type: string
        columns:
          description: >-
            Contains the definitions for each column in the result. Only returned if
            `resultType` is `resultPage`.
          type: array
          items:
            $ref: '#/components/schemas/RunOperationResultColumn'
        rows:
          description: >-
            Each row is an object containing the cells for that row, keyed by each
            column's `property`. Only returned if `resultType` is
            `resultPage`.
          type: array
          items:
            type: object
            additionalProperties: true
        actions:
          description: >-
            Actions are other internal custom operations that can be executed from
            this custom operation. The returned parameters should be passed to the
            server when running this action.
          type: array
          items:
            $ref: '#/components/schemas/RunOperationAction'
        resultType:
          $ref: '#/components/schemas/OperationResultTypeEnum'
        notificationLevel:
          description: >-
            Only returned if `resultType` is
            `notification`.
          allOf:
            - $ref: '#/components/schemas/NotificationLevelEnum'

    RunOperationResultColumn:
      description: >-
        A column definition when the result type is
        `resultPage`.
      type: object
      properties:
        header:
          description: >-
            The column header text
          type: string
        property:
          description: >-
            Contains the property name for each row element to access this column
            value.
          type: string
        type:
          $ref: '#/components/schemas/RunOperationResultColumnTypeEnum'
        align:
          description: >-
            The horizontal alignment. The actual values depend on the semantics of
            both the script result and the client application.
          type: string
        decimalDigits:
          description: >-
            The number of decimal digits (scale) to format numbers.
            -1 represents variable scale.
            Only if `type` is `number`.
          type: integer
        valign:
          description: >-
            The vertical alignment. The actual values depend on the semantics of
            both the script result and the client application.
          type: string
        width:
          description: >-
            The column width. The actual values depend on the semantics of both the
            script result and the client application.
          type: string

    ScheduledPaymentPermissions:
      description: >-
        Permissions the user has over a scheduled payment
      type: object
      properties:
        block:
          description: >-
            Can block the whole scheduled payment?
          type: boolean
        unblock:
          description: >-
            Can unblock the whole scheduled payment?
          type: boolean
        cancel:
          description: >-
            Can cancel the whole scheduled payment?
          type: boolean
        settle:
          description: >-
            Can settle open installments?
          type: boolean

    ScheduledPaymentsPermissions:
      description: >-
        Permissions over own scheduled payments
      allOf:
        - $ref: '#/components/schemas/ScheduledPaymentPermissions'
        - type: object
          properties:
            view:
              description: >-
                Can view own scheduled payments?
              type: boolean
            process:
              description: >-
                Can process installments?
              type: boolean

    SearchByDistanceData:
      description: >-
        Contains configuration information for searching data by distance
      type: object
      properties:
        addresses:
          description: >-
            The list of addresses owned by the authenticated user
          type: array
          items:
            $ref: '#/components/schemas/Address'
        defaultValues:
          description: >-
            The default values, keyed by field name, for address fields
          type: object
          additionalProperties:
            type: string
        distanceUnit:
          $ref: '#/components/schemas/DistanceUnitEnum'

    SendActivationCodeRequest:
      description: >-
        Parameters for requesting sending a device activation code.
      allOf:
        - $ref: '#/components/schemas/BaseActivationCodeRequest'
        - type: object
          properties:
            name:
              type: string
              description: >-
                The device name. This name must be unique per user, in case it
                already exist then a suffix will be added in the form `_i` with `i`
                being a number. E.g if a device with name 'my_device' already exist
                then the final name will be 'my_device_1'.
                It's ignored if authenticated with a PIN or if a valid `pinId` was given.
            pinId:
              type: string
              description: >-
                Only if the device for which the activation is requested for already has a defined pin, then it must be
                specified here. This is necessary to get in sync when a device is activated after a pin was already defined.

    SendActivationCodeResult:
      description: >-
        Contains the result of sending a device activation code.
      type: object
      properties:
        device:
          description: >-
            The pending device. The device's name is the same name given in `GET
            /devices/send-activation-code` only if it was not already in use.
            Otherwise, it contains a new name generated from the selected one but
            adding a suffix. The name generated is of the form `name_i` with `i` a
            number and `name` the selected name."
          allOf:
            - $ref: '#/components/schemas/Device'
        sentTo:
          type: string
          description: >-
            The e-mail or the normalized mobile phone number that received the
            activation code.

    SendPaymentRequest:
      description: >-
        Definitions used to send a payment request. The request has an expiration
        date (which can be hidden from the user, depending on the configuration) and
        can be set to be scheduled.
      allOf:
        - $ref: '#/components/schemas/PerformInternalTransaction'
        - type: object
          properties:
            expirationDate:
              description: >-
                The payment request expiration date. Required, unless the expiration
                date is configured in the payment type to be hidden from users.
              type: string
              format: date-time
            firstInstallmentIsImmediate:
              description: >-
                Indicates whether the first installment should be immediately
                processed once the scheduled payment is accepted. Used only if
                `scheduling` is `scheduled`. When
                not explicitly set to `false` will process the first installment
                immediately.
              type: boolean
            installmentsCount:
              description: >-
                Represents the number of installments. When not specified, assumes a
                single installment. Used only if `scheduling` is
                `scheduled`.
              type: integer
              minimum: 1
            scheduling:
              $ref: '#/components/schemas/PaymentRequestSchedulingEnum'
            occurrencesCount:
              description: >-
                Represents the number of occurrences. When not specified, assumes a
                the payment will continue until be manually canceled. Used only if
                `scheduling` is `enum:PaymentRequestSchedulingEnum.recurring`.
              type: integer
            firstOccurrenceIsImmediate:
              description: >-
                Indicates whether the first occurrence should be immediately
                processed once the recurring payment is accepted. Used only if
                `scheduling` is `enum:PaymentRequestSchedulingEnum.recurring`. When
                not explicitly set to `false` will process the first occurrence
                immediately.
              type: boolean

    SessionDataForSearch:
      description: >-
        Data for searching user sessions
      allOf:
        - type: object
          properties:
            roles:
              description: >-
                The roles the authenticated user can use to filter sessions.
              type: array
              items:
                $ref: '#/components/schemas/RoleEnum'
            channels:
              description: >-
                The channel internal names the authenticated user can use to filter sessions.
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            query:
              description: >-
                Default query filters for searching sessions
              allOf:
                - $ref: '#/components/schemas/SessionQueryFilters'

    SessionQueryFilters:
      description: >-
        Search filters for sessions
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            broker:
              description: >-
                Either id or a principal (login name, e-mail, etc) of a broker.
                Used to filter the sessions of users brokered by the given broker.
              type: string
            channels:
              description: >-
                Internal names of the sessions channels that can be returned.
              type: array
              items:
                type: string
            excludeCurrentSession:
              type: boolean
              description: >-
                Whether to exclude or not the current session.
            operatorsOf:
              description: >-
                Either id or a principal (login name, e-mail, etc) of a user.
                The owner member of the operators sessions
                Used to filter the operator sessions of the given user.
              type: string
            roles:
              description: >-
                The role of the logged user in the sessions.
              type: array
              items:
                $ref: '#/components/schemas/RoleEnum'
            user:
              description: >-
                Either id or a principal (login name, e-mail, etc) of the sessions
                owner.
              type: string


    SessionResult:
      description: >-
        Contains data returned when searching for sessions
      allOf:
        - type: object
          properties:
            sessionToken:
              description: >-
                The session token
              type: string
            creationDate:
              description: >-
                The session creation date
              type: string
              format: date-time
            remoteAddress:
              description: >-
                The session remote address
              type: string
            user:
              $ref: '#/components/schemas/User'
            channel:
              $ref: '#/components/schemas/EntityReference'
            currentSession:
              description: >-
                Whether the session is the current one
              type: boolean

    SessionsPermissions:
      description: >-
        Permissions over user sessions
      type: object
      properties:
        view:
          description: >-
            Whether the logged user can view connected users or not
          type: boolean
        disconnect:
          description: >-
            Whether the logged user can disconnect users or not
          type: boolean
        login:
          description: >-
            Whether the logged user can login (i.e create a session) users or not
          type: boolean


    SetAccountBalanceLimits:
      description: Parameters for setting the new account limits.
      allOf:
      - $ref: '#/components/schemas/BaseAccountBalanceLimits'
      - type: object
        properties:
          comment:
            description: >-
              Comments supplied by the manager regarding  the limit change.
            type: string


    SetDeliveryMethod:
      description: >-
        Delivery method information
      allOf:
        - $ref: '#/components/schemas/BaseOrderAction'
        - type: object
          properties:
            name:
              description: >-
                The delivery method name.
              type: string
            chargeAmount:
              description: >-
                The delivery method charge amount.
              type: string
              format: number
            time:
              x-remove-version: 4.15
              deprecated: true
              description: >-
                Use `minTime` and `maxTime` instead.


              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            minTime:
              description: >-
                The delivery method minimum time interval
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            maxTime:
              description: >-
                The delivery method maximum time interval
              allOf:
                - $ref: '#/components/schemas/TimeInterval'

    SetSecurityAnswer:
      description: >-
        Parameters to define the security answer.
      type: object
      properties:
        securityQuestion:
          type: string
          description: >-
            If the server is configured to use security question, is the
            `internalName` of the question present in the result of
            `data-for-new`, in the `securityQuestions` property. Is optional and
            only used in public registration.
        securityAnswer:
          type: string
          description: >-
            If a `securityQuestion` is informed, this is the answer. Required in
            this case. Only used in public registration...

    SharedRecordsDataForSearch:
      description: >-
        Data for searching records with shared fields (multiple types)
      allOf:
        - $ref: '#/components/schemas/BaseRecordDataForSearch'
        - type: object
          properties:
            recordTypes:
              description: >-
                The possible record types.
              type: array
              items:
                $ref: '#/components/schemas/RecordType'
            query:
              description: >-
                Default query filters for searching records
              allOf:
                - $ref: '#/components/schemas/SharedRecordsQueryFilters'

    SharedRecordsQueryFilters:
      description: >-
        Query filters for searching distinct record types which shared common fields
      allOf:
        - $ref: '#/components/schemas/GeneralRecordsQueryFilters'
        - type: object
          properties:
            types:
              description: >-
                Either the ids or identification methods of record types
              type: array
              items:
                type: string

    ShoppingCartCheckout:
      description: >-
        Contains data required to check-out a shopping cart
      allOf:
        - $ref: '#/components/schemas/BaseOrderAction'
        - type: object
          properties:
            deliveryAddress:
              description: >-
                The address used for delivery in this specific order. The fields
                `name`, `defaultAddress` and `hidden` are ignored.
              allOf:
                - $ref: '#/components/schemas/AddressNew'
            deliveryMethod:
              description: >-
                The id of the selected delivery method (if any)
              type: string
            paymentType:
              description: >-
                Either the internal name or id of the selected payment type.
              type: string

    ShoppingCartCheckoutError:
      description: >-
        Error when check-out a shopping cart.
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            shoppingCartError:
              description: >-
                The `ShoppingCartError` generated when the products in the cart were
                being validated.  Only if `code` is
                `products`.
              allOf:
                - $ref: '#/components/schemas/ShoppingCartError'
            code:
              $ref: '#/components/schemas/ShoppingCartCheckoutErrorCode'

    ShoppingCartDataForCheckout:
      description: >-
        Confiugration data need to check-out a shopping cart.
      type: object
      properties:
        cart:
          description: >-
            The cart containing the currency and items.
          allOf:
            - $ref: '#/components/schemas/ShoppingCartView'
        paymentTypes:
          description: >-
            Contains the allowed payment types.
          type: array
          items:
            $ref: '#/components/schemas/TransferType'
        deliveryMethods:
          description: >-
            The list of delivery method commons to all of the products added to
            the shopping cart ordered by name.
          type: array
          items:
            $ref: '#/components/schemas/DeliveryMethod'
        addressConfiguration:
          $ref: '#/components/schemas/AddressConfiguration'
        confirmationPasswordInput:
          description: >-
            If a confirmation password is used, contains the definitions on how to
            request that password from the user. This confirmation password is required
            when performing sensible actions. Sometimes this is dynamic, for example,
            the confirmation might be configured to be used only once per session, or
            operations like payments may have a limit per day to be without confirmation
            (pinless).
          allOf:
            - $ref: '#/components/schemas/PasswordInput'
        addresses:
          description: >-
            The addresses the logged user (i.e the buyer) has.
          type: array
          items:
            $ref: '#/components/schemas/Address'

    ShoppingCartError:
      description: >-
        Error when interacting with the shopping cart.
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            ad:
              description: >-
                The webshop ad for which there is not enough stock.  Only if `code`
                is `notEnoughStock`
              allOf:
                - $ref: '#/components/schemas/WebshopAd'
            seller:
              description: >-
                The seller whose webshop ad can not be bought. Only if `code` is
                `canNotBuyFromSeller`
              allOf:
                - $ref: '#/components/schemas/User'
            code:
              $ref: '#/components/schemas/ShoppingCartErrorCode'

    ShoppingCartItem:
      description: >-
        An item in a shopping cart.
      allOf:
        - $ref: '#/components/schemas/BaseOrderItem'
        - type: object
          properties:
            priceWhenAdded:
              description: >-
                The current product price at the moment of add it to the shopping
                cart.  Be carefull, this could not be the same price finally charged
                at  check-out (e.g because the promotional period has finished).  It
                could be used to show a warning message to the client
                indicating  the price has changed if it is different from the
                current price of the `product`.
              type: string
              format: number
            price:
              description: >-
                The regular price.
              type: string
              format: number
            promotionalPrice:
              description: >-
                The promotional price (aka the current price). if it is present
                then  that is the current price that would be charged at
                check-out.  Otherwise would be the `price`.  Only present if it is
                defined and the promotional period has not  yet finished.
              type: string
              format: number

    ShoppingCartItemDetailed:
      description: >-
        Detailed information of a shopping cart item.
      allOf:
        - $ref: '#/components/schemas/ShoppingCartItem'
        - type: object
          properties:
            totalPrice:
              description: >-
                The total price for this item, i.e the curent price of the product
                multiplied by its corresponding quantity.
              type: string
              format: number
            availability:
              $ref: '#/components/schemas/ShoppingCartItemAvailabilityEnum'
            quantityAdjustment:
              $ref: '#/components/schemas/ShoppingCartItemQuantityAdjustmentEnum'

    ShoppingCartResult:
      description: >-
        Represents a group of webshop ads offered by the same seller and in the same
        currency.
      allOf:
        - $ref: '#/components/schemas/BaseShoppingCart'
        - type: object
          properties:
            items:
              description: >-
                The webshop ads added to the cart.
              type: array
              items:
                $ref: '#/components/schemas/ShoppingCartItem'

    ShoppingCartView:
      description: >-
        Represents a group of webshop ads offered by the same seller and in the same
        currency.
      allOf:
        - $ref: '#/components/schemas/BaseShoppingCart'
        - type: object
          properties:
            totalPrice:
              description: >-
                The total price of this cart, i.e the sum of the total price of
                all  of its `items`.
              type: string
              format: number
            items:
              description: >-
                Detailed information of the items present in the cart.
              type: array
              items:
                $ref: '#/components/schemas/ShoppingCartItemDetailed'

    StoredFile:
      description: >-
        Contains data about a stored file
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            contentType:
              type: string
              description: >-
                MIME type of the stored file
            length:
              type: integer
              description: >-
                The file size, in bytes
            url:
              type: string
              description: >-
                The URL for getting the content of this file

    ThemeUIElement:
      description: >-
        UI element containing wether the content or the components.
      allOf:
        - $ref: '#/components/schemas/UIElementWithContent'
        - type: object
          properties:
            definitions:
              description: >-
                Base LESS variables.
              type: string
            advancedDefinitions:
              description: >-
                Advanced (based on the base ones) LESS variables.
              type: string
            customStyle:
              description: >-
                Customized CSS.
              type: string

    TicketApprovalResult:
      description: >-
        Ticket approval result.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            ticketNumber:
              description: >-
                The ticket number identifier.
              type: string
            cancelUrl:
              type: string
              description: >-
                The URL to redirect when canceling the accept ticket flow
            successUrl:
              type: string
              description: >-
                The URL to redirect after successfully accepting a ticket
            transaction:
              description: >-
                The generated payment. Only if `status` is
                `processed`.
              allOf:
                - $ref: '#/components/schemas/Transaction'
            ticketStatus:
              $ref: '#/components/schemas/TicketStatusEnum'

    TicketNew:
      description: >-
        Contain the information to create a new ticket for the logged user
      allOf:
        - $ref: '#/components/schemas/PerformBaseTransaction'
        - type: object
          properties:
            payer:
              type: string
              description: >-
                An identification for the user which will pay the ticket. Is
                optional, and in most cases, should be left empty. If empty, at the
                moment the client will pay the ticket, both user identification and
                password will be entered, and the ticket will be confirmed. If
                specified, when confirming, only that user will be able to pay the
                ticket.
            cancelUrl:
              type: string
              description: >-
                The url to redirect when canceling the approve ticket flow. If an
                `orderId` is given then it will be added as a query parameter to
                this url when redirect as well as the ticket number too.
            successUrl:
              type: string
              description: >-
                The url to redirect after successful approving a ticket.  If an
                `orderId` is given then it will be added as a query parameter to
                this url when redirect as well as the ticket number too.
            successWebhook:
              type: string
              description: >-
                The url to be invoked by the server after successfully approving
                a  ticket. If an `orderId` is given then it will be added as a query
                parameter to this url when redirect as well as the ticket number
                too.
            orderId:
              type: string
              description: >-
                An optional order identifier given by the ticket's creator. If
                given  then that identifier will be used at ticket processing to
                ensure the  ticket is for that order. This attribute is usefull in
                case the client doesn't want to reflect  the generated ticket number
                in its database after creating the ticket,
            expiresAfter:
              description: >-
                Defines the expiration interval. If none is given, it is assumed
                that the ticket expires in one day.
              allOf:
                - $ref: '#/components/schemas/TimeInterval'

    TicketPreview:
      description: >-
        null
      allOf:
        - $ref: '#/components/schemas/PaymentPreview'
        - type: object
          properties:
            cancelUrl:
              type: string
              description: >-
                The URL to redirect when canceling the accept ticket flow
            successUrl:
              type: string
              description: >-
                The URL to redirect after successfully accepting a ticket

    TicketProcessResult:
      description: >-
        Ticket process result.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            ticketNumber:
              description: >-
                The ticket number identifier.
              type: string
            actuallyProcessed:
              description: >-
                Flag indicating if the ticket was processed by this invocation or
                the ticket was already processed in a previous invocation. This will
                only  be true for the first invocation of the `process` service
                method.
              type: boolean
            transaction:
              description: >-
                The generated payment.
              allOf:
                - $ref: '#/components/schemas/Transaction'

    TicketsPermissions:
      description: >-
        Permissions over own tickets
      type: object
      properties:
        view:
          description: >-
            Can view tickets?
          type: boolean
        create:
          description: >-
            Can create tickets?
          type: boolean
        cancel:
          description: >-
            Can cancel tickets?
          type: boolean
        approve:
          description: >-
            Can approve tickets from others?
          type: boolean

    TimeInterval:
      description: >-
        Represents a time interval such as 1 month, 3 weeks, 12 months, etc.
      type: object
      properties:
        amount:
          description: >-
            The amount of time units
          type: integer
        field:
          $ref: '#/components/schemas/TimeFieldEnum'

    Token:
      description: >-
        Contains reference to a token. Tokens are used to identify users,
        and are normally used as cards.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            value:
              description: >-
                The token value only if not NFC. Otherwise is the token label.
              type: string
            activationDate:
              description: >-
                When the owner user activated the token.
              type: string
              format: date-time
            creationDate:
              description: >-
                The creation date.
              type: string
              format: date-time
            expiryDate:
              description: >-
                The expiration date. Only if the corresponding token type defines an
                expiration period.
              type: string
              format: date-time
            status:
              $ref: '#/components/schemas/TokenStatusEnum'


    TokenDataForNew:
      description: >-
        Configuration data to create a new token
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TokenType'
        user:
          description: >-
            The user details, in case a user was requested.
          allOf:
            - $ref: '#/components/schemas/User'
        token:
          description: >-
            The object that should be modified and posted back.
          allOf:
            - $ref: '#/components/schemas/TokenNew'

    TokenDataForSearch:
      description: >-
        Configuration data for a general tokens search of a given type
      allOf:
        - $ref: '#/components/schemas/TokenPermissions'
        - type: object
          properties:
            groups:
              description: >-
                The groups the authenticated user can use to filter tokens. Admins can
                always filter by groups, while brokers depend on a permission, which can
                be to only view group sets, only groups or none.
              type: array
              items:
                $ref: '#/components/schemas/Group'
            exportFormats:
              description: >-
                The formats which the data can be exported
              type: array
              items:
                $ref: '#/components/schemas/ExportFormat'
            query:
              description: >-
                Default query filters to search tokens
              allOf:
                - $ref: '#/components/schemas/TokenQueryFilters'



    TokenDetailed:
      description: >-
        Contains detailed information of a token.
      allOf:
        - $ref: '#/components/schemas/TokenResult'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/TokenType'


    TokenNew:
      description: >-
        Data to create a new token
      type: object
      properties:
        user:
          description: >-
            Either id or identification of the user to initially assign the token
            to. If set the token initial status will be either
            `pending` or `active`
            (if `activateNow` is true). If the user is not set, the initial status
            will always be `unassigned`.
          type: string
        value:
          description: >-
            The token value to create. The token value is commonly used as the
            card number.
          type: string
        activateNow:
          description: >-
            When set to true, the token will be initially active when `user` is
            also set. Has no effect if `user` is null.
          type: boolean

    TokenPermissions:
      description: >-
        Permissions over tokens of a specific type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TokenType'
        create:
          description: >-
            Can create tokens of this type?
            For NFC tags, this permission is mapped to the 'Initialize' action.
          type: boolean
        activate:
          description: >-
            Can activate tokens of this type?
            For NFC tags, this permission is mapped to the 'Personalize' action.
          type: boolean



    TokenQueryFilters:
      description: >-
        Query filters for tokens
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            activationPeriod:
              description: >-
                The minimum / maximum token activation date.
              type: array
              items:
                type: string
                format: date-time
            expiryPeriod:
              description: >-
                The minimum / maximum token expiry date.
              type: array
              items:
                type: string
                format: date-time
            groups:
              type: array
              items:
                type: string
              description: >-
                Either id or internal names of groups / group sets
            brokers:
              type: array
              items:
                type: string
              description: >-
                Either id or a principal (login name, e-mail, etc) for brokers
            user:
              type: string
              description: >-
                Either id or a principal (login name, e-mail, etc) for the token
                owner user
            value:
              type: string
              description: >-
                The token value
            statuses:
              type: array
              items:
                $ref: '#/components/schemas/TokenStatusEnum'
              description: >-
                The desired token statuses

    TokenResult:
      description: >-
        Result of a general token search
      allOf:
        - $ref: '#/components/schemas/Token'
        - type: object
          properties:
            user:
              description: >-
                The assigned user. Only if status is not
                `unassigned`.
              allOf:
                - $ref: '#/components/schemas/User'


    TokenType:
      description: >-
        A reference to a token type
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            pluralName:
              description: >-
                The name for the plural form
              type: string
            mask:
              description: >-
                In case the token value is entered by users or formatted, this is
                the (optional) mask to be used.
              type: string
            physicalType:
              $ref: '#/components/schemas/PhysicalTokenTypeEnum'

    TokenView:
      description: >-
        Contains all data regarding a token
      allOf:
        - $ref: '#/components/schemas/TokenDetailed'
        - type: object
          properties:
            activationDeadline:
              description: >-
                Limit date a pending token can be activated. Not returned when
                status is not `pending`.
              type: string
              format: date-time
            activate:
              description: >-
                Can this token be directly activated?
              type: boolean
            assign:
              description: >-
                Can this token be assigned to a user?
              type: boolean
            block:
              description: >-
                Can this token be blocked?
              type: boolean
            unblock:
              description: >-
                Can this token be unblocked?
              type: boolean
            cancel:
              description: >-
                Can this token be canceled?
              type: boolean
            setActivationDeadline:
              description: >-
                Can the activation deadline date of this token be changed?
              type: boolean
            setExpiryDate:
              description: >-
                Can the expiry date of this token be changed?
              type: boolean

    TokensPermissions:
      description: >-
        Permissions over tokens
      type: object
      properties:
        my:
          description: >-
            Permissions over my own tokens type
          type: array
          items:
            $ref: '#/components/schemas/TokenPermissions'
        user:
          description: >-
            Permissions over tokens types of other users
          type: array
          items:
            $ref: '#/components/schemas/TokenPermissions'
        personalizeNfcTokensAsMember:
          description: >-
            NFC token types the authenticated member can personalize to other
            members (example, a business personalizing cards for clients).
          type: array
          items:
            $ref: '#/components/schemas/TokenType'


        nfc:
          deprecated: true
          x-remove-version: 4.15
          description: >-
            DEPRECATED: Use either `my`, `user` or `personalizeNfcTokensAsMember`,
            filtering by `physicalType` to be `nfcTag`.


            Permissions over each visible nfc token type
          type: array
          items:
            $ref: '#/components/schemas/NfcTokenPermissions'

    Trans:
      description: >-
        Common data for transfer and transaction
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            display:
              type: string
              description: >-
                A display text for this transfer / transaction, according to the
                transaction type and currency configuration in Cyclos.
            transactionNumber:
              description: >-
                The transaction number identifying this transfer / transaction.
                The currency configuration has the definition on whether
                transaction numbers are enabled and which format they have.
              type: string
            date:
              description: >-
                The creation date and time.
              type: string
              format: date-time
            amount:
              description: >-
                The transfer / transaction amount.
              type: string
              format: number
            from:
              description: >-
                The debited account.
              allOf:
                - $ref: '#/components/schemas/AccountWithOwner'
            to:
              description: >-
                The credited account.
              allOf:
                - $ref: '#/components/schemas/AccountWithOwner'
            type:
              description: >-
                WARNING: Currently this object contains both `from` and `to`
                account types. Starting with Cyclos 4.15 they won't be returned,
                anymore, as the account types are already returned in the `from`
                / `to` accounts.
              allOf:
                - $ref: '#/components/schemas/TransferType'
            currency:
              description: >-
                The transfer / transaction currency.
              allOf:
                - $ref: '#/components/schemas/Currency'

    TransResult:
      description: >-
        Base fields for results of both transfers and transactions
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            transactionNumber:
              description: >-
                The transaction number identifying this balance transfer. The
                currency configuration has the definition on whether transaction
                numbers are enabled and which format they have.
              type: string
            date:
              description: >-
                The transaction date and time.
              type: string
              format: date-time
            amount:
              description: >-
                The transaction amount.
              type: string
              format: number
            type:
              description: >-
                WARNING: Currently this object contains both `from` and `to`
                account types. Starting with Cyclos 4.15 they won't be returned,
                the account types are already returned in the accounts.
              allOf:
                - $ref: '#/components/schemas/TransferType'
            description:
              description: >-
                The transaction description. Is optional.
              type: string

    Transaction:
      description: >-
        Reference to a transaction
      allOf:
        - $ref: '#/components/schemas/Trans'
        - type: object
          properties:
            ticketNumber:
              description: >-
                A 32-length alphanumeric ticket identifier. Only returned if kind is
                `ticket`.
              type: string
            fromName:
              description: >-
                Contains an optional custom from name, which can be set when
                the transaction is performed.
              type: string
            toName:
              description: >-
                Contains an optional custom to name, which can be set when
                the transaction is performed.
              type: string

            fromKind:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `from.kind`.


                The kind of account owner that sent the transaction.
                WARNING: for kinds `paymentRequest` and
                `ticket` will represent the `to` account.
                This way the pre-Cyclos 4.13 semantic is kept. But keep this in
                mind that when updating your client code.
              allOf:
                - $ref: '#/components/schemas/AccountKind'
            fromUser:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `from.user`.


                The kind of account owner that sent the transaction.
                WARNING: for kinds `paymentRequest` and
                `ticket` will represent the `to` account.
                This way the pre-Cyclos 4.13 semantic is kept. But keep this in
                mind that when updating your client code.
              allOf:
                - $ref: '#/components/schemas/User'
            toKind:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `to.kind`.


                The kind of account owner that sent the transaction.
                WARNING: for kinds `paymentRequest` and
                `ticket` will represent the `from` account.
                This way the pre-Cyclos 4.13 semantic is kept. But keep this in
                mind that when updating your client code.
              allOf:
                - $ref: '#/components/schemas/AccountKind'
            toUser:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `to.user`.


                The kind of account owner that sent the transaction.
                WARNING: for kinds `paymentRequest` and
                `ticket` will represent the `from` account.
                This way the pre-Cyclos 4.13 semantic is kept. But keep this in
                mind that when updating your client code.
              allOf:
                - $ref: '#/components/schemas/User'

            description:
              description: >-
                The optional transaction description.
              type: string
            kind:
              description: >-
                The transaction kind. For example, if the front end has distinct
                views for a regular payment, scheduled payment and so on, this
                information is useful to determine the actual view.
              allOf:
                - $ref: '#/components/schemas/TransactionKind'
            authorizationStatus:
              $ref: '#/components/schemas/TransactionAuthorizationStatusEnum'

    TransactionAuthorization:
      description: >-
        Contains details of an authorization.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            action:
              $ref: '#/components/schemas/TransactionAuthorizationActionEnum'
            by:
              $ref: '#/components/schemas/User'
            comments:
              description: >-
                The authorizer's comment.
              type: string
            date:
              description: >-
                When the authorization was made.
              type: string
              format: date-time
            level:
              description: >-
                The level number.
              type: integer

    TransactionAuthorizationLevelData:
      description: >-
        Contains detailed data of a payment's authorization level.
      type: object
      properties:
        allowBroker:
          description: >-
            Indicates that any of the payer's brokers can authorize this level.
          type: boolean
        allowPayer:
          description: >-
            Indicates that the payer can authorize this level.
          type: boolean
        allowReceiver:
          description: >-
            Indicates that the payer can authorize this level.
          type: boolean
        allowAdmin:
          description: >-
            Indicates that an administrator can authorize this level.
          type: boolean
        brokers:
          description: >-
            Contains the brokers that can authorize this level.
          type: array
          items:
            $ref: '#/components/schemas/User'

    TransactionAuthorizationPermissions:
      description: >-
        Permissions the user has over a pending payment.
      type: object
      properties:
        authorize:
          description: >-
            The payment can be authorized.
          type: boolean
        deny:
          description: >-
            The payment can be denied.
          type: boolean
        cancel:
          description: >-
            The payment can be cenceled regardless the current authorization level.
          type: boolean

    TransactionAuthorizationsPermissions:
      description: >-
        Permissions over own authorized payments
      allOf:
        - $ref: '#/components/schemas/TransactionAuthorizationPermissions'
        - type: object
          properties:
            view:
              description: >-
                Can view own authorized payments?
              type: boolean

    TransactionDataForSearch:
      description: >-
        Contains data used to search transactions for a given owner
      allOf:
        - $ref: '#/components/schemas/BaseTransactionDataForSearch'
        - type: object
          properties:
            user:
              description: >-
                When the given owner is a user, is the reference to it
              allOf:
                - $ref: '#/components/schemas/User'
            accessClients:
              description: >-
                References for access clients which can be used to filter entries by
                transfers generated by a specific access client
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            operators:
              description: >-
                References for operators, which can be used to filter entries by
                transfers performed or received by that specific operator
              type: array
              items:
                $ref: '#/components/schemas/User'
            query:
              description: >-
                Default query filters for the transactions search
              allOf:
                - $ref: '#/components/schemas/TransactionQueryFilters'

    TransactionOverviewDataForSearch:
      description: >-
        Contains data used to search transactions regardless of an account owner
      allOf:
        - $ref: '#/components/schemas/BaseTransactionDataForSearch'
        - type: object
          properties:
            authorizablePaymentTypes:
              description: >-
                Payment types the authenticated administrator can authorize.
                Only returned when logged-in as administrator and the request
                had the `pendingMyAuthorization` flag set to true.
              type: array
              items:
                $ref: '#/components/schemas/TransferType'
            query:
              description: >-
                Default query filters for the transactions search
              allOf:
                - $ref: '#/components/schemas/TransactionOverviewQueryFilters'


    TransactionOverviewQueryFilters:
      description: >-
        Query filters for transactions regardless of an account owner.
      allOf:
        - $ref: '#/components/schemas/BaseTransactionQueryFilters'
        - type: object
          properties:
            currencies:
              description: >-
                The currencies internal names or ids.
              type: array
              items:
                type: string
            fromAccountTypes:
              description: >-
                The source account types internal names or ids.
              type: array
              items:
                type: string
            toAccountTypes:
              description: >-
                The source account types internal names or ids.
              type: array
              items:
                type: string
            pendingMyAuthorization:
              description: >-
                When set to true will only return transactions (`payment`, `recurringPayment` or `scheduledPayment`) in
                pending authorization state that the logged user can authorize
              type: boolean

    TransactionOverviewResult:
      description: >-
        Represents a transaction.
      allOf:
        - $ref: '#/components/schemas/BaseTransactionResult'
        - type: object
          properties:
            from:
              description: >-
                The debited account
              allOf:
                - $ref: '#/components/schemas/AccountWithOwner'
            fromName:
              description: >-
                Contains an optional custom from name, which can be set when
                the transaction is performed.
              type: string
            to:
              description: >-
                The credited account
              allOf:
                - $ref: '#/components/schemas/AccountWithOwner'
            toName:
              description: >-
                Contains an optional custom to name, which can be set when
                the transaction is performed.
              type: string

            fromKind:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `from.kind`.
              allOf:
                - $ref: '#/components/schemas/AccountKind'
            fromUser:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `from.user`.
              allOf:
                - $ref: '#/components/schemas/User'
            toKind:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `to.kind`.
              allOf:
                - $ref: '#/components/schemas/AccountKind'
            toUser:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `to.user`.
              allOf:
                - $ref: '#/components/schemas/User'


    TransactionPreview:
      description: >-
        Base definitions for a preview before performing a transaction
      type: object
      properties:
        confirmationMessage:
          description: >-
            If configured in the payment type, is a message to be shown to the user
            before confirming the transaction
          type: string
        confirmationPasswordInput:
          description: >-
            If a confirmation password is used, contains the definitions on how to
            request that password from the user. This confirmation password is required
            when performing sensible actions. Sometimes this is dynamic, for example,
            the confirmation might be configured to be used only once per session, or
            operations like payments may have a limit per day to be without confirmation
            (pinless).
          allOf:
            - $ref: '#/components/schemas/PasswordInput'
        paymentType:
          $ref: '#/components/schemas/TransferType'
        currency:
          $ref: '#/components/schemas/Currency'
        fromAccount:
          $ref: '#/components/schemas/AccountWithOwner'
        totalAmount:
          description: >-
            The final amount charged to the payer including fees.
          type: string
          format: number
        customValues:
          description: >-
            The list of custom field values, in a detailed view
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValue'

    TransactionQueryFilters:
      description: >-
        Query filters for transactions related to an account owner.
      allOf:
        - $ref: '#/components/schemas/BaseTransactionQueryFilters'
        - type: object
          properties:
            accountTypes:
              description: >-
                The account types
              type: array
              items:
                type: string
            direction:
              $ref: '#/components/schemas/TransferDirectionEnum'

    TransactionResult:
      description: >-
        Represents a transaction, as viewed from the point-of-view of an account
        owner. This means that credits will have a positive amount, while debits
        will be negative.
      allOf:
        - $ref: '#/components/schemas/BaseTransactionResult'
        - type: object
          properties:
            related:
              description: >-
                Either from or to account
              allOf:
                - $ref: '#/components/schemas/AccountWithOwner'
            relatedName:
              description: >-
                Contains an optional custom from / to name, which can be set when
                the transaction is performed.
              type: string

            relatedKind:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `related.kind` instead.
              allOf:
                - $ref: '#/components/schemas/AccountKind'
            relatedUser:
              deprecated: true
              x-remove-version: 4.15
              description: >-
                DEPRECATED. Use `related.user` instead.
              allOf:
                - $ref: '#/components/schemas/User'

    TransactionTypeData:
      description: >-
        Contains definitions regarding a given payment type when performing a
        transaction (payment or payment request).
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            currency:
              $ref: '#/components/schemas/Currency'
            fixedAmount:
              description: >-
                The only allowed amount if the payment type uses a fixed amount
              type: string
              format: number
            allowsRecurringPayments:
              description: >-
                Can payments of this type be made recurring?
              type: boolean
            maxInstallments:
              description: >-
                The maximum allowed installments. If it is zero, no kind of
                scheduled payments is allowed. If it is 1, a single future date can
                be used.
              type: integer
            defaultExpirationDate:
              description: >-
                The default expiration date, according to the configuration. Only
                for payment requests.
              type: string
              format: date-time
            hideExpirationDate:
              description: >-
                Whether the expiration date should be hidden from users, Only for
                payment requests.
              type: boolean
            customFields:
              description: >-
                The custom fields related to this payment type
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldDetailed'
            ARate:
              description: >-
                The balance aging counter used for this payment. Only for payments.
              type: string
              format: number
            DRate:
              description: >-
                The balance maturity used for this payment. Only for payments.
              type: string
              format: number
            DRateCreationValue:
              description: >-
                The initial value for the balance maturity on this payment type.
                Only for payments.
              type: string
              format: number
            limitedAwaitingAuthorization:
              type: boolean
              description: >-
                Only for payments.
            noNegativesMaturityPolicy:
              type: boolean
              description: >-
                Only for payments.
            maxAmountByMaturityPolicy:
              description: >-
                The maximum amount that can be performed when `maturityPolicy` is
                `history`. It corresponds to the maturity table entry indicated by
                `maturityTableWinnerId`. Only for payments.
              type: string
              format: number
            maturityTableWinnerId:
              description: >-
                When `maturityPolicy` is `history`, contains the id of the maturity
                table entry that granted. Only for payments.
              type: string
            descriptionAvailability:
              $ref: '#/components/schemas/AvailabilityEnum'
            maturityPolicy:
              description: >-
                Only for payments.
              allOf:
                - $ref: '#/components/schemas/MaturityPolicyEnum'

    TransactionView:
      description: >-
        Details about a transaction
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            channel:
              description: >-
                The channel this transaction was performed on
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            accessClient:
              description: >-
                The access client in use when this transaction was performed
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            by:
              description: >-
                The user that actually performed the action. May be different than
                the from, for example, an administrator can perform payments in
                behalf of other users
              allOf:
                - $ref: '#/components/schemas/User'
            receivedBy:
              description: >-
                The operator that actually received the payment. Only available if
                some other user has paid directly to it or the operator has received
                the payment vía POS.
              allOf:
                - $ref: '#/components/schemas/User'
            received:
              description: >-
                True if the payment was received vía POS.
              type: boolean
            customValues:
              description: >-
                The list of custom field values
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldValue'
            confirmationPasswordInput:
              description: >-
                If a confirmation password is used, contains the definitions on how to
                request that password from the user. This confirmation password is required
                when performing sensible actions. Sometimes this is dynamic, for example,
                the confirmation might be configured to be used only once per session, or
                operations like payments may have a limit per day to be without confirmation
                (pinless).
              allOf:
                - $ref: '#/components/schemas/PasswordInput'
            authorizationLevelData:
              description: >-
                Only returned if the `kind` is either
                `payment`,
                `scheduledPayment` or
                `recurringPayment` and the transaction is
                pending for authorization. Contains data related to the current
                autorization level that can be authorized / denied.
              allOf:
                - $ref: '#/components/schemas/TransactionAuthorizationLevelData'
            authorizationPermissions:
              description: >-
                Permissions the authenticated user has over this payment regarding
                authorizations.
              allOf:
                - $ref: '#/components/schemas/TransactionAuthorizationPermissions'
            authorizations:
              description: >-
                Contains the details of the authorizations this payment has (for the
                previous levels). To see the final status of the payment please
                check the `authorizationStatus` property.
              type: array
              items:
                $ref: '#/components/schemas/TransactionAuthorization'
            transfer:
              description: >-
                Only returned if the `kind` is `payment`. This
                is the transfer generated when the payment was processed. Will be
                null if the went through authorization and was not authorized. Only
                returned if this `TransactionView` is not already in a
                `TransactionView`.
              allOf:
                - $ref: '#/components/schemas/TransferView'
            scheduledPaymentPermissions:
              description: >-
                Only returned if the `kind` is
                `scheduledPayment`. Permissions over the
                scheduled payment.
              allOf:
                - $ref: '#/components/schemas/ScheduledPaymentPermissions'
            dueAmount:
              description: >-
                Only returned if the `kind` is
                `scheduledPayment`. Means the amount that is
                still needs to be paid until the last installment.
              type: string
              format: number
            installments:
              description: >-
                Only returned if the `kind` is
                `scheduledPayment`. Contains the installment
                references.
              type: array
              items:
                $ref: '#/components/schemas/InstallmentView'
            recurringPaymentPermissions:
              description: >-
                Only returned if the `kind` is
                `recurringPayment`. Permissions over the
                scheduled payment.
              allOf:
                - $ref: '#/components/schemas/RecurringPaymentPermissions'
            nextOccurrenceDate:
              description: >-
                Only returned if the `kind` is
                `recurringPayment`. The scheduled date for the
                next occurrence.
              type: string
              format: date-time
            occurrenceInterval:
              description: >-
                Only returned if the `kind` is
                `recurringPayment`. The interval between
                occurrences.
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            occurrencesCount:
              description: >-
                Only returned if the `kind` is
                `recurringPayment`. The programmed number of
                occurrences. If not set, means the payment will be processed until
                manually canceled.
              type: integer
            occurrences:
              description: >-
                Only returned if the `kind` is
                `recurringPayment`. A list with all
                occurrences this payment has.
              type: array
              items:
                $ref: '#/components/schemas/InstallmentView'
            originalTransfer:
              description: >-
                Only returned if the `kind` is `chargeback`. This is the original
                transfer that has been charged back.
              allOf:
                - $ref: '#/components/schemas/Transfer'
            chargebackTransfer:
              description: >-
                Only returned if the `kind` is `chargeback`. This is the transfer
                which performed the chargeback.
              allOf:
                - $ref: '#/components/schemas/Transfer'
            paymentRequestPermissions:
              description: >-
                Permissions the user has over this payment request.
              allOf:
                - $ref: '#/components/schemas/PaymentRequestPermissions'
            comments:
              description: >-
                Only returned if the `kind` is either `paymentRequest` or
                `externalPayment`. The comments the user informed when performing
                the payment.
              type: string
            expirationDate:
              description: >-
                Only returned if the `kind` is either `paymentRequest`,
                `externalPayment` or `ticket`. The deadline for the payment to be
                processed.  In case of `externalPayment` if no user is registered
                with either e-mail or mobile phone matching, it is canceled. The
                same is done in case of `ticket` if it is not accepted by any user.
              type: string
              format: date-time
            changeExpirationDateComments:
              description: >-
                Only returned if the `kind` is
                `paymentRequest`. The comments the user
                informed when changing the expiration date.
              type: string
            processDate:
              description: >-
                Only returned if the `kind` is either `paymentRequest`, `ticket` or
                `externalPayment` and `status` is `processed`. The date the payment
                request / ticket was accepted.
              type: string
              format: date-time
            transaction:
              description: >-
                Only returned if the `kind` is `paymentRequest`, `ticket` or
                `externalPayment`  and `status` is `processed`. Reference to the
                transaction that was generated when processing this payment request
                / externalPayment / ticket.
              allOf:
                - $ref: '#/components/schemas/Transaction'
            smsCode:
              description: >-
                Only returned if the `kind` is either `paymentRequest` and `status`
                is not `processed`. The code that can be used by the receiver to
                confirm this payment request via SMS operation.
              type: string
            scheduled:
              description: >-
                See the documentation of `scheduling` instead.



                Only returned if the `kind` is `paymentRequest`. Indicates whether a
                scheduled payment (`true`)  will be generated once this payment
                request is confirmed.
              deprecated: true
              x-remove-version: 4.14
              type: boolean
            scheduling:
              description: >-
                Only returned if the `kind` is `paymentRequest`. Indicates whether
                the generated payment will be a scheduled, recurring or regular
                payment once this payment request is confirmed.
              allOf:
                - $ref: '#/components/schemas/PaymentRequestSchedulingEnum'
            installmentsCount:
              description: >-
                Only returned if the `kind` is `paymentRequest` and `scheduled` is
                `true`. Indicates the number of installments to be generated.
              type: integer
            firstInstallmentIsImmediate:
              description: >-
                Only returned if the `kind` is `paymentRequest` and `scheduled` is
                `true`. Indicates whether the first installment should be processed
                immediately when the payment request is confirmed.
              type: boolean
            firstOccurrenceIsImmediate:
              description: >-
                Only returned if the `kind` is `paymentRequest` and `scheduling` is
                `recurring`. Indicates whether
                the first occurrence should be processed immediately when the
                payment request is confirmed.
              type: boolean
            toPrincipalType:
              description: >-
                Only returned if the `kind` is `externalPayment`. Is the user
                identification method for this external payment (for example, e-mail
                or mobile phone).
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            toPrincipalValue:
              description: >-
                Only returned if the `kind` is `externalPayment`. Is the user
                identification value for this external payment (for example, the
                e-mail or mobile phone values).
              type: string
            payerPrincipal:
              description: >-
                Only returned if the `kind` is `ticket`, the ticket status is `open`
                and there is a fixed payer. Is the principal (for example, login
                name or e-mail) which can be used to login the user, so he can
                accept the ticket.
              type: string
            cancelUrl:
              description: >-
                Only returned if the `kind` is `ticket`. The URL to redirect when
                canceling the ticket.
              type: string
            successUrl:
              description: >-
                Only returned if the `kind` is `ticket`. The URL to redirect after
                successfully accepting a ticket
              type: string
            preview:
              description: >-
                Only returned if the `kind` is `ticket` and the ticket can be
                accepted. Is the payment preview if accepting the ticket. The
                preview will never contain a confirmation password input, because
                this object already contains it on the `confirmationPasswordInput`
                property, neither a payment to be sent back, as this payment is
                supposed to be confirmed by accepting the ticket. Also, the
                preview's currency is never sent, as it is the same one of the
                ticket.
              allOf:
                - $ref: '#/components/schemas/PaymentPreview'
            usersWhichCanAddToContacts:
              $ref: '#/components/schemas/TransactionSubjectsEnum'
            usersWhichCanViewProfile:
              $ref: '#/components/schemas/TransactionSubjectsEnum'
            authorizationType:
              $ref: '#/components/schemas/TransactionAuthorizationTypeEnum'
            scheduledPaymentStatus:
              $ref: '#/components/schemas/ScheduledPaymentStatusEnum'
            recurringPaymentStatus:
              $ref: '#/components/schemas/RecurringPaymentStatusEnum'
            paymentRequestStatus:
              $ref: '#/components/schemas/PaymentRequestStatusEnum'
            externalPaymentStatus:
              $ref: '#/components/schemas/ExternalPaymentStatusEnum'
            ticketStatus:
              $ref: '#/components/schemas/TicketStatusEnum'
            exportFormats:
              description: >-
                The formats which the data can be exported
              type: array
              items:
                $ref: '#/components/schemas/ExportFormat'


    Transfer:
      description: >-
        Reference to a balance transfer between accounts
      allOf:
        - $ref: '#/components/schemas/Trans'
        - type: object
          properties:
            statuses:
              description: >-
                Contains the current status for each status flow this transfer has
              type: array
              items:
                $ref: '#/components/schemas/TransferStatus'

    TransferDataForSearch:
      description: >-
        Contains data for searching transfers over multiple accounts
      allOf:
        - $ref: '#/components/schemas/BaseTransferDataForSearch'
        - type: object
          properties:
            accountTypes:
              description: >-
                References for the account types
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            currencies:
              description: >-
                References for the available currencies
              type: array
              items:
                $ref: '#/components/schemas/Currency'
            query:
              description: >-
                Default query filters for the general transfers search
              allOf:
                - $ref: '#/components/schemas/TransferQueryFilters'

    TransferFeePreview:
      description: >-
        Preview of a transfer fee in case a payment is confirmed
      type: object
      properties:
        fee:
          description: >-
            The transfer fee
          allOf:
            - $ref: '#/components/schemas/EntityReference'
        amount:
          description: >-
            The transfer fee amout
          type: string
          format: number

    TransferFilter:
      description: >-
        Reference to a transfer filter
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            accountType:
              description: >-
                Reference to the account type
              allOf:
                - $ref: '#/components/schemas/EntityReference'

    TransferQueryFilters:
      description: >-
        Query filters for transfers
      allOf:
        - $ref: '#/components/schemas/BaseTransferQueryFilters'
        - type: object
          properties:
            currency:
              description: >-
                DEPRECATED: Use `currencies` instead.


                Either id or internal name of the currency
              deprecated: true
              x-remove-version: 4.15
              type: string
            currencies:
              description: >-
                Either ids or internal names of the currency
              type: array
              items:
                type: string

            fromAccountType:
              description: >-
                DEPRECATED: Use `fromAccountTypes` instead.


                Either ids or internal names of the origin account type
              deprecated: true
              x-remove-version: 4.15
              type: string
            fromAccountTypes:
              description: >-
                Either ids or internal names of the origin account type
              type: array
              items:
                type: string

            toAccountType:
              description: >-
                DEPRECATED: Use `toAccountTypes` instead.


                Either ids or internal names of the destination account type
              deprecated: true
              x-remove-version: 4.15
              type: string
            toAccountTypes:
              description: >-
                Either ids or internal names of the destination account type
              type: array
              items:
                type: string


    TransferResult:
      description: >-
        Result from searching transfers
      allOf:
        - $ref: '#/components/schemas/Transfer'
        - type: object

    TransferStatus:
      description: >-
        Reference to a status and its flow
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            flow:
              description: >-
                The status flow
              allOf:
                - $ref: '#/components/schemas/EntityReference'

    TransferStatusFlow:
      description: >-
        A transfer status flow determines a status a transfer may have. For each
        flow the transfer participates (can be multiple) the transfer will have a
        status. The transition between states is also defined on the flow.
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            statuses:
              description: >-
                All statuses this flow has
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'

    TransferStatusFlowForTransferView:
      description: >-
        Contains other data for a transfer status flow when viewing a transfer.
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            canManage:
              description: >-
                Can this status flow be managed by the authenticated user?
              type: boolean
            log:
              description: >-
                A log of status changes for this flow
              type: array
              items:
                $ref: '#/components/schemas/TransferStatusLog'

    TransferStatusLog:
      description: >-
        Details of a change that took place in a transfer status.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            by:
              description: >-
                The user that performed the change
              allOf:
                - $ref: '#/components/schemas/User'
            date:
              description: >-
                The date / time the action was performed
              type: string
              format: date-time
            status:
              description: >-
                The new status
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            comments:
              description: >-
                Comments provided by the user which performed the change
              type: string

    TransferType:
      description: >-
        Reference to a transfer type
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            from:
              description: >-
                Reference to the source account type
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            to:
              description: >-
                Reference to the destination account type
              allOf:
                - $ref: '#/components/schemas/EntityReference'

    TransferTypeWithCurrency:
      description: >-
        A transfer type with currency
      allOf:
        - $ref: '#/components/schemas/TransferType'
        - type: object
          properties:
            currency:
              $ref: '#/components/schemas/Currency'

    TransferView:
      description: >-
        Details about a balance transfer between accounts
      allOf:
        - $ref: '#/components/schemas/Transfer'
        - type: object
          properties:
            parent:
              description: >-
                Reference to the parent transfer that generated this one, if any
              allOf:
                - $ref: '#/components/schemas/Transfer'
            children:
              description: >-
                Reference to the transfers generated by this one, if any
              type: array
              items:
                $ref: '#/components/schemas/Transfer'
            chargedBackBy:
              description: >-
                Reference to the transfer that has charged back this transfer. Only
                returned if this transfer has been charged back.
              allOf:
                - $ref: '#/components/schemas/Transfer'
            chargebackOf:
              description: >-
                Reference to the transfer that this transfer has charged back. Only
                returned if this transfer is a chargeback.
              allOf:
                - $ref: '#/components/schemas/Transfer'
            transaction:
              description: >-
                If this balance transfer was originated from a transaction (like a
                payment or scheduled payment), contains the reference to this
                transaction. Only returned if this `TransferView` is not already in
                a `TransactionView`.
              allOf:
                - $ref: '#/components/schemas/TransactionView'
            ARate:
              description: >-
                The balance aging counter
              type: string
              format: number
            DRate:
              description: >-
                The balance maturity
              type: string
              format: number
            statusFlows:
              description: >-
                List with each status this transfer has, with additional
                information, such as the flow and the log
              type: array
              items:
                $ref: '#/components/schemas/TransferStatusFlowForTransferView'
            canChargeback:
              description: >-
                Can the authenticated user chargeback this transfer?
              type: boolean
            operations:
              description: >-
                The list of custom operations the logged user can run over this
                transfer
              type: array
              items:
                $ref: '#/components/schemas/Operation'
            confirmationPasswordInput:
              description: >-
                If a confirmation password is used, contains the definitions on how to
                request that password from the user. This confirmation password is required
                when performing sensible actions. Sometimes this is dynamic, for example,
                the confirmation might be configured to be used only once per session, or
                operations like payments may have a limit per day to be without confirmation
                (pinless).
              allOf:
                - $ref: '#/components/schemas/PasswordInput'
            usersWhichCanAddToContacts:
              $ref: '#/components/schemas/TransactionSubjectsEnum'
            usersWhichCanViewProfile:
              $ref: '#/components/schemas/TransactionSubjectsEnum'
            exportFormats:
              description: >-
                The formats which the data can be exported
              type: array
              items:
                $ref: '#/components/schemas/ExportFormat'


    UIElementWithContent:
      description: >-
        Contains definitions for a UI element that has a content
      allOf:
        - $ref: '#/components/schemas/VersionedEntity'
        - type: object
          properties:
            content:
              description: >-
                The content of this element
              type: string

    UnauthorizedError:
      description: >-
        Error returned when a HTTP status code 401 occurs
      type: object
      properties:
        missingSecondaryPassword:
          description: >-
            May only returned when `code` is `login` and
            there is a login confirmation with password defined for the channel.
          allOf:
            - $ref: '#/components/schemas/PasswordType'
        secondaryDeviceAllowed:
          description: >-
            Whether confirmations with device are allowed or not.   May only
            returned when `code` is `login` and there is
            a login confirmation defined for the channel.
          type: boolean
        code:
          $ref: '#/components/schemas/UnauthorizedErrorCode'
        userStatus:
          description: >-
            May only returned when `code` is `login`.
          allOf:
            - $ref: '#/components/schemas/UserStatusEnum'
        passwordStatus:
          description: >-
            May only returned when `code` is `login`.
          allOf:
            - $ref: '#/components/schemas/PasswordStatusEnum'

    User:
      description: >-
        Basic representation of a user (both admin and regular)
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            display:
              type: string
              description: >-
                Contains the formatting of the user according to the configuration.
                Is only returned if no profile fields are marked to return in user
                list.
            shortDisplay:
              type: string
              description: >-
                Contains the short formatting of the user according to the
                configuration. Is only returned if no profile fields are marked to
                return in user list
            image:
              description: >-
                The primary user profile image
              allOf:
                - $ref: '#/components/schemas/Image'
            user:
              description: >-
                Is the operator owner, only returned if this user represents an
                operator. Even so, in some cases, like searching for operators of a
                specific user, this field may not be returned.
              allOf:
                - $ref: '#/components/schemas/User'

    UserAccountBalanceLimitsListData:
      description: >-
        Data regarding the lower and upper limits of a user's accounts.
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        accountLimits:
          description: The balance limits for each account
          type: array
          items:
            $ref: '#/components/schemas/AccountBalanceLimitsResult'

    UserAdInterestsListData:
      description: >-
        Contains, besides the user's advertisement interests, additional data for its
        management
      type: object
      properties:
        canManage:
          description: >-
            Indicates whether the advertisement interests can be managed by the
            authenticated user
          type: boolean
        canCreate:
          description: >-
            Indicates whether the authenticated user can create a new delivery
            method this user
          type: boolean
        adInterests:
          description: >-
            The advertisement interests list
          type: array
          items:
            $ref: '#/components/schemas/AdInterest'

    UserAddressesListData:
      description: >-
        Contains, besides the user's addresses, additional data for its management
      type: object
      properties:
        canManage:
          description: >-
            Indicates whether the addresses can be managed by the authenticated user
          type: boolean
        canCreate:
          description: >-
            Indicates whether the authenticated user can create a new address for
            this user
          type: boolean
        maxAddresses:
          description: >-
            Indicates the maximum number of addresses the user can have
          type: integer
        addresses:
          description: >-
            The address list
          type: array
          items:
            $ref: '#/components/schemas/AddressResult'
        availability:
          $ref: '#/components/schemas/AvailabilityEnum'

    UserAdsDataForSearch:
      description: >-
        Data for a search of advertisements of a specific user
      allOf:
        - $ref: '#/components/schemas/BaseAdDataForSearch'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            createNew:
              description: >-
                Indicates whether the authenticated user can create new
                advertisements for this user
              type: boolean
            maxAds:
              description: >-
                The maximum number of advertisements this user can have
              type: integer
            requiresAuthorization:
              description: >-
                Does advertisements of this user requires authorization to be
                published for other users to see?
              type: boolean
            query:
              description: >-
                Default query filters to search advertisements of a specific user
              allOf:
                - $ref: '#/components/schemas/UserAdsQueryFilters'

    UserAdsQueryFilters:
      description: >-
        Definitions for search filters of advertisements of a given owner search
      allOf:
        - $ref: '#/components/schemas/BasicAdQueryFilters'
        - type: object

    UserAlert:
      description: >-
        An alert for a specific user
      allOf:
        - $ref: '#/components/schemas/Alert'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/UserAlertTypeEnum'
            user:
              $ref: '#/components/schemas/User'


    UserAlertDataForSearch:
      description: >-
        Contains data for searching user alerts
      type: object
      properties:
        groups:
          description: >-
            The groups the authenticated user can use to filter users.
          type: array
          items:
            $ref: '#/components/schemas/Group'
        query:
          $ref: '#/components/schemas/UserAlertQueryFilters'

    UserAlertQueryFilters:
      description: >-
        Query filters for searching user alerts
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            datePeriod:
              description: >-
                The minimum / maximum alert date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            types:
              description: >-
                The types of user alerts to search
              type: array
              items:
                $ref: '#/components/schemas/UserAlertTypeEnum'
            groups:
              description: >-
                Either the ids or internal names of the alert user
              type: array
              items:
                type: string
            brokers:
              description: >-
                Either the ids or identification methods the alert user's brokers
              type: array
              items:
                type: string
            user:
              description: Either the id or identifier of the alert user
              type: string

    UserAuth:
      description: >-
        Contains information returned after logging in an user.
      allOf:
        - $ref: '#/components/schemas/BaseAuth'
        - type: object
          properties:
            configuration:
              description: >-
                The current configuration
              allOf:
                - $ref: '#/components/schemas/VersionedEntityReference'
            group:
              $ref: '#/components/schemas/Group'

    UserAuthorizedPaymentsPermissions:
      description: >-
        Permissions for authorized payments over a user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated administrator or broker view authorized
            payments of the given user?
          type: boolean

    UserBalanceLimitsPermissions:
      description: >-
        Permissions regarding the account balance limits of a given user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated user view the balance limits of the user?
          type: boolean

    UserBaseAdPermissions:
      description: >-
        Permissions over advertisements of other users
      type: object
      properties:
        view:
          description: >-
            Can view advertisements of others?
          type: boolean
        manage:
          description: >-
            Can manage advertisements of others? Only returned if there is an authenticated user.
          type: boolean
        viewPending:
          description: >-
            Can view pending advertisements of others? Only returned if there is an authenticated manager with permissions
          type: boolean
        managePending:
          description: >-
            Can manage pending advertisements of others? Only returned if there is an authenticated manager with permissions
          type: boolean
        purchase:
          description: >-
            Can purchase webshop ads? Only returned if there is an authenticated user.
            It is false for simple ads.
          type: boolean



    UserBasicData:
      description: >-
        Contains properties shared by both UserDataForNew and UserDataForEdit
      type: object
      properties:
        emailRequired:
          description: >-
            Indicates whether the e-mail is required
          type: boolean
        profileFieldActions:
          description: >-
            An object, keyed by profile field internal name (either one of the basic
            profile fields or custom fields), containing other objects that defines
            the allowed actions over these profile fields
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ProfileFieldActions'
        customFields:
          description: >-
            The available custom field definitions
          type: array
          items:
            $ref: '#/components/schemas/UserCustomFieldDetailed'

    UserBrokeringPermissions:
      description: >-
        Permissions regarding the user's brokers and brokered users
      type: object
      properties:
        viewBrokers:
          description: >-
            Can the authenticated user view the brokers of this user?
          type: boolean
        viewMembers:
          description: >-
            Can the authenticated user view the assigned members of this broker?
          type: boolean

    UserBrokersData:
      description: >-
        Contains the current user brokers, as well as other information
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        brokers:
          description: >-
            Brokers currently assigned, together with additional information
          type: array
          items:
            $ref: '#/components/schemas/Brokering'
        editable:
          description: >-
            Can the authenticated user manage brokers of this user?
          type: boolean
        history:
          description: >-
            Contains the history entries for all brokering changes
          type: array
          items:
            $ref: '#/components/schemas/BrokeringLog'


    UserClientTypePermissions:
      description: >-
        Contains details of an access client, together with permissions over it
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            canManage:
              description: >-
                Can the authenticated user manage access clients of this type?
              type: boolean
            canCreateNew:
              description: >-
                Can the authenticated user create a new access client of this type
                and user? Maybe the maximum allowed has been reached.
              type: boolean
            hasUnassigned:
              description: >-
                Is there at least one access client for this type and user which is
                in the unassigned status?
              type: boolean

    UserContactInfosListData:
      description: >-
        Contains, besides the user's additional contact informations, data for
        managing them
      type: object
      properties:
        canManage:
          description: >-
            Indicates whether the additional contact informations can be managed by
            the authenticated user
          type: boolean
        canCreate:
          description: >-
            Indicates whether new additional contact informations can be created by
            the authenticated user
          type: boolean
        maxContactInfos:
          description: >-
            Indicates the maximum number of additional contact informations the user
            can have
          type: integer
        customFields:
          description: >-
            The list of additional contact informations custom fields
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        contactInfos:
          description: >-
            The additional contact information list
          type: array
          items:
            $ref: '#/components/schemas/ContactInfoResult'
        availability:
          $ref: '#/components/schemas/AvailabilityEnum'

    UserContactPermissions:
      description: >-
        Permissions regarding the contact list
      type: object
      properties:
        add:
          description: >-
            Can the current user be added to the contact list?
          type: boolean
        remove:
          description: >-
            Can the current user be removed from the contact list?
          type: boolean

    UserCustomFieldDetailed:
      description: >-
        Adds to `CustomFieldDetailed` some user-specific definitions
      allOf:
        - $ref: '#/components/schemas/CustomFieldDetailed'
        - type: object
          properties:
            hiddenByDefault:
              description: >-
                This flag determine whether this field is hidden or not by default
              type: boolean

    UserCustomFieldValue:
      description: >-
        Contains the custom field value information, plus the hidden flag
      allOf:
        - $ref: '#/components/schemas/CustomFieldValue'
        - type: object
          properties:
            hidden:
              type: boolean
              description: >-
                Whether this field is hidden for other users

    UserDataForEdit:
      description: >-
        Contains data used to edit a user profile
      allOf:
        - $ref: '#/components/schemas/UserBasicData'
        - type: object
          properties:
            details:
              description: >-
                Additional details to the user being edited
              allOf:
                - $ref: '#/components/schemas/User'
            user:
              description: >-
                The object that can be altered and posted back to save the
                user / operator
              allOf:
                - $ref: '#/components/schemas/UserEdit'
            role:
              $ref: '#/components/schemas/RoleEnum'

            emailPendingValidation:
              description: >-
                The new e-mail address, which is still pending validation. Is only
                returned when e-mail validation is enabled for edit profile, and the
                user has changed the e-mail address.
              type: string
            binaryValues:
              description: >-
                Holds the current values for file / image custom fields as lists of
                `StoredFile`s / `Image`s.
              allOf:
                - $ref: '#/components/schemas/CustomFieldBinaryValues'
            confirmationPasswordInput:
              description: >-
                If a confirmation password is used, contains the definitions on how to
                request that password from the user. This confirmation password is required
                when performing sensible actions. Sometimes this is dynamic, for example,
                the confirmation might be configured to be used only once per session, or
                operations like payments may have a limit per day to be without confirmation
                (pinless).
              allOf:
                - $ref: '#/components/schemas/PasswordInput'

    UserDataForMap:
      description: >-
        Contains configuration data for the user directory (map)
      allOf:
        - $ref: '#/components/schemas/UserDataForSearch'
        - type: object
          properties:
            mapDirectoryField:
              description: >-
                Internal name of the custom field currently set as primary search
                filter for the user directory (map) search. When not returned (null)
                it is assumed that keywords should be the primary filter.
              type: string
            defaultMapLocation:
              description: >-
                The default location for the map to be displayed
              allOf:
                - $ref: '#/components/schemas/GeographicalCoordinate'
            defaultMapZoomMobile:
              description: >-
                The default map zoom level for mobile applications
              type: integer
            defaultMapZoomWeb:
              description: >-
                The default map zoom level for web applications
              type: integer

    UserDataForNew:
      description: >-
        Contains data used to register a user
      allOf:
        - $ref: '#/components/schemas/BasicUserDataForNew'
        - type: object
          properties:
            group:
              description: >-
                Details of the registration group.
              allOf:
                - $ref: '#/components/schemas/GroupForRegistration'
            broker:
              description: >-
                When the user registration is requested with a broker, contains the
                broker details.
              allOf:
                - $ref: '#/components/schemas/User'
            addressConfiguration:
              $ref: '#/components/schemas/AddressConfigurationForUserProfile'
            contactInfoConfiguration:
              $ref: '#/components/schemas/ContactInfoConfigurationForUserProfile'
            imageConfiguration:
              $ref: '#/components/schemas/ImageConfigurationForUserProfile'
            user:
              description: >-
                The object that can be altered and posted back to register the user
              allOf:
                - $ref: '#/components/schemas/UserNew'
            agreements:
              description: >-
                The agreements that needs to be accepted by the user to be able to
                register. Only returned for public registrations.
              type: array
              items:
                $ref: '#/components/schemas/AgreementContent'
            securityQuestions:
              description: >-
                If enabled in the server, are the possible security questions the
                user can use to set the answer.
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            nfcTokenTypes:
              description: >-
                The NFC token types the authenticated user can parsonalize tags for
                the user being registered
              type: array
              items:
                $ref: '#/components/schemas/EntityReference'
            captchaType:
              description: >-
                The captcha provider used to requested a captcha for registration,
                or null if no captcha is needed.
              allOf:
                - $ref: '#/components/schemas/CaptchaProviderEnum'

    UserDataForSearch:
      description: >-
        Contains data with the configuration for searching users
      allOf:
        - $ref: '#/components/schemas/BaseUserDataForSearch'
        - type: object
          properties:
            broker:
              description: >-
                When a `broker` parameter was set when getting the data, contains
                the details of the broker
              allOf:
                - $ref: '#/components/schemas/User'
            fieldsInList:
              description: >-
                The internal names of either basic or custom profile fields that are
                configured to be shown on the list. This actually defines the fields
                that will be loaded on the result. It is possible that no fields are
                configured to be returned on list. In this case, the result objects
                will have the 'display' property loaded with what is configured to
                be the user formatting field(s).
              type: array
              items:
                type: string
            groupsForRegistration:
              description: >-
                Possible groups an administrator or broker can use to register users
              type: array
              items:
                $ref: '#/components/schemas/Group'
            query:
              description: >-
                Default query filters to search users
              allOf:
                - $ref: '#/components/schemas/UserQueryFilters'
            statuses:
              description: >-
                The possible user statuses the authenticated user can use to filter
                the search. Only administrators or brokers over their members can
                filter by status (also depends on permissions)
              type: array
              items:
                $ref: '#/components/schemas/UserStatusEnum'

    UserDeliveryMethodsListData:
      description: >-
        Contains, besides the user's delivery methods, additional data for its
        management
      type: object
      properties:
        canManage:
          description: >-
            Indicates whether the delivery methods can be managed by the
            authenticated user
          type: boolean
        canCreate:
          description: >-
            Indicates whether the authenticated user can create a new delivery
            method this user
          type: boolean
        deliveryMethods:
          description: >-
            The delivery methods list
          type: array
          items:
            $ref: '#/components/schemas/DeliveryMethod'

    UserDocumentsPermissions:
      description: >-
        Permissions regarding the documents of a given user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated user view the documents of this user?
          type: boolean
        count:
          description: >-
            The number of documents for this user
          type: integer

    UserEdit:
      description: >-
        Contains data used to edit a user / operator profile fields.
        Operators are always "hidden", so the `hiddenFields` property
        don't apply to them.
      allOf:
        - $ref: '#/components/schemas/UserManage'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    UserExternalPaymentsPermissions:
      description: >-
        Permissions for external payments over a user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated administrator or broker view external
            payments of the given user?
          type: boolean

    UserGroupPermissions:
      description: >-
        Permissions regarding the group membership of a given user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated user view the group membership of a given user?
          type: boolean

    UserLocale:
      description: >-
        Defines the user's language and region
      allOf:
        - $ref: '#/components/schemas/NamedEntity'
        - type: object
          properties:
            code:
              type: string
              description: >-
                Country code used to specify user's language

    UserManage:
      x-abstract: true
      description: >-
        Contains the fields for either creating or modifying a user
      allOf:
      - $ref: '#/components/schemas/BasicUserManage'
      - type: object
        properties:
          hiddenFields:
            type: array
            items:
              type: string
            description: >-
              An array with the internal names of either the basic or custom fields
              that should be hidden from other users. Currently the only basic profile
              field that can be hidden is email. Any other will be considered a custom
              field, and should be the same key as used in the 'customValues'
              property.

    UserMarketplacePermissions:
      description: >-
        Permissions over a user marketplace
      type: object
      properties:
        simple:
          description: >-
            Permissions over simple advertisements
          $ref: '#/components/schemas/UserBaseAdPermissions'
        webshop:
          description: >-
            Permissions over webshop ads
          $ref: '#/components/schemas/UserWebshopPermissions'

        viewAdvertisements:
          description: >-
            Use `simple.view` instead



            Can view simple advertisements?
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        manageAdvertisements:
          description: >-
            Use `simple.manage` instead



            Can manage simple advertisements?
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        viewWebshop:
          description: >-
            Use `webshop.view` instead



            Can view webshop advertisements?
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        manageWebshop:
          description: >-
            Use `webshop.manage` instead



            Can manage webshop advertisements?
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        viewPurchases:
          description: >-
            Use `webshop.viewPurchases` instead



            Can view the purchases?
          deprecated: true
          x-remove-version: 4.15
          type: boolean
        viewSales:
          description: >-
            Use `webshop.viewSales` instead



            Can view the sales?
          deprecated: true
          x-remove-version: 4.15
          type: boolean

    UserNew:
      description: >-
        Contains data used to register a user. All basic profile fields (full name,
        login name, e-mail, phones, addresses and image) can be enabled or disabled
        on Cyclos, via products. Also, the available custom fields and whether they
        can be hidden depend on the products the selected group has.
      x-implements: IBasicUserNew
      allOf:
        - $ref: '#/components/schemas/UserManage'
        - type: object
          properties:
            group:
              type: string
              description: >-
                The initial user group
            broker:
              type: string
              description: >-
                Either the identifier or other identification value (login name,
                e-mail, etc) of the broker for the new user.
                Only allowed if logged-in as administrator with permission.
            mobilePhones:
              type: array
              items:
                $ref: '#/components/schemas/PhoneNew'
              description: >-
                Mobile phones to be registered together with the user
            landLinePhones:
              type: array
              items:
                $ref: '#/components/schemas/PhoneNew'
              description: >-
                Land-line phones to be registered together with the user
            passwords:
              type: array
              items:
                $ref: '#/components/schemas/PasswordRegistration'
              description: >-
                The initial passwords of the user
            skipActivationEmail:
              type: boolean
              description: >-
                When set to true, the activation e-mail is not sent to the
                registered user. Can only be used when an administrator / broker is
                registering a user, and ignored on public registrations (the e-mail
                is always sent on public registrations).
            addresses:
              type: array
              items:
                $ref: '#/components/schemas/AddressNew'
              description: >-
                Addresses to be registered together with the user
            contactInfos:
              type: array
              items:
                $ref: '#/components/schemas/ContactInfoNew'
              description: >-
                Additional contacts to be registered together with the user
            images:
              type: array
              items:
                type: string
              description: >-
                The ids of previously uploaded user temporary images to be initially
                used as profile images
            captcha:
              type: object
              description: >-
                The captcha response is required on public registrations, and
                ignored when administrators / brokers register another user.
              allOf:
                - $ref: '#/components/schemas/CaptchaResponse'
            acceptAgreement:
              type: boolean
              description: >-
                When there are agreements that need to be accepted for registration,
                this property must be passed with the value true
            asMember:
              type: boolean
              description: >-
                Flag required only when the authenticated user is a broker, in that
                case we need to distingish between registering as member or broker.
                If true then the new user will be registered without a brokering
                relationship. Otherwise the authenticated user will be set as the
                broker of the new user.
            securityQuestion:
              type: string
              description: >-
                If the server is configured to use security question, is the
                `internalName` of the question present in the result of
                `data-for-new`, in the `securityQuestions` property. Is optional and
                only used in public registration.
            securityAnswer:
              type: string
              description: >-
                If a `securityQuestion` is informed, this is the answer. Required in
                this case. Only used in public registration.
            nfcToken:
              type: object
              description: >-
                If not null then the given NFC token parameters will be used to
                personalize a tag for the user.
              allOf:
                - $ref: '#/components/schemas/NfcTokenWithChallengeParameter'

    UserNotificationSettingsPermissions:
      description: >-
        Permissions regarding the notification settings of a given user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated user view the notification settings of a given user?
          type: boolean

    UserOperatorGroupsListData:
      description: >-
        Contains, besides the user's operator groups, additional data for
        their management
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        canManage:
          description: >-
            Indicates whether the operator groups can be managed by the authenticated user
          type: boolean
        canCreate:
          description: >-
            Indicates whether the authenticated user can create a new operator groups for
            this user
          type: boolean
        operatorGroups:
          description: >-
            The operator groups list
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'

    UserOperatorsDataForSearch:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        canCreateNew:
          description: >-
            Indicates whether the authenticated user can create more operators for
            the specified user.
          type: boolean
        groups:
          description: >-
            The operator groups this user owns
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        fieldsInList:
          description: >-
            The internal names of either basic or custom profile fields that are
            configured to be shown on the list. This actually defines the fields
            that will be loaded on the result. It is possible that no fields are
            configured to be returned on list. In this case, the result objects will
            have the 'display' property loaded with what is configured to be the
            user formatting field(s).
          type: array
          items:
            type: string
        basicFields:
          description: >-
            The basic profile fields in the result list
          type: array
          items:
            $ref: '#/components/schemas/BasicProfileFieldInput'
        customFields:
          description: >-
            The custom profile fields in the result list
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        query:
          description: >-
            Default query filters to search a user's operators
          allOf:
            - $ref: '#/components/schemas/UserOperatorsQueryFilters'

    UserOperatorsPermissions:
      description: >-
        Permissions regarding the user's operators and operator groups
      type: object
      properties:
        viewOperators:
          description: >-
            Can the authenticated user view the operators of this user?
          type: boolean
        viewGroups:
          description: >-
            Can the authenticated user view the operator groups of this user?
          type: boolean

    UserOperatorsQueryFilters:
      description: >-
        Definitions for a user's operators search filters
      allOf:
        - $ref: '#/components/schemas/BasicOperatorQueryFilters'
        - type: object
          properties:
            ignoreProfileFieldsInList:
              type: boolean
              description: >-
                When set to `true`, instead of returning users with corresponding
                profile fields set on list, will return them with `display` and
                `shortDisplay`.
            operatorGroups:
              description: >-
                An array of operator group ids
              type: array
              items:
                type: string

    UserOrderResult:
      description: >-
        Data of an order as returned on list associated to an user.
      allOf:
        - $ref: '#/components/schemas/OrderResult'
        - type: object
          properties:
            relatedUser:
              description: >-
                The other related user, i.e if we're listing the sales of a user
                then it represents the buyer. Otherwise (purchases) the seller.
              allOf:
                - $ref: '#/components/schemas/User'

    UserPasswordsPermissions:
      description: >-
        Permissions over passwords of a given user
      type: object
      properties:
        manage:
          description: >-
            Can the authenticated administrator or broker manage the password(s)
            of the given user?
          type: boolean
        resetSecurityQuestion:
          description: >-
            Can the authenticated administrator or broker reset the user's
            security question, so that the user can set it again?
          type: boolean

    UserPaymentPermissions:
      description: >-
        Permissions for payments regarding a user
      type: object
      properties:
        asUserToSelf:
          description: >-
            Can the authenticated administrator or broker perform a payment in
            behalf of this user to another account belonging to the same user?
          type: boolean
        asUserToSystem:
          description: >-
            Can the authenticated administrator or broker perform a payment in
            behalf of this user to a system account?
          type: boolean
        asUserToUser:
          description: >-
            Can the authenticated administrator or broker perform a payment in
            behalf of this user to another user?
          type: boolean
        systemToUser:
          description: >-
            Can the authenticated administrator perform a payment from a system
            account to this user?
          type: boolean
        userToUser:
          description: >-
            Can the authenticated member perform a payment from an himself to this
            user?
          type: boolean

    UserPaymentRequestsPermissions:
      description: >-
        Permissions for payment requests over a user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated administrator or broker view payment
            requests of the given user?
          type: boolean
        sendFromSystem:
          description: >-
            Can the authenticated administrator send a payment request from
            system to the given user?
          type: boolean
        sendFromUser:
          description: >-
            Can the authenticated user send a payment request to the given user?
          type: boolean
        sendAsUserToUser:
          description: >-
            Can the authenticated administrator or broker send payment requests
            in behalf of the given user to other users?
          type: boolean
        sendAsUserToSystem:
          description: >-
            Can the authenticated administrator or broker send payment requests
            in behalf of the given user to system?
          type: boolean

    UserPermissions:
      description: >-
        Determines permission the authenticated have over a specific user
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserProfilePermissions'
        passwords:
          $ref: '#/components/schemas/UserPasswordsPermissions'
        validation:
          $ref: '#/components/schemas/UserValidationPermissions'
        contact:
          $ref: '#/components/schemas/UserContactPermissions'
        brokering:
          $ref: '#/components/schemas/UserBrokeringPermissions'
        operators:
          $ref: '#/components/schemas/UserOperatorsPermissions'
        marketplace:
          $ref: '#/components/schemas/UserMarketplacePermissions'
        group:
          $ref: '#/components/schemas/UserGroupPermissions'
        status:
          $ref: '#/components/schemas/UserStatusPermissions'
        accounts:
          description: >-
            Accounts which can be viewed by the authenticated user
          type: array
          items:
            $ref: '#/components/schemas/AccountWithCurrency'
        balanceLimits:
          $ref: '#/components/schemas/UserBalanceLimitsPermissions'
        payment:
          $ref: '#/components/schemas/UserPaymentPermissions'
        scheduledPayments:
          $ref: '#/components/schemas/UserScheduledPaymentsPermissions'
        recurringPayments:
          deprecated: true
          x-remove-version: 4.15
          description: >-
            DEPRECATED: As of Cyclos 4.13, the recurring payments permissions
            are the same as scheduled payments.
            Use `scheduledPayments` instead.

          $ref: '#/components/schemas/UserScheduledPaymentsPermissions'
        paymentRequests:
          $ref: '#/components/schemas/UserPaymentRequestsPermissions'
        authorizedPayments:
          $ref: '#/components/schemas/UserAuthorizedPaymentsPermissions'
        tickets:
          $ref: '#/components/schemas/UserTicketsPermissions'
        externalPayments:
          $ref: '#/components/schemas/UserExternalPaymentsPermissions'
        records:
          description: >-
            Records types the authenticated user can view over the given user
          type: array
          items:
            $ref: '#/components/schemas/OwnerRecordPermissions'
        documents:
          $ref: '#/components/schemas/UserDocumentsPermissions'
        session:
          $ref: '#/components/schemas/UserSessionPermissions'
        operations:
          description: >-
            Custom operations the authenticated user can run over the given user
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        tokens:
          description: >-
            Permissions over tokens of each visible type.
          type: array
          items:
            $ref: '#/components/schemas/TokenPermissions'
        personalizeNfcTokens:
          deprecated: true
          x-remove-version: 4.15
          description: >-
            DEPRECATED: Filter the `tokens` list with
            `type.physicalType = 'nfcTag'` and `activate = true`.


            NFC tokens the authenticated user can personalize for the given user
          type: array
          items:
            $ref: '#/components/schemas/TokenType'
        vouchers:
          $ref: '#/components/schemas/UserVouchersPermissions'
        notificationSettings:
          $ref: '#/components/schemas/UserNotificationSettingsPermissions'

    UserPhonesListData:
      description: >-
        Contains information for a list of phones
      type: object
      properties:
        canManage:
          description: >-
            Can the authenticated user manage phones of this user?
          type: boolean
        canCreateLandLine:
          description: >-
            Can the authenticated user create new land-line phones for this user?
          type: boolean
        canCreateMobile:
          description: >-
            Can the authenticated user create new mobile phones for this user?
          type: boolean
        smsEnabled:
          description: >-
            Indicates whether outbound SMS is enabled in Cyclos
          type: boolean
        canVerify:
          description: >-
            Can the authenticated user verify mobile phones of this user?
          type: boolean
        canEnableForSms:
          description: >-
            Can the authenticated user enable / disable mobile phones of this user
            to send / receive SMS?
          type: boolean
        maxMobilePhones:
          description: >-
            Indicates the maximum number of mobile phones this user can have. Is
            only returned when `canManage` is `true`.
          type: integer
        maxLandLinePhones:
          description: >-
            Indicates the maximum number of land line (fixed) phones this user can
            have. Is only returned when `canManage` is `true`.
          type: integer
        phones:
          description: >-
            The list of (visible) phones
          type: array
          items:
            $ref: '#/components/schemas/PhoneResult'
        landLineAvailability:
          $ref: '#/components/schemas/AvailabilityEnum'
        mobileAvailability:
          $ref: '#/components/schemas/AvailabilityEnum'

    UserProductAssignmentData:
      description: >-
        Contains the current user individually assigned products,
        as well as other information
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        group:
          $ref: '#/components/schemas/Group'
        userProducts:
          description: >-
            Products currently assigned to this individual user
          type: array
          items:
            $ref: '#/components/schemas/ProductWithUserAccount'
        groupProducts:
          description: >-
            Products currently assigned to the user's group
          type: array
          items:
            $ref: '#/components/schemas/ProductWithUserAccount'
        groupSetProducts:
          description: >-
            Products currently assigned to the user's group set
          type: array
          items:
            $ref: '#/components/schemas/ProductWithUserAccount'
        assignable:
          description: >-
            If the authenticated user can assign more products to the user, this
            is the list of possible products to assign to the user.
          type: array
          items:
            $ref: '#/components/schemas/ProductWithUserAccount'
        unassignable:
          description: >-
            Either internal names or ids of currently assigned products that
            the logged user can unassign from the user.
          type: array
          items:
            type: string
        history:
          description: >-
            Contains the history entries for all product assignment changes
          type: array
          items:
            $ref: '#/components/schemas/ProductAssignmentLog'


    UserProfilePermissions:
      description: >-
        Permissions over a user profile
      type: object
      properties:
        editProfile:
          description: >-
            Can edit the user profile?
          type: boolean
        manageAddresses:
          description: >-
            Can manage addresses?
          type: boolean
        manageAddressesPrivacy:
          type: boolean
          description: >-
            Can manage the addresses privacy?
        managePhones:
          description: >-
            Can manage phones?
          type: boolean
        managePhonesPrivacy:
          type: boolean
          description: >-
            Can manage the phones privacy?
        manageImages:
          description: >-
            Can manage profile images?
          type: boolean
        manageContactInfos:
          description: >-
            Can manage additional contact informations?
          type: boolean
        canCreateAddress:
          description: >-
            Will be true if the authenticated user can manage addresses and the user
            for which we are viewing its profile has not reached the maximum allowed
            addresses. Only if `manageAddresses` is true.
          type: boolean
        canCreateLandLine:
          description: >-
            Will be true if the authenticated user can manage phones and the user
            for whom we are viewing its profile has not reached the maximum allowed
            landline phones. Only if `managePhones` is true.
          type: boolean
        canCreateMobile:
          description: >-
            Will be true if the authenticated user can manage phones and the user
            for whom we are viewing its profile has not reached the maximum allowed
            mobile phones. Only if `managePhones` is true.
          type: boolean
        canCreateImage:
          description: >-
            Will be true if the authenticated user can manage images and the user
            for whom we are viewing its profile has not reached the maximum allowed
            profile images. Only if `manageImages` is true.
          type: boolean
        canCreateContactInfo:
          description: >-
            Will be true if the authenticated user can manage additional contact
            informations and the user for whom we are viewing its profile has not
            reached the maximum allowed additional contact informations. Only if
            `manageContactInfos` is true.
          type: boolean
        maxAddresses:
          description: >-
            The maximum number of addresses the user can own. Only if
            `manageAddresses` is true
          type: integer
        maxMobiles:
          description: >-
            The maximum number of mobile phones the user can own. Only if
            `managePhones` is true.
          type: integer
        maxLandLines:
          description: >-
            The maximum number of land-line phones the user can own. Only if
            `managePhones` is true.
          type: integer
        maxImages:
          description: >-
            The maximum number of profile images  the user can own. Only if
            `manageImages` is true.
          type: integer
        maxContactInfos:
          description: >-
            The maximum number of additional contacts the user can own.
             Only if `manageContactInfos` is true.
          type: integer
        addressAvailability:
          description: >-
            The availability for addresses. Only if `manageAddresses` is true
          allOf:
            - $ref: '#/components/schemas/AvailabilityEnum'
        mobileAvailability:
          description: >-
            The availability for mobile phones Only if `managePhones` is true
          allOf:
            - $ref: '#/components/schemas/AvailabilityEnum'
        landLineAvailability:
          description: >-
            The availability for land-line phones Only if `managePhones` is true
          allOf:
            - $ref: '#/components/schemas/AvailabilityEnum'
        profileImageAvailability:
          description: >-
            The availability for profile images Only if `manageImages` is true
          allOf:
            - $ref: '#/components/schemas/AvailabilityEnum'
        contactInfoAvailability:
          description: >-
            The availability for additional contacts Only if `manageContactInfos` is
            true
          allOf:
            - $ref: '#/components/schemas/AvailabilityEnum'

    UserQueryFilters:
      description: >-
        Parameters for searching users
      allOf:
        - $ref: '#/components/schemas/BasicUserQueryFilters'
        - type: object
          properties:
            ignoreProfileFieldsInList:
              type: boolean
              description: >-
                When set to `true`, instead of returning users with corresponding
                profile fields set on list, will return them with `display` and
                `shortDisplay`.
            contactsOwner:
              type: string
              description: >-
                Indicates the (managed) user to exclude contacts when
                `excludecontacts` is set. Defaults to the logged user.
            excludeContacts:
              type: boolean
              description: >-
                When set to `true` will not return any user that is already a
                contact of the user indicated on `contactsOwner` (the logged user
                if not set).
            statuses:
              type: array
              items:
                $ref: '#/components/schemas/UserStatusEnum'
            roles:
              type: array
              items:
                $ref: '#/components/schemas/RoleEnum'
            orderBy:
              $ref: '#/components/schemas/UserOrderByEnum'

    UserReferenceDataForSearch:
      description: >-
        Data for searching references of a given user
      allOf:
        - $ref: '#/components/schemas/BaseReferenceDataForSearch'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            query:
              description: >-
                Default query filters
              allOf:
                - $ref: '#/components/schemas/UserReferenceQueryFilters'
            set:
              description: >-
                Can the authenticated user set a reference to the given user?
              type: boolean
            current:
              description: >-
                The current reference, if any, from the authenticated user
                to the given user
              allOf:
                - $ref: '#/components/schemas/Reference'


    UserReferenceQueryFilters:
      description: >-
        Query filters for a user's references
      allOf:
        - $ref: '#/components/schemas/BaseReferenceQueryFilters'
        - type: object
          properties:
            direction:
              $ref: '#/components/schemas/ReferenceDirectionEnum'
            relatedUser:
              description: >-
                The user that either gave or received the reference to the user
                specified in the path. Should be either the id or some other
                allowed identification (login name, email, etc).
              type: string


    UserReferenceResult:
      description: >-
        Result of searching references of a given user
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: object
          properties:
            relatedUser:
              description: >-
                The user that either gave to or received from the user specified
                in the path variable.
              allOf:
                - $ref: '#/components/schemas/User'
            direction:
              description: >-
                Whether this reference was given to or received from the user specified
                in the path variable.
              allOf:
                - $ref: '#/components/schemas/ReferenceDirectionEnum'

    UserRegistrationPrincipal:
      description: >-
        Contains information about a principal (user identification) and the
        channels that can be accessed using it
      type: object
      properties:
        value:
          description: >-
            The principal value
          type: string
        type:
          $ref: '#/components/schemas/PrincipalType'
        channels:
          description: >-
            The channels that can be accessed using this principal
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'

    UserRegistrationResult:
      description: >-
        Result of a user registration
      type: object
      properties:
        user:
          description: >-
            The user that has just been registered
          allOf:
            - $ref: '#/components/schemas/User'
        generatedPasswords:
          description: >-
            The types of passwords that were generated
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        rootUrl:
          description: >-
            The root URL that can be used to access the web interface
          type: string
        principals:
          description: >-
            Contains information about each user principal (identification) and the
            channels that can be accessed using it
          type: array
          items:
            $ref: '#/components/schemas/UserRegistrationPrincipal'
        status:
          $ref: '#/components/schemas/UserRegistrationStatusEnum'

    UserResult:
      description: >-
        Data returned from user search
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          x-implements: IUser
          properties:
            name:
              type: string
              description: >-
                The user's full name
            username:
              type: string
              description: >-
                The user's login name
            email:
              type: string
              description: >-
                The user's e-mail
            address:
              description: >-
                Address to be placed on map. Is only returned when the search
                result type is `map`.
              allOf:
                - $ref: '#/components/schemas/Address'
            distance:
              description: >-
                Only returned when there is a base location to calculate the
                distance from. The unit (kilometers or miles) depends on
                configuration.
              type: number
              format: double
            customValues:
              type: object
              description: >-
                Holds the values for custom fields, keyed by field internal name
                or id. The format of the value depends on the custom field type.
                Example: `{..., "customValues": {"gender": "male",
                "birthDate": "1980-10-27"}}`
              additionalProperties:
                type: string
            phone:
              type: string
              description: >-
                First phone number, used when phone is marked on products to be
                returned on user list
            accountNumber:
              type: string
              description: >-
                First account number, used when account number is marked on
                products to be returned on user list
            group:
              description: >-
                The user group. Only returned when the `includeGroup` parameter is
                set to `true` and the current user can see other users' groups.
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            groupSet:
              description: >-
                The user group. Only returned when the `includeGroupSet` parameter
                is set to `true` and the current user can see other users' group
                set.
              allOf:
                - $ref: '#/components/schemas/EntityReference'

    UserScheduledPaymentsPermissions:
      description: >-
        Permissions for scheduled payments over a user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated administrator or broker view scheduled payments
            of the given user?
          type: boolean

    UserSessionPermissions:
      description: >-
        Permissions regarding the login session of a given user
      type: object
      properties:
        disconnect:
          description: >-
            Can the authenticated admin disconnect this user?
          type: boolean

    UserStatusData:
      description: >-
        Contains the current user status, as well as other information
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/UserStatusEnum'
        possibleNewStatuses:
          description: >-
            If the authenticated user can manage the given user's status,
            contains the list of statuses that can be assigned.
          type: array
          items:
            $ref: '#/components/schemas/UserStatusEnum'
        history:
          description: >-
            Contains the history entries for all status changes
          type: array
          items:
            $ref: '#/components/schemas/UserStatusLog'


    UserStatusLog:
      description: >-
        Information regarding a specific status change
      type: object
      properties:
        by:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/UserStatusEnum'
        period:
          description: >-
            The begin and end date the for this status.
            The current status has no end date.
          allOf:
          - $ref: '#/components/schemas/DatePeriod'
        comment:
          description: >-
            Comments supplied by the manager that performed the status change
          type: string


    UserStatusPermissions:
      description: >-
        Permissions regarding the status of a given user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated user view the status and history of a given user?
          type: boolean

    UserTicketsPermissions:
      description: >-
        Permissions for tickets over a user
      type: object
      properties:
        view:
          description: >-
            Can the authenticated administrator or broker view tickets
            of the given user?
          type: boolean

    UserTokensListData:
      description: >-
        Data for tokens of a specific type and user
      allOf:
        - $ref: '#/components/schemas/TokenPermissions'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            tokens:
              description: >-
                The tokens for this type and user.
              type: array
              items:
                $ref: '#/components/schemas/Token'

    UserValidationPermissions:
      description: >-
        Permissions over the registration / email change validations of a
        given user
      type: object
      properties:
        validateRegistration:
          description: >-
            Can the authenticated administrator or broker manually mark a
            pending user as validated?
          type: boolean
        resendRegistrationValidation:
          description: >-
            Can the authenticated administrator or broker re-send the e-mail
            to confirm the registration of the given user?
          type: boolean
        validateEmailChange:
          description: >-
            Can the authenticated administrator or broker manually mark a
            pending e-mail change as validated for the given user?
          type: boolean
        resendEmailChange:
          description: >-
            Can the authenticated administrator or broker re-send the e-mail
            to confirm the e-mail change of the given user?
          type: boolean


    UserView:
      description: >-
        Represents a user with all data for viewing the profile
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          x-implements: IUser
          properties:
            name:
              type: string
              description: >-
                The user's full name
            username:
              type: string
              description: >-
                The user's login name
            email:
              type: string
              description: >-
                The user's e-mail
            emailPendingValidation:
              description: >-
                Returned for managers / own user when the user has changed his
                e-mail but hasn't yet validated the new e-mail. The e-mail change
                validation is a configuration in Cyclos.
              type: string
            enabledProfileFields:
              description: >-
                The internal names of profile fields enabled for this user.
                For example, the user might have no phones, but it might be
                because he is not allowed to have phones or because there
                are currently no phones. Same for addresses, images and optional
                profile fields.
              type: array
              items:
                type: string
            customValues:
              description: >-
                The list of custom field values this user has
              type: array
              items:
                $ref: '#/components/schemas/UserCustomFieldValue'
            group:
              description: >-
                Reference to the user group. Is only returned if the authenticated
                user has permission to see groups.
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            groupSet:
              description: >-
                Reference to the user group set. Is only returned if the
                authenticated user has permission to see group sets and the user
                group is in a group set.
              allOf:
                - $ref: '#/components/schemas/EntityReference'
            status:
              description: >-
                The user status. Only returned if the authenticated user has
                permission to view the user status.
              allOf:
                - $ref: '#/components/schemas/UserStatusEnum'
            additionalImages:
              type: array
              items:
                $ref: '#/components/schemas/Image'
              description: >-
                Holds the images other than the primary image, which is returned in
                the `image` field
            addresses:
              type: array
              items:
                $ref: '#/components/schemas/AddressView'
              description: >-
                Visible addresses
            phones:
              type: array
              items:
                $ref: '#/components/schemas/PhoneView'
              description: >-
                Visible phones
            contactInfos:
              type: array
              items:
                $ref: '#/components/schemas/ContactInfoDetailed'
              description: >-
                Visible additional contact information
            contact:
              description: >-
                When this user is in the contact list of the currently logged user,
                returns data about the contact relation. When not returned, this
                user is no in the logged user's contact list.
              allOf:
                - $ref: '#/components/schemas/ContactView'
            registrationDate:
              type: string
              format: date-time
              description: >-
                The date the user was registered. Only returned if the logged user
                manages the given used.
            activationDate:
              type: string
              format: date-time
              description: >-
                The date the user was made active the first time. Only returned if
                the logged user manages the given used.
            online:
              type: boolean
              description: >-
                Indicates whether the given user is logged-in to the system. Only
                returned if the logged user manages the given used.
            lastLogin:
              type: string
              format: date-time
              description: >-
                The last time the user logged in, or null if never logged in. Only
                returned if the logged user manages the given used.
            firstLogin:
              type: string
              format: date-time
              description: >-
                The first time the user logged in, or null if never logged in. Only
                returned if the logged user manages the given used.
            permissions:
              description: >-
                Permissions the authenticated has over this user
              allOf:
                - $ref: '#/components/schemas/UserPermissions'
            brokers:
              type: array
              items:
                $ref: '#/components/schemas/BrokerView'
              description: >-
                Visible brokers
            role:
              $ref: '#/components/schemas/RoleEnum'
            relationship:
              $ref: '#/components/schemas/UserRelationshipEnum'


    UserVouchersDataForSearch:
      description: >-
        Contains configuration data for searching vouchers of a user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        mask:
          description: >-
            The input mask for voucher tokens. Optional.
          type: string
        types:
          description: >-
            The voucher types that can be used for searching
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        operators:
          description: >-
            When searching for redeemed vouchers, the operators of the redeemer.
          type: array
          items:
            $ref: '#/components/schemas/User'
        query:
          $ref: '#/components/schemas/UserVouchersQueryFilters'

    UserVouchersPermissions:
      description: >-
        Permissions over a user vouchers
      type: object
      properties:
        viewRedeemed:
          description: >-
            Can view redeemed vouchers?
          type: boolean
        redeem:
          description: >-
            Can redeem vouchers?
          type: boolean
        viewBought:
          description: >-
            Can view bought vouchers?
          type: boolean
        buy:
          description: >-
            Can buy vouchers?
          type: boolean

    UserVouchersQueryFilters:
      description: >-
        Definitions for searching vouchers of a user
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            amountRange:
              description: >-
                The minimum / maximum voucher amount
              type: array
              items:
                type: string
                format: number
            creationPeriod:
              description: >-
                The minimum / maximum voucher creation date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            expirationPeriod:
              description: >-
                The minimum / maximum voucher expiration date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            redeemPeriod:
              description: >-
                The minimum / maximum voucher redeem date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            redeemBy:
              description: >-
                The user who perform the redeem action.
                A user identification value, such as id, username, e-mail, phone, etc. Id
                is always allowed, others depend on Cyclos configuration. Note that a
                valid numeric value is always considered as id. For example, when using
                another identification method that can be numeric only, prefix the value
                with a single quote (like in Excel spreadsheets), for example,
                `'1234567890`;
              type:
                string
            token:
              description: >-
                The voucher token (with or without mask)
              type: string
            types:
              description: >-
                The ids or internal names of voucher types
              type: array
              items:
                type: string
            statuses:
              type: array
              items:
                $ref: '#/components/schemas/VoucherStatusEnum'
            relation:
              $ref: '#/components/schemas/VoucherRelationEnum'

    UserWebshopPermissions:
      description: >-
        Permissions over webshop asd of a specific user
      allOf:
        - $ref: '#/components/schemas/UserBaseAdPermissions'
        - type: object
          properties:
            viewPurchases:
              description: >-
                Can view the purchases? Only returned if there is an authenticated user.
              type: boolean
            viewSales:
              description: >-
                Can view the sales? Only returned if there is an authenticated user.
              type: boolean
            viewSettings:
              description: >-
                Can view the webshop settings? Only returned if there is an authenticated user.
              type: boolean
            manageSettings:
              description: >-
                Can manage the webshop settings? Only returned if there is an authenticated user.
              type: boolean


    UserWithBalanceResult:
      description: >-
        Result of a user search with balance
      allOf:
        - $ref: '#/components/schemas/UserResult'
        - type: object
          properties:
            balance:
              description: >-
                The raw account balance
              type: string
              format: number
            negativeSince:
              description: >-
                The date since the account has been negative
              type: string
              format: date-time
            balanceLevel:
              $ref: '#/components/schemas/BalanceLevelEnum'

    UsersPermissions:
      description: >-
        Permissions over other users
      type: object
      properties:
        search:
          description: >-
            Permission to search other users
          type: boolean
        viewProfile:
          description: >-
            General permission to view the profile of other users. A fine-grained
            permission over specific groups can be configured. When attempting to
            view the profile of a user without permission, only very basic
            information is returned instead.
          type: boolean
        map:
          description: >-
            Permission to view the user map directory
          type: boolean
        registerAsAdmin:
          description: >-
            Is the authenticated user an administrator that can register users?
          type: boolean
        registerAsBroker:
          description: >-
            Is the authenticated user a broker that can register users?
          type: boolean
        registerAsMember:
          description: >-
            Is the authenticated user a user that can register other users?
          type: boolean

    UsersWithBalanceQueryFilters:
      description: >-
        Parameters for searching users with their balances
      allOf:
        - $ref: '#/components/schemas/BasicUserQueryFilters'
        - type: object
          required:
            - accountType
          properties:
            accountType:
              x-in: path
              description: >-
                The account type
              type: string
            balanceRange:
              description: >-
                The minimum and / or maximum balance for users to be returned.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: integer
            lastIncomingTransferPeriod:
              description: >-
                The minimum / maximum date of the last incoming transfer for users
                to be returned.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            lastOutgoingTransferPeriod:
              description: >-
                The minimum / maximum date of the last outgoing transfer for users
                to be returned.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            negativeSincePeriod:
              description: >-
                The minimum / maximum negative-since date for users to be returned.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            mediumBalanceRange:
              description: >-
                An array with 2 elements, describing the lower and upper medium
                balance bounds. If not specified, the range defined in the account
                type will be used. If that one is also not defined, there will be no
                definitions for balance levels. Both bounds need to be set as 2
                element in the array, or it won't be considered.
              type: array
              items:
                type: integer
            orderBy:
              $ref: '#/components/schemas/UsersWithBalanceOrderByEnum'

    UsersWithBalanceSummary:
      description: >-
        Contains summarized information about balances per range, plus the total
      type: object
      properties:
        low:
          description: >-
            Summary of low balances. Is only returned when a medium balance range is
            defined, either in the account type or in the query parameters.
          allOf:
            - $ref: '#/components/schemas/AmountSummary'
        medium:
          description: >-
            Summary of medium balances. Is only returned when a medium balance range
            is defined, either in the account type or in the query parameters.
          allOf:
            - $ref: '#/components/schemas/AmountSummary'
        high:
          description: >-
            Summary of high balances. Is only returned when a medium balance range
            is defined, either in the account type or in the query parameters.
          allOf:
            - $ref: '#/components/schemas/AmountSummary'
        total:
          description: >-
            Summary of all balances.
          allOf:
            - $ref: '#/components/schemas/AmountSummary'

    VersionedEntity:
      description: >-
        Basic definition of a persistent entity which has a version
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    VersionedEntityReference:
      description: >-
        Represents an entity that is being referenced from another one, without
        caring about the type of the referenced entity. Also carries on the entity
        version
      x-final: true
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            version:
              type: integer
              description: >-
                The version stamp for the current object, used for optimistic locking. When
                saving, the same version as previously received needs to be passed back. If
                no one else has saved the object, the version will match and the object will
                be updated. However, if someone other has saved the object, the version will
                no longer match, and an error will be raised. This is used to prevent
                multiple users (or processes) from updating the same object and unwilingly
                overridding the property values, leading to data loss.

    Voucher:
      description: >-
        A voucher is a token which can be used to buy at places that accept payments
        in Cyclos. Even users which are not members can get a printed token (or
        scratch card, ticket, etc) and buy in such places.
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            amount:
              description: >-
                The voucher amount
              type: string
              format: number
            token:
              description: >-
                The voucher token
              type: string
            status:
              $ref: '#/components/schemas/VoucherStatusEnum'

    VoucherBasicData:
      description: >-
        Contains common data for either buying or redeeming a voucher
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        type:
          $ref: '#/components/schemas/VoucherTypeDetailed'
        customFields:
          description: >-
            The custom fields associated with this voucher type
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDetailed'
        confirmationPasswordInput:
          description: >-
            If a confirmation password is used, contains the definitions on how to
            request that password from the user. This confirmation password is required
            when performing sensible actions. Sometimes this is dynamic, for example,
            the confirmation might be configured to be used only once per session, or
            operations like payments may have a limit per day to be without confirmation
            (pinless).
          allOf:
            - $ref: '#/components/schemas/PasswordInput'

    VoucherBoughtResult:
      description: >-
        Result of buying vouchers
      type: object
      properties:
        vouchers:
          description: >-
            The identifiers of all bought vouchers.
          type: array
          items:
            type: string
        voucherStatus:
          description: >-
            The status of all bought vouchers.
          allOf:
            - $ref: '#/components/schemas/VoucherStatusEnum'

    VoucherConfiguration:
      description: >-
        Reference to a voucher configuration
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            currency:
              $ref: '#/components/schemas/Currency'

    VoucherDataForBuy:
      description: >-
        If a type is not specified when requesting this data only the given
        user data and the list of types the authenticated user can buy for
        it (could be himself) is returned.
      allOf:
        - $ref: '#/components/schemas/VoucherBasicData'
        - type: object
          properties:
            account:
              description: >-
                The account from which the buy will be debited
              allOf:
                - $ref: '#/components/schemas/AccountWithStatus'
            canBuyMultiple:
              description: >-
                If user can buy multiple vouchers at same time
              type: boolean
            fixedAmount:
              description: >-
                Returned if there is a fixed amount for bought vouchers. Is kept for
                backwards compatibility, because the `amountRange` is enough to
                return this information (when `min` and `max` are the same amount)
              type: string
              format: number
            amountRange:
              description: >-
                Returned if there is a minimum / maximum amount for buying
              allOf:
                - $ref: '#/components/schemas/DecimalRange'
            minimumTimeToRedeem:
              description: >-
                Returned if there is a minimum time to be elapsed before bought
                vouchers can be redeemed
              allOf:
                - $ref: '#/components/schemas/TimeInterval'
            types:
              description: >-
                The list of voucher types the authenticated user can buy to another
                user (or himself). Only if no type parameter is given.
              type: array
              items:
                $ref: '#/components/schemas/VoucherTypeDetailed'

    VoucherDataForRedeem:
      description: >-
        Data used to redeem a voucher
      allOf:
        - $ref: '#/components/schemas/VoucherBasicData'
        - type: object
          properties:
            token:
              description: >-
                The formatted voucher token
              type: string
            amount:
              description: >-
                The voucher amount
              type: string
              format: number
            buyer:
              description: >-
                The voucher buyer, if any and visible
              allOf:
                - $ref: '#/components/schemas/User'

    VoucherInitialDataForRedeem:
      description: >-
        Initial data used to redeem vouchers
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        mask:
          description: >-
            The voucher token mask
          type: string

    VoucherPermissions:
      description: >-
        Permissions over vouchers
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/VoucherConfiguration'
        buy:
          description: >-
            Whether the logged user can buy vouchers of types belonging to this configuration
          type: boolean
        redeem:
          description: >-
            Whether the logged user can redeem vouchers of types belonging to this configuration
          type: boolean
        cancel:
          description: >-
            Whether the logged user can cancel vouchers of types belonging to this configuration.
            Only if the authenticated user is an admin. Otherwise `false`.
          type: boolean
        changeExpirationDate:
          description: >-
            Whether the logged user can change the expiration date of vouchers of types belonging to this configuration.
            Only if the authenticated user is an admin. Otherwise `false`.
          type: boolean
        refund:
          description: >-
            Whether the logged user can refund vouchers of types belonging to this configuration.
          type: boolean
        generate:
          description: >-
            Whether the logged user can generate vouchers of types belonging to this configuration.
            Only if the authenticated user is an admin. Otherwise `false`.
          type: boolean
        view:
          description: >-
            Whether the logged user can view vouchers of types belonging to this configuration.
            Only if the authenticated user is an admin. Otherwise `false`.
          type: boolean
        viewBought:
          description: >-
            Whether the logged user can view vouchers bought of types belonging to this configuration.
            Only if the authenticated user is a member or broker. Otherwise `false`.
          type: boolean
        viewRedeemed:
          description: >-
            Whether the logged user can view vouchers redeemed of types belonging to this configuration.
            Only if the authenticated user is a member or broker. Otherwise `false`.
          type: boolean
        enabled:
          description: >-
            Whether the logged user has enabled the types belonging to this configuration.
            Only if the authenticated user is a member. Otherwise `false`.
          type: boolean

    VoucherRedeemResult:
      description: >-
        Result when redeeming a voucher
      type: object
      properties:
        voucherId:
          description: >-
            The voucher identifier
          type: string
        paymentId:
          description: >-
            The generated payment identifier
          type: string

    VoucherResult:
      description: >-
        Result of a voucher search
      allOf:
        - $ref: '#/components/schemas/Voucher'
        - type: object
          properties:
            buyer:
              description: >-
                The voucher buyer. Is not returned when the voucher was generated or
                when searching for bought vouchers of a user.
              allOf:
                - $ref: '#/components/schemas/User'
            creationDate:
              description: >-
                The date a voucher was generated or bought
              type: string
              format: date-time
            expirationDate:
              description: >-
                The date a voucher expires
              type: string
              format: date-time
            redeemBy:
              description: >-
                The user who perform the redeem action, could be an admin, broker or
                operator of the redeemer. Is not returned when the voucher was
                not yet redeemed or if it is the same as the redeemer.
              allOf:
                - $ref: '#/components/schemas/User'
            redeemer:
              description: >-
                The voucher redeemer. Is not returned when the voucher was not yet
                redeemed or when searching for redeemed vouchers of a user.
              allOf:
                - $ref: '#/components/schemas/User'
            redeemDate:
              description: >-
                The date a voucher was redeemed (if so)
              type: string
              format: date-time
            redeemAfterDate:
              description: >-
                The date after which the voucher can be redeemed. Is only returned
                if the voucher `status` is `open`.
              type: string
              format: date-time
            type:
              $ref: '#/components/schemas/VoucherType'
            redeemOnWeekDays:
              description: >-
                The days of the week a voucher can be redeemed. Is only returned if
                the voucher `status` is `open`.
              type: array
              items:
                $ref: '#/components/schemas/WeekDayEnum'

    VoucherType:
      description: >-
        Reference to a voucher type
      allOf:
        - $ref: '#/components/schemas/InternalNamedEntity'
        - type: object
          properties:
            configuration:
              $ref: '#/components/schemas/VoucherConfiguration'
            image:
              $ref: '#/components/schemas/Image'

    VoucherTypeDetailed:
      description: >-
        Reference to a voucher type and add extra information.
      allOf:
        - $ref: '#/components/schemas/VoucherType'
        - type: object
          properties:
            voucherTitle:
              description: >-
                The voucher title
              type: string
            voucherDescription:
              description: >-
                The voucher description
              type: string

    VoucherView:
      description: >-
        Details of a voucher
      allOf:
        - $ref: '#/components/schemas/VoucherResult'
        - type: object
          properties:
            title:
              description: >-
                The voucher title when it was created.
              type: string
            description:
              description: >-
                The voucher description when it was created.
              type: string
            buy:
              description: >-
                The transaction which bought this voucher, if any and visible.
              allOf:
                - $ref: '#/components/schemas/Transaction'
            redeemDate:
              description: >-
                The date the voucher was redeemer, if any.
              type: string
              format: date-time
            redeem:
              description: >-
                The transaction which redeemed this voucher, if any and visible.
              allOf:
                - $ref: '#/components/schemas/Transaction'
            canChangeExpirationDate:
              description:
                Can the authenticated user change this voucher's expiration date?
              type: boolean
            showConfiguration:
              description: >-
                Should the voucher configuration be shown to users? This flag is
                `true` when there are multiple available configurations.
              type: boolean
            showQrCode:
              description: >-
                Should the voucher token be shown as QR-code for users?
              type: boolean
            redeemAfterDateReached:
              description: >-
                Should the voucher be available to be redeemed?
              type: boolean
            creationType:
              $ref: '#/components/schemas/VoucherCreationTypeEnum'
            cancelAction:
              $ref: '#/components/schemas/VoucherCancelActionEnum'
            refund:
              description: >-
                The transaction which refunds this voucher, if any and visible.
              allOf:
                - $ref: '#/components/schemas/Transaction'
            exportFormats:
              description: >-
                The formats which the data can be exported
              type: array
              items:
                $ref: '#/components/schemas/ExportFormat'
            confirmationPasswordInput:
              description: >-
                If a confirmation password is used, contains the definitions on how to
                request that password from the user. This confirmation password is required
                when performing sensible actions. Sometimes this is dynamic, for example,
                the confirmation might be configured to be used only once per session, or
                operations like payments may have a limit per day to be without confirmation
                (pinless).
              allOf:
                - $ref: '#/components/schemas/PasswordInput'


    VouchersDataForSearch:
      description: >-
        Contains configuration data for searching vouchers as admin
      type: object
      properties:
        mask:
          description: >-
            The input mask for voucher tokens. Optional.
          type: string
        types:
          description: >-
            The voucher types that can be used for searching
          type: array
          items:
            $ref: '#/components/schemas/VoucherType'
        userGroups:
          description: >-
            Visible user groups for the authenticated user
          type: array
          items:
            $ref: '#/components/schemas/Group'
        exportFormats:
          description: >-
            The formats which the search results can be exported.
          type: array
          items:
            $ref: '#/components/schemas/ExportFormat'
        query:
          $ref: '#/components/schemas/VouchersQueryFilters'

    VouchersPermissions:
      description: >-
        Permissions over voucher configurations
      type: object
      properties:
        vouchers:
          description: >-
            Permissions over each voucher configuration
          type: array
          items:
            $ref: '#/components/schemas/VoucherPermissions'

    VouchersQueryFilters:
      description: >-
        Definitions for searching vouchers as admin
      allOf:
        - $ref: '#/components/schemas/QueryFilters'
        - type: object
          properties:
            amountRange:
              description: >-
                The minimum / maximum voucher amount
              type: array
              items:
                type: string
                format: number
            creationPeriod:
              description: >-
                The minimum / maximum voucher creation date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            expirationPeriod:
              description: >-
                The minimum / maximum voucher expiration date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            redeemPeriod:
              description: >-
                The minimum / maximum voucher redeem date.
                Is expressed an array, with the lower bound as first element, and
                the upper bound as second element. When only one element, will have
                just the lower bound. To specify only the upper bound, prefix the value
                with a comma.
              type: array
              items:
                type: string
                format: date-time
            token:
              description: >-
                The voucher token (with or without mask)
              type: string
            types:
              description: >-
                The ids or internal names of voucher types
              type: array
              items:
                type: string
            statuses:
              type: array
              items:
                $ref: '#/components/schemas/VoucherStatusEnum'
            creationType:
              $ref: '#/components/schemas/VoucherCreationTypeEnum'
            printed:
              description: >-
                If it is passed, filter if the voucher was printed or not.
              type: boolean
            buyer:
              description: >-
                The buyer of the voucher.
                A user identification value, such as id, username, e-mail, phone, etc. Id
                is always allowed, others depend on Cyclos configuration. Note that a
                valid numeric value is always considered as id. For example, when using
                another identification method that can be numeric only, prefix the value
                with a single quote (like in Excel spreadsheets), for example,
                `'1234567890`;
              type:
                string
            redeemer:
              description: >-
                The redeemer of the voucher.
                A user identification value, such as id, username, e-mail, phone, etc. Id
                is always allowed, others depend on Cyclos configuration. Note that a
                valid numeric value is always considered as id. For example, when using
                another identification method that can be numeric only, prefix the value
                with a single quote (like in Excel spreadsheets), for example,
                `'1234567890`;
              type:
                string
            buyerGroups:
              description: >-
                The ids or internal names of buyers groups
              type: array
              items:
                type: string
            redeemerGroups:
              description: >-
                The ids or internal names of redeemers groups
              type: array
              items:
                type: string
            orderBy:
              $ref: '#/components/schemas/VoucherOrderByEnum'

    WebshopAd:
      description: >-
        An Ad with its status information.
      allOf:
        - $ref: '#/components/schemas/BaseAdDetailed'
        - type: object
          properties:
            allowDecimalQuantity:
              description: >-
                Indicates if the webshop ad allow enter a decimal value for
                the  quantity.
              type: boolean
            minAllowedInCart:
              description: >-
                The minimum quantity allowed to be added in the shopping cart.
              type: string
              format: number
            maxAllowedInCart:
              description: >-
                The maximum quantity allowed to be added in the shopping cart.
              type: string
              format: number
            stockQuantity:
              description: >-
                The stock disponibility. Only if `unlimitedStock` is false and
                the  'Stock type' was not marked as 'Not available' (through the
                web  interface).
              type: string
              format: number
            unlimitedStock:
              description: >-
                If true then it means there is always disponibility of the webshop
                ad.
              type: boolean
            productNumber:
              description: >-
                The number assigned to the webshop ad.
              type: string

    WebshopSettings:
      description: >-
        Settings for a user's webshop
      type: object
      properties:
        productNumberGenerated:
          type: boolean
          description: >-
            Whether the product number, which is required for webshop
            advertisements, will be generated (true) or manual (false).
        productNumberMask:
          type: string
          description: >-
            A mask that indicates the format of product numbers.
            The following characters are accepted:

            - `?`, `_`: Any character;
            - `#`, `0`, `9`: A digit;
            - `A`, `a`: A letter (regardless the case);
            - `L`, `l`: A lowercase letter;
            - `U`, `u`: An uppercase letter;
            - `C`, `c`: A capitalized letter;
            - `\` folowed by any character, or any character not in the list
              above: A literal character.
          example: "UUU-####"
        customOrderNumberFormat:
          type: boolean
          description: >-
            Whether orders will have a custom format for assigned numbers.
            When set, the number will be generated from a given prefix,
            inner length and suffix. When false, a numeric string will be used.
        orderNumberPrefix:
          type: string
          description: >-
            The order number prefix. You can generate a date part by using a
            [Java date pattern](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html)
            between sharp (#) characters.
          example: "#yyyyMM#-"
        orderNumberInnerLength:
          type: integer
          description: >-
            The size of the numerical part of the order number.
        orderNumberSuffix:
          type: string
          description: >-
            The order number suffix. You can generate a date part by using a
            [Java date pattern](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html)
            between sharp (#) characters.

    WebshopSettingsView:
      description: >-
        Details of a user webshop settings
      allOf:
        - $ref: '#/components/schemas/WebshopSettings'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

